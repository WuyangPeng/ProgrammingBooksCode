This is Info file am-utils.info, produced by Makeinfo version 1.68 from
the input file am-utils.texi.

START-INFO-DIR-ENTRY
* Am-utils: (am-utils).          The Amd automounter suite of utilities
END-INFO-DIR-ENTRY


File: am-utils.info,  Node: FSinfo filesystems fstype,  Next: FSinfo filesystems opts,  Up: FSinfo filesystems

fstype Option
-------------

   This specifies the type of filesystem being declared and will be
placed into the `fstab' file as is.  The value of this option will be
handed to `mount' as the filesystem type--it should have such values as
`4.2', `nfs' or `swap'.  The value is not examined for correctness.

   There is one special case.  If the filesystem type is specified as
`export' then the filesystem information will not be added to the
host's `fstab' information, but it will still be visible on the
network.  This is useful for defining hosts which contain referenced
volumes but which are not under full control of FSinfo.

   Example:

     fstype = swap


File: am-utils.info,  Node: FSinfo filesystems opts,  Next: FSinfo filesystems passno,  Prev: FSinfo filesystems fstype,  Up: FSinfo filesystems

opts Option
-----------

   This defines any options that should be given to mount(8) in the
`fstab' file.  For example:

     opts = rw,nosuid,grpid


File: am-utils.info,  Node: FSinfo filesystems passno,  Next: FSinfo filesystems freq,  Prev: FSinfo filesystems opts,  Up: FSinfo filesystems

passno Option
-------------

   This defines the fsck(8) pass number in which to check the
filesystem.  This value will be placed into the `fstab' file.

   Example:

     passno = 1


File: am-utils.info,  Node: FSinfo filesystems freq,  Next: FSinfo filesystems mount,  Prev: FSinfo filesystems passno,  Up: FSinfo filesystems

freq Option
-----------

   This defines the interval (in days) between dumps.  The value is
placed as is into the `fstab' file.

   Example:

     freq = 3


File: am-utils.info,  Node: FSinfo filesystems mount,  Next: FSinfo filesystems dumpset,  Prev: FSinfo filesystems freq,  Up: FSinfo filesystems

mount Option
------------

   This defines the mountpoint at which to place the filesystem.  If the
mountpoint of the filesystem is specified as `default', then the
filesystem will be mounted in the automounter's tree under its volume
name and the mount will automatically be inherited by the automounter.

   Following the mountpoint, namespace information for the filesystem
may be described.  The options that can be given here are `exportfs',
`volname' and `sel'.

   The format is:

     mount       : "mount" vol_tree ;
     
     vol_tree    : list(vol_tree_attr) ;
     
     vol_tree_attr
                 :  <STRING> "{" list(vol_tree_info) vol_tree "}" ;
     
     vol_tree_info
                 : "exportfs" <EXPORT-DATA>
                 | "volname" <VOLNAME>
                 | "sel" <SELECTOR-LIST>
                 ;

   Example:

     mount default {
         exportfs "dylan dougal florence zebedee"
         volname /vol/andrew
     }

   In the above example, the filesystem currently being declared will
have an entry placed into the `exports' file allowing the filesystem to
be exported to the machines `dylan', `dougal', `florence' and
`zebedee'.  The volume name by which the filesystem will be referred to
remotely, is `/vol/andrew'.  By declaring the mountpoint to be
`default', the filesystem will be mounted on the local machine in the
automounter tree, where Amd will automatically inherit the mount as
`/vol/andrew'.

`exportfs'
     a string defining which machines the filesystem may be exported to.
     This is copied, as is, into the `exports' file--no sanity checking
     is performed on this string.

`volname'
     a string which declares the remote name by which to reference the
     filesystem.  The string is entered into a dictionary and allows
     you to refer to this filesystem in other places by this volume
     name.

`sel'
     a string which is placed into the automounter maps as a selector
     for the filesystem.


File: am-utils.info,  Node: FSinfo filesystems dumpset,  Next: FSinfo filesystems log,  Prev: FSinfo filesystems mount,  Up: FSinfo filesystems

dumpset Option
--------------

   This provides support for Imperial College's local file backup tools
and is not documented further here.


File: am-utils.info,  Node: FSinfo filesystems log,  Prev: FSinfo filesystems dumpset,  Up: FSinfo filesystems

log Option
----------

   Specifies the log device for the current filesystem. This is ignored
if not required by the particular filesystem type.


File: am-utils.info,  Node: FSinfo static mounts,  Next: FSinfo automount definitions,  Prev: FSinfo filesystems,  Up: FSinfo host definitions

FSinfo static mounts
====================

   Each host may also have a number of statically mounted filesystems.
For example, the host may be a diskless workstation in which case it
will have no `fs' declarations.  In this case the `mount' declaration
is used to determine from where its filesystems will be mounted.  In
addition to being added to the `fstab' file, this information can also
be used to generate a suitable `bootparams' file.

     mount       : "mount" <VOLNAME> list(localinfo) ;
     
     localinfo   : localinfo_attr <STRING> ;
     
     localinfo_attr
                 : "as"
                 | "from"
                 | "fstype"
                 | "opts"
                 ;

   The filesystem specified to be mounted will be searched for in the
dictionary of volume names built when scanning the list of hosts'
definitions.

   The attributes have the following semantics:
`from MACHINE'
     mount the filesystem from the machine with the hostname of
     "machine".

`as MOUNTPOINT'
     mount the filesystem locally as the name given, in case this is
     different from the advertised volume name of the filesystem.

`opts OPTIONS'
     native mount(8) options.

`fstype TYPE'
     type of filesystem to be mounted.

   An example:

     mount /export/exec/hp300/local as /usr/local

   If the mountpoint specified is either `/' or `swap', the machine
will be considered to be booting off the net and this will be noted for
use in generating a `bootparams' file for the host which owns the
filesystems.


File: am-utils.info,  Node: FSinfo automount definitions,  Next: FSinfo Command Line Options,  Prev: FSinfo static mounts,  Up: FSinfo

Defining an Amd Mount Map in FSinfo
===================================

   The maps used by Amd can be constructed from FSinfo by defining all
the automount trees.  FSinfo takes all the definitions found and builds
one map for each top level tree.

   The automount tree is usually defined last.  A single automount
configuration will usually apply to an entire management domain.  One
`automount' declaration is needed for each Amd automount point.  FSinfo
determines whether the automount point is "direct" (*note Direct
Automount Filesystem::.) or "indirect" (*note Top-level Filesystem::.).
Direct automount points are distinguished by the fact that there is no
underlying "automount_tree".

     automount   : "automount" opt(auto_opts) automount_tree ;
     
     auto_opts   : "opts" <MOUNT-OPTIONS> ;
     
     automount_tree
                 : list(automount_attr)
                 ;
     
     automount_attr
                 : <STRING> "=" <VOLNAME>
                 | <STRING> "->" <SYMLINK>
                 | <STRING> "{" automount_tree "}"
                 ;

   If <MOUNT-OPTIONS> is given, then it is the string to be placed in
the maps for Amd for the `opts' option.

   A "map" is typically a tree of filesystems, for example `home'
normally contains a tree of filesystems representing other machines in
the network.

   A map can either be given as a name representing an already defined
volume name, or it can be a tree.  A tree is represented by placing
braces after the name.  For example, to define a tree `/vol', the
following map would be defined:

     automount /vol { }

   Within a tree, the only items that can appear are more maps.  For
example:

     automount /vol {
         andrew { }
         X11 { }
     }

   In this case, FSinfo will look for volumes named `/vol/andrew' and
`/vol/X11' and a map entry will be generated for each.  If the volumes
are defined more than once, then FSinfo will generate a series of
alternate entries for them in the maps.

   Instead of a tree, either a link (NAME `->' DESTINATION) or a
reference can be specified (NAME `=' DESTINATION).  A link creates a
symbolic link to the string specified, without further processing the
entry.  A reference will examine the destination filesystem and
optimize the reference.  For example, to create an entry for `njw' in
the `/homes' map, either of the two forms can be used:

     automount /homes {
         njw -> /home/dylan/njw
     }

   or

     automount /homes {
         njw = /home/dylan/njw
     }

   In the first example, when `/homes/njw' is referenced from Amd, a
link will be created leading to `/home/dylan/njw' and the automounter
will be referenced a second time to resolve this filename.  The map
entry would be:

     njw type:=link;fs:=/home/dylan/njw

   In the second example, the destination directory is analyzed and
found to be in the filesystem `/home/dylan' which has previously been
defined in the maps. Hence the map entry will look like:

     njw rhost:=dylan;rfs:=/home/dylan;sublink:=njw

   Creating only one symbolic link, and one access to Amd.


File: am-utils.info,  Node: FSinfo Command Line Options,  Next: FSinfo errors,  Prev: FSinfo automount definitions,  Up: FSinfo

FSinfo Command Line Options
===========================

   FSinfo is started from the command line by using the command:

     fsinfo [options] files ...

   The input to FSinfo is a single set of definitions of machines and
automount maps.  If multiple files are given on the command-line, then
the files are concatenated together to form the input source.  The files
are passed individually through the C pre-processor before being parsed.

   Several options define a prefix for the name of an output file.  If
the prefix is not specified no output of that type is produced.  The
suffix used will correspond either to the hostname to which a file
belongs, or to the type of output if only one file is produced.
Dumpsets and the `bootparams' file are in the latter class.  To put the
output into a subdirectory simply put a `/' at the end of the prefix,
making sure that the directory has already been made before running
`fsinfo'.

* Menu:

* -a FSinfo Option::    Amd automount directory:
* -b FSinfo Option::    Prefix for bootparams files.
* -d FSinfo Option::    Prefix for dumpset data files.
* -e FSinfo Option::    Prefix for exports files.
* -f FSinfo Option::    Prefix for fstab files.
* -h FSinfo Option::    Local hostname.
* -m FSinfo Option::    Prefix for automount maps.
* -q FSinfo Option::    Ultra quiet mode.
* -v FSinfo Option::    Verbose mode.
* -I FSinfo Option::    Define new #include directory.
* -D-FSinfo Option::    Define macro.
* -U FSinfo Option::    Undefine macro.


File: am-utils.info,  Node: -a FSinfo Option,  Next: -b FSinfo Option,  Prev: FSinfo Command Line Options,  Up: FSinfo Command Line Options

`-a' AUTODIR
------------

   Specifies the directory name in which to place the automounter's
mountpoints.  This defaults to `/a'.  Some sites have the autodir set
to be `/amd', and this would be achieved by:

     fsinfo -a /amd ...


File: am-utils.info,  Node: -b FSinfo Option,  Next: -d FSinfo Option,  Prev: -a FSinfo Option,  Up: FSinfo Command Line Options

`-b' BOOTPARAMS
---------------

   This specifies the prefix for the `bootparams' filename.  If it is
not given, then the file will not be generated.  The `bootparams' file
will be constructed for the destination machine and will be placed into
a file named `bootparams' and prefixed by this string.  The file
generated contains a list of entries describing each diskless client
that can boot from the destination machine.

   As an example, to create a `bootparams' file in the directory
`generic', the following would be used:

     fsinfo -b generic/ ...


File: am-utils.info,  Node: -d FSinfo Option,  Next: -e FSinfo Option,  Prev: -b FSinfo Option,  Up: FSinfo Command Line Options

`-d' DUMPSETS
-------------

   This specifies the prefix for the `dumpsets' file.  If it is not
specified, then the file will not be generated.  The file will be for
the destination machine and will be placed into a filename `dumpsets',
prefixed by this string.  The `dumpsets' file is for use by Imperial
College's local backup system.

   For example, to create a dumpsets file in the directory `generic',
then you would use the following:

     fsinfo -d generic/ ...


File: am-utils.info,  Node: -e FSinfo Option,  Next: -f FSinfo Option,  Prev: -d FSinfo Option,  Up: FSinfo Command Line Options

`-e' EXPORTFS
-------------

   Defines the prefix for the `exports' files.  If it is not given,
then the file will not be generated.  For each machine defined in the
configuration files as having disks, an `exports' file is constructed
and given a filename determined by the name of the machine, prefixed
with this string.  If a machine is defined as diskless, then no
`exports' file will be created for it.  The files contain entries for
directories on the machine that may be exported to clients.

   Example: To create the `exports' files for each diskfull machine and
place them into the directory `exports':

     fsinfo -e exports/ ...


File: am-utils.info,  Node: -f FSinfo Option,  Next: -h FSinfo Option,  Prev: -e FSinfo Option,  Up: FSinfo Command Line Options

`-f' FSTAB
----------

   This defines the prefix for the `fstab' files.  The files will only
be created if this prefix is defined.  For each machine defined in the
configuration files, a `fstab' file is created with the filename
determined by prefixing this string with the name of the machine.  These
files contain entries for filesystems and partitions to mount at boot
time.

   Example, to create the files in the directory `fstabs':

     fsinfo -f fstabs/ ...


File: am-utils.info,  Node: -h FSinfo Option,  Next: -m FSinfo Option,  Prev: -f FSinfo Option,  Up: FSinfo Command Line Options

`-h' HOSTNAME
-------------

   Defines the hostname of the destination machine to process for.  If
this is not specified, it defaults to the local machine name, as
returned by gethostname(2).

   Example:

     fsinfo -h dylan.doc.ic.ac.uk ...


File: am-utils.info,  Node: -m FSinfo Option,  Next: -q FSinfo Option,  Prev: -h FSinfo Option,  Up: FSinfo Command Line Options

`-m' MOUNT-MAPS
---------------

   Defines the prefix for the automounter files.  The maps will only be
produced if this prefix is defined.  The mount maps suitable for the
network defined by the configuration files will be placed into files
with names calculated by prefixing this string to the name of each map.

   For example, to create the automounter maps and place them in the
directory `automaps':

     fsinfo -m automaps/ ...


File: am-utils.info,  Node: -q FSinfo Option,  Next: -v FSinfo Option,  Prev: -m FSinfo Option,  Up: FSinfo Command Line Options

`-q'
----

   Selects quiet mode.  FSinfo suppress the "running commentary" and
only outputs any error messages which are generated.


File: am-utils.info,  Node: -v FSinfo Option,  Next: -D-FSinfo Option,  Prev: -q FSinfo Option,  Up: FSinfo Command Line Options

`-v'
----

   Selects verbose mode.  When this is activated, the program will
display more messages, and display all the information discovered when
performing the semantic analysis phase.  Each verbose message is output
to `stdout' on a line starting with a `#' character.


File: am-utils.info,  Node: -D-FSinfo Option,  Next: -I FSinfo Option,  Prev: -v FSinfo Option,  Up: FSinfo Command Line Options

`-D' NAME[=DEFN]
----------------

   Defines a symbol "name" for the preprocessor when reading the
configuration files.  Equivalent to `#define' directive.


File: am-utils.info,  Node: -I FSinfo Option,  Next: -U FSinfo Option,  Prev: -D-FSinfo Option,  Up: FSinfo Command Line Options

`-I' DIRECTORY
--------------

   This option is passed into the preprocessor for the configuration
files.  It specifies directories in which to find include files


File: am-utils.info,  Node: -U FSinfo Option,  Prev: -I FSinfo Option,  Up: FSinfo Command Line Options

`-U' NAME
---------

   Removes any initial definition of the symbol "name".  Inverse of the
`-D' option.


File: am-utils.info,  Node: FSinfo errors,  Prev: FSinfo Command Line Options,  Up: FSinfo

Errors produced by FSinfo
=========================

   The following table documents the errors and warnings which FSinfo
may produce.

" expected
     Occurs if an unescaped newline is found in a quoted string.

ambiguous mount: VOLUME is a replicated filesystem
     If several filesystems are declared as having the same volume
     name, they will be considered replicated filesystems.  To mount a
     replicated filesystem statically, a specific host will need to be
     named, to say which particular copy to try and mount, else this
     error will result.

can't open FILENAME for writing
     Occurs if any errors are encountered when opening an output file.

cannot determine localname since volname VOLUME is not uniquely defined
     If a volume is replicated and an attempt is made to mount the
     filesystem statically without specifying a local mountpoint,
     FSinfo cannot calculate a mountpoint, as the desired pathname
     would be ambiguous.

DEVICE has duplicate exportfs data
     Produced if the `exportfs' option is used multiple times within the
     same branch of a filesystem definition. For example, if you
     attempt to set the `exportfs' data at different levels of the
     mountpoint directory tree.

dump frequency for HOST:DEVICE is non-zero
     Occurs if DEVICE has its `fstype' declared to be `swap' or
     `export' and the `dump' option is set to a value greater than
     zero.  Swap devices should not be dumped.

duplicate host HOSTNAME!
     If a host has more than one definition.

end of file within comment
     A comment was unterminated before the end of one of the
     configuration files.

FILENAME: cannot open for reading
     If a file specified on the command line as containing
     configuration data could not be opened.

FILESYSTEM has a volname but no exportfs data
     Occurs when a volume name is declared for a file system, but the
     string specifying what machines the filesystem can be exported to
     is missing.

fs field "FIELD-NAME" already set
     Occurs when multiple definitions are given for one of the
     attributes of a host's filesystem.

host field "FIELD-NAME" already set
     If duplicate definitions are given for any of the fields with a
     host definition.

HOST:DEVICE has more than one mount point
     Occurs if the mount option for a host's filesystem specifies
     multiple trees at which to place the mountpoint.

HOST:DEVICE has no mount point
     Occurs if the `mount' option is not specified for a host's
     filesystem.

HOST:DEVICE needs field "FIELD-NAME"
     Occurs when a filesystem is missing a required field. FIELD-NAME
     could be one of `fstype', `opts', `passno' or `mount'.

HOST:mount field specified for swap partition
     Occurs if a mountpoint is given for a filesystem whose type is
     declared to be `swap'.

malformed IP dotted quad: ADDRESS
     If the Internet address of an interface is incorrectly specified.
     An Internet address definition is handled to inet_addr(3N) to see
     if it can cope.  If not, then this message will be displayed.

malformed netmask: NETMASK
     If the netmask cannot be decoded as though it were a hexadecimal
     number, then this message will be displayed.  It will typically be
     caused by incorrect characters in the NETMASK value.

mount field "FIELD-NAME" already set
     Occurs when a static mount has multiple definitions of the same
     field.

mount tree field "FIELD-NAME" already set
     Occurs when the FIELD-NAME is defined more than once during the
     definition of a filesystems mountpoint.

netif field FIELD-NAME already set
     Occurs if you attempt to define an attribute of an interface more
     than once.

network booting requires both root and swap areas
     Occurs if a machine has mount declarations for either the root
     partition or the swap area, but not both.  You cannot define a
     machine to only partially boot via the network.

no disk mounts on HOSTNAME
     If there are no static mounts, nor local disk mounts specified for
     a machine, this message will be displayed.

no volname given for HOST:DEVICE
     Occurs when a filesystem is defined to be mounted on `default', but
     no volume name is given for the file system, then the mountpoint
     cannot be determined.

not allowed '/' in a directory name
     Occurs when a pathname with multiple directory elements is
     specified as the name for an automounter tree.  A tree should only
     have one name at each level.

pass number for HOST:DEVICE is non-zero
     Occurs if DEVICE has its `fstype' declared to be `swap' or
     `export' and the fsck(8) pass number is set. Swap devices should
     not be fsck'd.  *Note FSinfo filesystems fstype::.

sub-directory DIRECTORY of DIRECTORY-TREE starts with '/'
     Within the filesystem specification for a host, if an element
     DIRECTORY of the mountpoint begins with a `/' and it is not the
     start of the tree.

sub-directory of DIRECTORY-TREE is named "default"
     `default' is a keyword used to specify if a mountpoint should be
     automatically calculated by FSinfo.  If you attempt to specify a
     directory name as this, it will use the filename of `default' but
     will produce this warning.

unknown \ sequence
     Occurs if an unknown escape sequence is found inside a string.
     Within a string, you can give the standard C escape sequences for
     strings, such as newlines and tab characters.

unknown directory attribute
     If an unknown keyword is found while reading the definition of a
     host's filesystem mount option.

unknown filesystem attribute
     Occurs if an unrecognized keyword is used when defining a host's
     filesystems.

unknown host attribute
     Occurs if an unrecognized keyword is used when defining a host.

unknown mount attribute
     Occurs if an unrecognized keyword is found while parsing the list
     of static mounts.

unknown volname VOLUME automounted [ on <name> ]
     Occurs if VOLUME is used in a definition of an automount map but
     the volume name has not been declared during the host filesystem
     definitions.

volname VOLUME is unknown
     Occurs if an attempt is made to mount or reference a volume name
     which has not been declared during the host filesystem definitions.

volname VOLUME not exported from MACHINE
     Occurs if you attempt to mount the volume VOLUME from a machine
     which has not declared itself to have such a filesystem available.


File: am-utils.info,  Node: Hlfsd,  Next: Assorted Tools,  Prev: FSinfo,  Up: Top

Hlfsd
*****

   Hlfsd is a daemon which implements a filesystem containing a
symbolic link to subdirectory within a user's home directory, depending
on the user which accessed that link.  It was primarily designed to
redirect incoming mail to users' home directories, so that it can read
from anywhere.  It was designed and implemented by Erez Zadok and
Alexander Dupuy, at the Computer Science Department of Columbia
University.

   Hlfsd operates by mounting itself as an NFS server for the directory
containing linkname, which defaults to `/hlfs/home'.  Lookups within
that directory are handled by `hlfsd', which uses the password map to
determine how to resolve the lookup.  The directory will be created if
it doesn't already exist.  The symbolic link will be to the accessing
user's home directory, with subdir appended to it.  If not specified,
subdir defaults to `.hlfsdir'.  This directory will also be created if
it does not already exist.

   A SIGTERM sent to `hlfsd' will cause it to shutdown.  A SIGHUP will
flush the internal caches, and reload the password map.  It will also
close and reopen the log file, to enable the original log file to be
removed or rotated.  A SIGUSR1 will cause it to dump its internal table
of user IDs and home directories to the file `/tmp/hlfsddump'.

* Menu:

* Introduction to Hlfsd::
* Background to Mail Delivery::
* Using Hlfsd::


File: am-utils.info,  Node: Introduction to Hlfsd,  Next: Background to Mail Delivery,  Prev: Hlfsd,  Up: Hlfsd

Introduction to Hlfsd
=====================

   Electronic mail has become one of the major applications for many
computer networks, and use of this service is expected to increase over
time, as networks proliferate and become faster.  Providing a convenient
environment for users to read, compose, and send electronic mail has
become a requirement for systems administrators (SAs).

   Widely used methods for handling mail usually require users to be
logged into a designated "home" machine, where their mailbox files
reside.  Only on that one machine can they read newly arrived mail.
Since users have to be logged into that system to read their mail, they
often find it convenient to run all of their other processes on that
system as well, including memory and CPU-intensive jobs.  For example,
in our department, we have allocated and configured several
multi-processor servers to handle such demanding CPU/memory
applications, but these were underutilized, in large part due to the
inconvenience of not being able to read mail on those machines.  (No
home directories were located on these designated CPU-servers, since we
did not want NFS service for users' home directories to have to compete
with intensive jobs.  At the same time, we discouraged users from
running demanding applications on their home machines.)

   Many different solutions have been proposed to allow users to read
their mail on any host.  However, all of these solutions fail in one or
more of several ways:

   * they introduce new single points of failure

   * they require using different mail transfer agents (MTAs) or user
     agents (UAs)

   * they do not solve the problem for all cases, i.e.  the solution is
     only partially successful for a particular environment.

   We have designed a simple filesystem, called the "Home-Link File
System", to provide the ability to deliver mail to users' home
directories, without modification to mail-related applications. We have
endeavored to make it as stable as possible.  Of great importance to us
was to make sure the HLFS daemon, `hlfsd' , would not hang under any
circumstances, and would take the next-best action when faced with
problems.  Compared to alternative methods, Hlfsd is a stable, more
general solution, and easier to install/use.  In fact, in some ways, we
have even managed to improve the reliability and security of mail
service.

   Our server implements a small filesystem containing a symbolic link
to a subdirectory of the invoking user's home directory, and named
symbolic links to users' mailbox files.

   The Hlfsd server finds out the UID of the process that is accessing
its mount point, and resolves the pathname component home as a symbolic
link to a subdirectory within the home directory given by the UID's
entry in the password file.  If the GID of the process that attempts to
access a mailbox file is a special one (called HLFS_GID), then the
server maps the name of the *next* pathname component directly to the
user's mailbox.  This is necessary so that access to a mailbox file by
users other than the owner can succeed.  The server has safety features
in case of failures such as hung filesystems or home directory
filesystems that are inaccessible or full.

   On most of our machines, mail gets delivered to the directory
`/var/spool/mail'. Many programs, including UAs, depend on that path.
Hlfsd creates a directory `/mail', and mounts itself on top of that
directory.  Hlfsd implements the path name component called home,
pointing to a subdirectory of the user's home directory.  We have made
`/var/spool/mail' a symbolic link to `/mail/home', so that accessing
`/var/spool/mail' actually causes access to a subdirectory within a
user's home directory.

   The following table shows an example of how resolving the pathname
`/var/mail/NAME' to `/users/ezk/.mailspool/NAME'.

Resolving Component  Pathname left to resolve  Value if symbolic link  
/                    var/mail/NAME                                     
var/                 mail/NAME                                         
mail@                /mail/home/NAME           mail@ -> /mail/home     
/                    mail/home/NAME                                    
mail/                home/NAME                                         
home@                NAME                      home@ ->                
                                               /users/ezk/.mailspool   
/                    users/ezk/.mailspool/NAME                         
users/               ezk/.mailspool/NAME                               
ezk/                 .mailspool/NAME                                   
.mailspool/          NAME                                              
NAME                                                                   


File: am-utils.info,  Node: Background to Mail Delivery,  Next: Using Hlfsd,  Prev: Introduction to Hlfsd,  Up: Hlfsd

Background to Mail Delivery
===========================

   This section provides an in-depth discussion of why available methods
for delivering mail to home directories are not as good as the one used
by Hlfsd.

* Menu:

* Single-Host Mail Spool Directory::
* Centralized Mail Spool Directory::
* Distributed Mail Spool Service::
* Why Deliver Into the Home Directory?::


File: am-utils.info,  Node: Single-Host Mail Spool Directory,  Next: Centralized Mail Spool Directory,  Prev: Background to Mail Delivery,  Up: Background to Mail Delivery

Single-Host Mail Spool Directory
--------------------------------

   The most common method for mail delivery is for mail to be appended
to a mailbox file in a standard spool directory on the designated "mail
home" machine of the user. The greatest advantage of this method is
that it is the default method most vendors provide with their systems,
thus very little (if any) configuration is required on the SA's part.
All they need to set up are mail aliases directing mail to the host on
which the user's mailbox file is assigned.  (Otherwise, mail is
delivered locally, and users find mailboxes on many machines.)

   As users become more sophisticated, and aided by windowing systems,
they find themselves logging in on multiple hosts at once, performing
several tasks concurrently.  They ask to be able to read their mail on
any host on the network, not just the one designated as their "mail
home".


File: am-utils.info,  Node: Centralized Mail Spool Directory,  Next: Distributed Mail Spool Service,  Prev: Single-Host Mail Spool Directory,  Up: Background to Mail Delivery

Centralized Mail Spool Directory
--------------------------------

   A popular method for providing mail readability from any host is to
have all mail delivered to a mail spool directory on a designated
"mail-server" which is exported via NFS to all of the hosts on the
network.  Configuring such a system is relatively easy.  On most
systems, the bulk of the work is a one-time addition to one or two
configuration files in `/etc'.  The file-server's spool directory is
then hard-mounted across every machine on the local network.  In small
environments with only a handful of hosts this can be an acceptable
solution.  In our department, with a couple of hundred active hosts and
thousands of mail messages processed daily, this was deemed completely
unacceptable, as it introduced several types of problems:

Scalability and Performance
     As more and more machines get added to the network, more mail
     traffic has to go over NFS to and from the mail-server. Users like
     to run mail-watchers, and read their mail often. The stress on the
     shared infrastructure increases with every user and host added;
     loads on the mail server would most certainly be high since all
     mail delivery goes through that one machine.(1)  This leads to
     lower reliability and performance.  To reduce the number of
     concurrent connections between clients and the server host, some
     SAs have resorted to automounting the mail-spool directory.  But
     this solution only makes things worse: since users often run mail
     watchers, and many popular applications such as `trn', `emacs',
     `csh' or `ksh' check periodically for new mail, the automounted
     directory would be effectively permanently mounted.  If it gets
     unmounted automatically by the automounter program, it is most
     likely to get mounted shortly afterwards, consuming more I/O
     resources by the constant cycle of mount and umount calls.

Reliability
     The mail-server host and its network connectivity must be very
     reliable.  Worse, since the spool directory has to be
     hard-mounted,(2) many processes which access the spool directory
     (various shells, `login', `emacs', etc.)  would be hung as long as
     connectivity to the mail-server is severed. To improve
     reliability, SAs may choose to backup the mail-server's spool
     partition several times a day.  This may make things worse since
     reading or delivering mail while backups are in progress may cause
     backups to be inconsistent; more backups consume more backup-media
     resources, and increase the load on the mail-server host.

   ---------- Footnotes ----------

   (1)  Delivery via NFS-mounted filesystems may require usage of
`rpc.lockd' and `rpc.statd' to provide distributed file-locking, both
of which are widely regarded as unstable and unreliable.  Furthermore,
this will degrade performance, as local 5processes as well as remote
`nfsd' processes are kept busy.

   (2) No SA in their right minds would soft-mount read/write
partitions -- the chances for data loss are too great.


File: am-utils.info,  Node: Distributed Mail Spool Service,  Next: Why Deliver Into the Home Directory?,  Prev: Centralized Mail Spool Directory,  Up: Background to Mail Delivery

Distributed Mail Spool Service
------------------------------

   Despite the existence of a few systems that support delivery to
users' home directories, mail delivery to home directories hasn't
caught on.  We believe the main reason is that there are too many
programs that "know" where mailbox files reside.  Besides the obvious
(the delivery program `/bin/mail' and mail readers like `/usr/ucb/Mail',
`mush', `mm', etc.), other programs that know mailbox location are
login, from, almost every shell, `xbiff', `xmailbox', and even some
programs not directly related to mail, such as `emacs' and `trn'.
Although some of these programs can be configured to look in different
directories with the use of environment variables and other resources,
many of them cannot.  The overall porting work is significant.

   Other methods that have yet to catch on require the use of a special
mail-reading server, such as IMAP or POP.  The main disadvantage of
these systems is that UAs need to be modified to use these services --
a long and involved task.  That is why they are not popular at this
time.

   Several other ideas have been proposed and even used in various
environments.  None of them is robust.  They are mostly very
specialized, inflexible, and do not extend to the general case.  Some of
the ideas are plain bad, potentially leading to lost or corrupt mail:

automounters
     Using an automounter such as Amd to provide a set of symbolic links
     from the normal spool directory to user home directories is not
     sufficient.  UAs rename, unlink, and recreate the mailbox as a
     regular file, therefore it must be a real file, not a symbolic
     link.  Furthermore, it must reside in a real directory which is
     writable by the UAs and MTAs.  This method may also require
     populating `/var/spool/mail' with symbolic links and making sure
     they are updated.  Making Amd manage that directory directly
     fails, since many various lock files need to be managed as well.
     Also, Amd does not provide all of the NFS operations which are
     required to write mail such as write, create, remove, and unlink.

$MAIL
     Setting this variable to an automounted directory pointing to the
     user's mail spool host only solves the problem for those programs
     which know and use $MAIL.  Many programs don't, therefore this
     solution is partial and of limited flexibility.  Also, it requires
     the SAs or the users to set it themselves -- an added level of
     inconvenience and possible failures.

/bin/mail
     Using a different mail delivery agent could be the solution.  One
     such example is `hdmail'.  However, `hdmail' still requires
     modifying all UAs, the MTA's configuration, installing new
     daemons, and changing login scripts.  This makes the system less
     upgradable or compatible with others, and adds one more
     complicated system for SAs to deal with.  It is not a complete
     solution because it still requires each user have their $MAIL
     variable setup correctly, and that every program use this variable.


File: am-utils.info,  Node: Why Deliver Into the Home Directory?,  Prev: Distributed Mail Spool Service,  Up: Background to Mail Delivery

Why Deliver Into the Home Directory?
------------------------------------

   There are several major reasons why SAs might want to deliver mail
directly into the users' home directories:

Location
     Many mail readers need to move mail from the spool directory to the
     user's home directory.  It speeds up this operation if the two are
     on the same filesystem.  If for some reason the user's home
     directory is inaccessible, it isn't that useful to be able to read
     mail, since there is no place to move it to.  In some cases,
     trying to move mail to a non-existent or hung filesystem may
     result in mail loss.

Distribution
     Having all mail spool directories spread among the many more
     filesystems minimizes the chances that complete environments will
     grind to a halt when a single server is down.  It does increase
     the chance that there will be someone who is not able to read
     their mail when a machine is down, but that is usually preferred
     to having no one be able to read their mail because a centralized
     mail server is down.  The problem of losing some mail due to the
     (presumably) higher chances that a user's machine is down is
     minimized in HLFS.

Security
     Delivering mail to users' home directories has another advantage --
     enhanced security and privacy.  Since a shared system mail spool
     directory has to be world-readable and searchable, any user can see
     whether other users have mail, when they last received new mail,
     or when they last read their mail.  Programs such as `finger'
     display this information, which some consider an infringement of
     privacy.  While it is possible to disable this feature of `finger'
     so that remote users cannot see a mailbox file's status, this
     doesn't prevent local users from getting the information.
     Furthermore, there are more programs which make use of this
     information.  In shared environments, disabling such programs has
     to be done on a system-wide basis, but with mail delivered to
     users' home directories, users less concerned with privacy who do
     want to let others know when they last received or read mail can
     easily do so using file protection bits.  Lastly, on systems that
     do not export their NFS filesystem with anon=0, superusers are
     less likely to snoop around others' mail, as they become "nobodies"
     across NFS .

   In summary, delivering mail to home directories provides users the
functionality sought, and also avoids most of the problems just
discussed.


File: am-utils.info,  Node: Using Hlfsd,  Prev: Background to Mail Delivery,  Up: Hlfsd

Using Hlfsd
===========

* Menu:

* Controlling Hlfsd::
* Hlfsd Options::
* Hlfsd Files::


File: am-utils.info,  Node: Controlling Hlfsd,  Next: Hlfsd Options,  Prev: Using Hlfsd,  Up: Using Hlfsd

Controlling Hlfsd
-----------------

   Much the same way Amd is controlled by `ctl-amd', so does Hlfsd get
controlled by the `ctl-hlfsd' script:

ctl-hlfsd start
     Start a new Hlfsd.

ctl-hlfsd stop
     Stop a running Hlfsd.

ctl-hlfsd restart
     Stop a running Hlfsd, wait for 10 seconds, and then start a new
     one.  It is hoped that within 10 seconds, the previously running
     Hlfsd terminate properly; otherwise, starting a second one could
     cause system lockup.

   For example, on our systems, we start Hlfsd within `ctl-hlfsd' as
follows on Solaris 2 systems:

     hlfsd -a /var/alt_mail -x all -l /var/log/hlfsd /mail/home .mailspool

   The directory `/var/alt_mail' is a directory in the root partition
where alternate mail will be delivered into, when it cannot be delivered
into the user's home directory.

   Normal mail gets delivered into `/var/mail', but on our systems,
that is a symbolic link to `/mail/home'.  `/mail' is managed by Hlfsd,
which creates a dynamic symlink named `home', pointing to the
subdirectory `.mailspool' *within* the accessing user's home directory.
This results in mail which normally should go to `/var/mail/$USER', to
go to `$HOME/.mailspool/$USER'.

   Hlfsd does not create the `/var/mail' symlink.  This needs to be
created (manually) once on each host, by the system administrators, as
follows:

     mv /var/mail /var/alt_mail
     ln -s /mail/home /var/mail


File: am-utils.info,  Node: Hlfsd Options,  Next: Hlfsd Files,  Prev: Controlling Hlfsd,  Up: Using Hlfsd

Hlfsd Options
-------------

-a ALT_DIR
     Alternate directory.  The name of the directory to which the
     symbolic link returned by Hlfsd will point, if it cannot access
     the home directory of the user.  This defaults to `/var/hlfs'.
     This directory will be created if it doesn't exist.  It is
     expected that either users will read these files, or the system
     administrators will run a script to resend this "lost mail" to its
     owner.

-c CACHE-INTERVAL
     Caching interval.  Hlfsd will cache the validity of home
     directories for this interval, in seconds.  Entries which have
     been verified within the last CACHE-INTERVAL seconds will not be
     verified again, since the operation could be expensive, and the
     entries are most likely still valid.  After the interval has
     expired, Hlfsd will re-verify the validity of the user's home
     directory, and reset the cache time-counter.  The default value
     for CACHE-INTERVAL is 300 seconds (5 minutes).

-f
     Force fast startup.  This option tells Hlfsd to skip startup-time
     consistency checks such as existence of mount directory, alternate
     spool directory, symlink to be hidden under the mount directory,
     their permissions and validity.

-g GROUP
     Set the special group HLFS_GID to GROUP.  Programs such as
     `/usr/ucb/from' or `/usr/sbin/in.comsat', which access the
     mailboxes of other users) must be setgid HLFS_GID to work
     properly.  The default group is `hlfs'.  If no group is provided,
     and there is no group `hlfs', this feature is disabled.

-h
     Help.  Print a brief help message, and exit.

-i RELOAD-INTERVAL
     Map-reloading interval.  Each RELOAD-INTERVAL seconds, Hlfsd will
     reload the password map.  Hlfsd needs the password map for the
     UIDs and home directory pathnames.  Hlfsd schedules a SIGALRM to
     reload the password maps.  A SIGHUP sent to Hlfsd will force it to
     reload the maps immediately.  The default value for
     RELOAD-INTERVAL is 900 seconds (15 minutes.)

-l LOGFILE
     Specify a log file to which Hlfsd will record events.  If LOGFILE
     is the string `syslog' then the log messages will be sent to the
     system log daemon by syslog(3), using the LOG_DAEMON facility.
     This is also the default.

-n
     No verify.  Hlfsd will not verify the validity of the symbolic link
     it will be returning, or that the user's home directory contains
     sufficient disk-space for spooling.  This can speed up Hlfsd at the
     cost of possibly returning symbolic links to home directories
     which are not currently accessible or are full.  By default, Hlfsd
     validates the symbolic-link in the background.  The "-n" option
     overrides the meaning of the "-c" option, since no caching is
     necessary.

-o MOUNT-OPTIONS
     Mount options.  Mount options which Hlfsd will use to mount itself
     on top of DIRNAME.  By default, MOUNT-OPTIONS is set to `ro',
     unless M_CACHE is defined, in which case it is set to `ro,nocache'.

-p
     Print PID.  Outputs the process-id of Hlfsd to standard output
     where it can be saved into a file.

-v
     Version.  Displays version information to standard error.

-x LOG-OPTIONS
     Specify run-time logging options.  The options are a comma
     separated list chosen from: fatal, error, user, warn, info, map,
     stats, all.

-C
     Force Hlfsd to run on systems that cannot turn off the NFS
     attribute-cache.  Use of this option on those systems is
     discouraged, as it may result in loss or misdelivery of mail.  The
     option is ignored on systems that can turn off the attribute-cache.

-D LOG-OPTIONS
     Select from a variety of debugging options.  Prefixing an option
     with the string `no' reverses the effect of that option.  Options
     are cumulative.  The most useful option is `all'.  Since this
     option is only used for debugging other options are not documented
     here.  A fuller description is available in the program source.  A
     SIGUSR1 sent to Hlfsd will cause it to dump its internal password
     map to the file `/tmp/hlfsdump'.


File: am-utils.info,  Node: Hlfsd Files,  Prev: Hlfsd Options,  Up: Using Hlfsd

Hlfsd Files
-----------

   The following files are used by Hlfsd:

`/hlfs'
     directory under which Hlfsd mounts itself and manages the symbolic
     link `home'.

`.hlfsdir'
     default sub-directory in the user's home directory, to which the
     `home' symbolic link returned by Hlfsd points.

`/var/hlfs'
     directory to which `home' symbolic link returned by Hlfsd points
     if it is unable to verify the that user's home directory is
     accessible.

   For discussion on other files used by Hlfsd, *note lostaltmail::. and
*note lostaltmail.conf-sample::..


File: am-utils.info,  Node: Assorted Tools,  Next: Examples,  Prev: Hlfsd,  Up: Top

Assorted Tools
**************

   The following are additional utilities and scripts included with
am-utils, and get installed.

* Menu:

* am-eject::
* amd.conf-sample::
* amd2ldif::
* amd2sun::
* ctl-amd::
* ctl-hlfsd::
* expn::
* fix-amd-map::
* fixmount::
* fixrmtab::
* lostaltmail::
* lostaltmail.conf-sample::
* mk-amd-map::
* wait4amd::
* wait4amd2die::
* wire-test::


File: am-utils.info,  Node: am-eject,  Next: amd.conf-sample,  Prev: Assorted Tools,  Up: Assorted Tools

am-eject
========

   A shell script unmounts a floppy or CD-ROM that is automounted, and
then attempts to eject the removable device.


File: am-utils.info,  Node: amd.conf-sample,  Next: amd2ldif,  Prev: am-eject,  Up: Assorted Tools

amd.conf-sample
===============

   A sample Amd configuration file. *note Amd Configuration File::..


File: am-utils.info,  Node: amd2ldif,  Next: amd2sun,  Prev: amd.conf-sample,  Up: Assorted Tools

amd2ldif
========

   A script to convert Amd maps to LDAP input files.  Use it as follows

     amd2ldif mapname base < amd.mapfile > mapfile.ldif


File: am-utils.info,  Node: amd2sun,  Next: ctl-amd,  Prev: amd2ldif,  Up: Assorted Tools

amd2sun
=======

   A script to convert Amd maps to Sun Automounter maps.  Use it as
follows

     amd2sun < amd.mapfile > auto_mapfile


File: am-utils.info,  Node: ctl-amd,  Next: ctl-hlfsd,  Prev: amd2sun,  Up: Assorted Tools

ctl-amd
=======

   A script to start, stop, or restart Amd.  Use it as follows:

ctl-amd start
     Start a new Amd process.

ctl-amd stop
     Stop the running Amd.

ctl-amd restart
     Stop the running Amd (if any), safely wait for it to terminate, and
     then start a new process -- only if the previous one died cleanly.

   *Note Run-time Administration:: for more details.


File: am-utils.info,  Node: ctl-hlfsd,  Next: expn,  Prev: ctl-amd,  Up: Assorted Tools

ctl-hlfsd
=========

   A script for controlling Hlfsd, much the same way `ctl-amd' controls
Amd.  Use it as follows:

ctl-hlfsd start
     Start a new Hlfsd process.

ctl-hlfsd stop
     Stop the running Hlfsd.

ctl-hlfsd restart
     Stop the running Hlfsd (if any), wait for 10 seconds for it to
     terminate, and then start a new process -- only if the previous one
     died cleanly.

   *Note Hlfsd:: for more details.


File: am-utils.info,  Node: expn,  Next: fix-amd-map,  Prev: ctl-hlfsd,  Up: Assorted Tools

expn
====

   A script to expand email addresses into their full name.  It is
generally useful when using with the `lostaltmail' script, but is a
useful tools otherwise.

     $ expn -v ezk@cs.columbia.edu
     ezk@cs.columbia.edu ->
             ezk@shekel.mcl.cs.columbia.edu
     ezk@shekel.mcl.cs.columbia.edu ->
             Erez Zadok <"| /usr/local/mh/lib/slocal -user ezk || exit 75>
             Erez Zadok <\ezk>
             Erez Zadok </u/zing/ezk/.mailspool/backup>

