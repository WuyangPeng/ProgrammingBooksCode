This is Info file am-utils.info, produced by Makeinfo version 1.68 from
the input file am-utils.texi.

START-INFO-DIR-ENTRY
* Am-utils: (am-utils).          The Amd automounter suite of utilities
END-INFO-DIR-ENTRY


File: am-utils.info,  Node: Inheritance Filesystem,  Prev: Root Filesystem,  Up: Filesystem Types

Inheritance Filesystem
======================

   The "inheritance" (`type:=inherit') filesystem is not directly
accessible.  Instead, internal mount nodes of this type are
automatically generated when Amd is started with the "-r" option.  At
this time the system mount table is scanned to locate any filesystems
which are already mounted.  If any reference to these filesystems is
made through Amd then instead of attempting to mount it, Amd simulates
the mount and "inherits" the filesystem.  This allows a new version of
Amd to be installed on a live system simply by killing the old daemon
with `SIGTERM' and starting the new one.

   This filesystem type is not generally visible externally, but it is
possible that the output from `amq -m' may list `inherit' as the
filesystem type.  This happens when an inherit operation cannot be
completed for some reason, usually because a fileserver is down.


File: am-utils.info,  Node: Amd Configuration File,  Next: Run-time Administration,  Prev: Filesystem Types,  Up: Top

Amd Configuration File
**********************

   The `amd.conf' file is the configuration file for Amd, as part of
the am-utils suite.  This file contains runtime configuration
information for the Amd automounter program.

* Menu:

* File Format::
* The Global Section::
* Regular Map Sections::
* Common Parameters::
* Global Parameters::
* Regular Map Parameters::
* amd.conf Examples::


File: am-utils.info,  Node: File Format,  Next: The Global Section,  Prev: Amd Configuration File,  Up: Amd Configuration File

File Format
===========

   The `amd.conf' file consists of sections and parameters.  A section
begins with the name of the section in square brackets `[]' and
continues until the next section begins or the end the file is reached.
Sections contain parameters of the form `name = value'.

   The file is line-based -- that is, each newline-terminated line
represents either a comment, a section name or a parameter.  No
line-continuation syntax is available.

   Section, parameter names and their values are case sensitive.

   Only the first equals sign in a parameter is significant.  Whitespace
before or after the first equals sign is discarded.  Leading, trailing
and internal whitespace in section and parameter names is irrelevant.
Leading and trailing whitespace in a parameter value is discarded.
Internal whitespace within a parameter value is not allowed, unless the
whole parameter value is quoted with double quotes as in `name = "some
value"'.

   Any line beginning with a pound sign `#' is ignored, as are lines
containing only whitespace.

   The values following the equals sign in parameters are all either a
string (no quotes needed if string does not include spaces) or a
boolean, which may be given as yes/no.  Case is significant in all
values.  Some items such as cache timeouts are numeric.


File: am-utils.info,  Node: The Global Section,  Next: Regular Map Sections,  Prev: File Format,  Up: Amd Configuration File

The Global Section
==================

   The global section must be specified as `[global]'.  Parameters in
this section either apply to Amd as a whole, or to all other regular map
sections which follow.  There should be only one global section defined
in one configuration file.

   It is highly recommended that this section be specified first in the
configuration file.  If it is not, then regular map sections which
precede it will not use global values defined later.


File: am-utils.info,  Node: Regular Map Sections,  Next: Common Parameters,  Prev: The Global Section,  Up: Amd Configuration File

Regular Map Sections
====================

   Parameters in regular (non-global) sections apply to a single map
entry.  For example, if the map section `[/homes]' is defined, then all
parameters following it will be applied to the `/homes' Amd-managed
mount point.


File: am-utils.info,  Node: Common Parameters,  Next: Global Parameters,  Prev: Regular Map Sections,  Up: Amd Configuration File

Common Parameters
=================

   These parameters can be specified either in the global or a map
specific section.  Entries specified in a map-specific section override
the default value or one defined in the global section.   If such a
common parameter is specified only in the global section, it is
applicable to all regular map sections that follow.

* Menu:

* browsable_dirs Parameter::
* map_options Parameter::
* map_type Parameter::
* mount_type Parameter::
* search_path Parameter::


File: am-utils.info,  Node: browsable_dirs Parameter,  Next: map_options Parameter,  Prev: Common Parameters,  Up: Common Parameters

browsable_dirs Parameter
------------------------

   (type=boolean, default=no).  If `yes', then Amd's top-level mount
points will be browsable to readdir(3) calls.  This means you could run
for example ls(3) and see what keys are available to mount in that
directory.  Not all entries are made visible to readdir(3): the
`/default' entry and all other wildcard entries are not included.  Note
that if you run a command which will attempt to stat(2) the entries,
such as often done by `ls -l' or `ls -F', Amd will attempt to mount
every entry in that map.  This is often called a "mount storm".


File: am-utils.info,  Node: map_options Parameter,  Next: map_type Parameter,  Prev: browsable_dirs Parameter,  Up: Common Parameters

map_options Parameter
---------------------

   (type=string, default no options).  This option is the same as
specifying map options on the command line to Amd, such as `cache:=all'.


File: am-utils.info,  Node: map_type Parameter,  Next: mount_type Parameter,  Prev: map_options Parameter,  Up: Common Parameters

map_type Parameter
------------------

   (type=string, default search all map types).  If specified, Amd will
initialize the map only for the type given.  This is useful to avoid the
default map search type used by Amd which takes longer and can have
undesired side-effects such as initializing NIS even if not used.
Possible values are

`file'
     plain files

`hesiod'
     Hesiod name service from MIT

`ldap'
     Lightweight Directory Access Protocol

`ndbm'
     (New) dbm style hash files

`nis'
     Network Information Services (version 2)

`nisplus'
     Network Information Services Plus (version 3)

`passwd'
     local password files

`union'
     union maps


File: am-utils.info,  Node: mount_type Parameter,  Next: search_path Parameter,  Prev: map_type Parameter,  Up: Common Parameters

mount_type Parameter
--------------------

   (type=string, default=nfs).  All Amd mount types default to NFS.
That is, Amd is an NFS server on the map mount points, for the local
host it is running on.  If `autofs' is specified, Amd will be an autofs
server for those mount points.


File: am-utils.info,  Node: search_path Parameter,  Prev: mount_type Parameter,  Up: Common Parameters

search_path Parameter
---------------------

   (type=string, default no search path).  This provides a
(colon-delimited) search path for file maps.  Using a search path,
sites can allow for local map customizations and overrides, and can
distributed maps in several locations as needed.


File: am-utils.info,  Node: Global Parameters,  Next: Regular Map Parameters,  Prev: Common Parameters,  Up: Amd Configuration File

Global Parameters
=================

   The following parameters are applicable to the `[global]' section
only.

* Menu:

* arch Parameter::
* auto_dir Parameter::
* cache_duration Parameter::
* cluster Parameter::
* debug_options Parameter::
* dismount_interval Parameter::
* fully_qualified_hosts Parameter::
* karch Parameter::
* ldap_base Parameter::
* ldap_cache_maxmem Parameter::
* ldap_cache_seconds Parameter::
* ldap_hostports Parameter::
* local_domain Parameter::
* log_file Parameter::
* log_options Parameter::
* nfs_retransmit_counter Parameter::
* nfs_retry_interval Parameter::
* nis_domain Parameter::
* normalize_hostnames Parameter::
* os Parameter::
* osver Parameter::
* plock Parameter::
* portmap_program Parameter::
* print_pid Parameter::
* print_version Parameter::
* restart_mounts Parameter::
* selectors_on_default Parameter::
* show_statfs_entries Parameter::


File: am-utils.info,  Node: arch Parameter,  Next: auto_dir Parameter,  Prev: Global Parameters,  Up: Global Parameters

arch Parameter
--------------

   (type=string, default to compiled in value).  Allows you to override
the value of the arch Amd variable.


File: am-utils.info,  Node: auto_dir Parameter,  Next: cache_duration Parameter,  Prev: arch Parameter,  Up: Global Parameters

auto_dir Parameter
------------------

   (type=string, default=/a).  Same as the `-a' option to Amd.  This
sets the private directory where Amd will create sub-directories for
its real mount points.


File: am-utils.info,  Node: cache_duration Parameter,  Next: cluster Parameter,  Prev: auto_dir Parameter,  Up: Global Parameters

cache_duration Parameter
------------------------

   (type=numeric, default=300).  Same as the `-c' option to Amd.  Sets
the duration in seconds that looked up map entries remain in the cache.


File: am-utils.info,  Node: cluster Parameter,  Next: debug_options Parameter,  Prev: cache_duration Parameter,  Up: Global Parameters

cluster Parameter
-----------------

   (type=string, default no cluster).  Same as the `-C' option to Amd.
Specifies the alternate HP-UX cluster to use.


File: am-utils.info,  Node: debug_options Parameter,  Next: dismount_interval Parameter,  Prev: cluster Parameter,  Up: Global Parameters

debug_options Parameter
-----------------------

   (type=string, default no debug options).  Same as the `-D' option to
Amd.  Specify any debugging options for Amd.  Works only if am-utils
was configured for debugging using the `--enable-debug option'.  The
`mem' option alone can be turned on via `--enable-debug=mem'.
Otherwise debugging options are ignored.  Options are comma delimited,
and can be preceded by the string `no' to negate their meaning.  You
can get the list of supported debugging options by running `amd -v'.
Possible values are:

`all'
     all options

`amq'
     register for amq

`daemon'
     enter daemon mode

`fork'
     fork server

`full'
     program trace

`mem'
     trace memory allocations

`mtab'
     use local `./mtab' file

`str'
     debug string munging

`test'
     full debug but no daemon

`trace'
     protocol trace


File: am-utils.info,  Node: dismount_interval Parameter,  Next: fully_qualified_hosts Parameter,  Prev: debug_options Parameter,  Up: Global Parameters

dismount_interval Parameter
---------------------------

   (type=numeric, default=120).  Same as the `-w' option to Amd.
Specify in seconds, the time between attempts to dismount file systems
that have exceeded their cached times.


File: am-utils.info,  Node: fully_qualified_hosts Parameter,  Next: karch Parameter,  Prev: dismount_interval Parameter,  Up: Global Parameters

fully_qualified_hosts Parameter
-------------------------------

   (type=string, default=no).  If `yes', Amd will perform RPC
authentication using fully-qualified host names.  This is necessary for
some systems, and especially when performing cross-domain mounting.  For
this function to work, the Amd variable `${hostd}' is used, requiring
that `${domain}' not be null.


File: am-utils.info,  Node: karch Parameter,  Next: ldap_base Parameter,  Prev: fully_qualified_hosts Parameter,  Up: Global Parameters

karch Parameter
---------------

   (type=string, default to karch of the system).  Same as the `-k'
option to Amd.  Allows you to override the kernel-architecture of your
system.  Useful for example on Sun (Sparc) machines, where you can
build one Amd binary, and run it on multiple machines, yet you want
each one to get the correct karch variable set (for example, sun4c,
sun4m, sun4u, etc.)  Note that if not specified, Amd will use uname(2)
to figure out the kernel architecture of the machine.


File: am-utils.info,  Node: ldap_base Parameter,  Next: ldap_cache_maxmem Parameter,  Prev: karch Parameter,  Up: Global Parameters

ldap_base Parameter
-------------------

   (type=string, default=ldap.your.domain:389).  Specify the base name
for LDAP.


File: am-utils.info,  Node: ldap_cache_maxmem Parameter,  Next: ldap_cache_seconds Parameter,  Prev: ldap_base Parameter,  Up: Global Parameters

ldap_cache_maxmem Parameter
---------------------------

   (type=numeric, default=131072).  Specify the maximum memory Amd
should use to cache LDAP entries.


File: am-utils.info,  Node: ldap_cache_seconds Parameter,  Next: ldap_hostports Parameter,  Prev: ldap_cache_maxmem Parameter,  Up: Global Parameters

ldap_cache_seconds Parameter
----------------------------

   (type=numeric, default=0).  Specify the number of seconds to keep
entries in the cache.


File: am-utils.info,  Node: ldap_hostports Parameter,  Next: local_domain Parameter,  Prev: ldap_cache_seconds Parameter,  Up: Global Parameters

ldap_hostports Parameter
------------------------

   (type=string, default="ou=Marketing, o=AMD Ltd, c=US").  Specify
LDAP-specific values such as country and organization.


File: am-utils.info,  Node: local_domain Parameter,  Next: log_file Parameter,  Prev: ldap_hostports Parameter,  Up: Global Parameters

local_domain Parameter
----------------------

   (type=string, default no sub-domain).  Same as the `-d' option to
Amd.  Specify the local domain name.  If this option is not given the
domain name is determined from the hostname, by removing the first
component of the fully-qualified host name.


File: am-utils.info,  Node: log_file Parameter,  Next: log_options Parameter,  Prev: local_domain Parameter,  Up: Global Parameters

log_file Parameter
------------------

   (type=string, default=stderr).  Same as the `-l' option to Amd.
Specify a file name to log Amd events to.  If the string `syslog' is
given, Amd will record its events with the system logger syslogd(8).
If the string `/dev/stderr' is specified, Amd will send its events to
the standard error file descriptor.


File: am-utils.info,  Node: log_options Parameter,  Next: nfs_retransmit_counter Parameter,  Prev: log_file Parameter,  Up: Global Parameters

log_options Parameter
---------------------

   (type=string, default no logging options).  Same as the `-x' option
to Amd.  Specify any logging options for Amd.  Options are comma
delimited, and can be preceded by the string `no' to negate their
meaning.  The `debug' logging option is only available if am-utils was
configured with `--enable-debug'.  You can get the list of supported
debugging options by running `amd -v'.  Possible values are:

`all'
     all messages

`debug'
     debug messages

`error'
     non-fatal system errors

`fatal'
     fatal errors

`info'
     information

`map'
     map errors

`stats'
     additional statistical information

`user'
     non-fatal user errors

`warn'
     warnings

`warning'
     warnings


File: am-utils.info,  Node: nfs_retransmit_counter Parameter,  Next: nfs_retry_interval Parameter,  Prev: log_options Parameter,  Up: Global Parameters

nfs_retransmit_counter Parameter
--------------------------------

   (type=numeric, default=110).  Same as the counter part of the `-t'
interval.counter option to Amd.  Specifies the retransmit counter's
value in *tenths* of seconds.


File: am-utils.info,  Node: nfs_retry_interval Parameter,  Next: nis_domain Parameter,  Prev: nfs_retransmit_counter Parameter,  Up: Global Parameters

nfs_retry_interval Parameter
----------------------------

   (type=numeric, default=8).  Same as the interval part of the `-t'
interval.counter option to Amd.  Specifies the interval in *tenths* of
seconds, between NFS/RPC/UDP retries.


File: am-utils.info,  Node: nis_domain Parameter,  Next: normalize_hostnames Parameter,  Prev: nfs_retry_interval Parameter,  Up: Global Parameters

nis_domain Parameter
--------------------

   (type=string, default to local NIS domain name).  Same as the `-y'
option to Amd.  Specify an alternative NIS domain from which to fetch
the NIS maps.  The default is the system domain name.  This option is
ignored if NIS support is not available.


File: am-utils.info,  Node: normalize_hostnames Parameter,  Next: os Parameter,  Prev: nis_domain Parameter,  Up: Global Parameters

normalize_hostnames Parameter
-----------------------------

   (type=boolean, default=no).  Same as the `-n' option to Amd.  If
`yes', then the name refereed to by `${rhost}' is normalized relative
to the host database before being used.  The effect is to translate
aliases into "official" names.


File: am-utils.info,  Node: os Parameter,  Next: osver Parameter,  Prev: normalize_hostnames Parameter,  Up: Global Parameters

os Parameter
------------

   (type=string, default to compiled in value).  Same as the `-o'
option to Amd.  Allows you to override the compiled-in name of the
operating system.  Useful when the built-in name is not desired for
backward compatibility reasons.  For example, if the build in name is
`sunos5', you can override it to `sos5', and use older maps which were
written with the latter in mind.


File: am-utils.info,  Node: osver Parameter,  Next: plock Parameter,  Prev: os Parameter,  Up: Global Parameters

osver Parameter
---------------

   (type=string, default to compiled in value).  Allows you to override
the compiled-in operating-system version number.


File: am-utils.info,  Node: plock Parameter,  Next: portmap_program Parameter,  Prev: osver Parameter,  Up: Global Parameters

plock Parameter
---------------

   (type=boolean, default=yes).  Same as the `-S' option to Amd.  If
`yes', lock the running executable pages of Amd into memory.  To
improve Amd's performance, systems that support the plock(3) call can
lock the Amd process into memory.  This way there is less chance it the
operating system will schedule, page out, and swap the Amd process as
needed.  This improves Amd's performance, at the cost of reserving the
memory used by the Amd process (making it unavailable for other
processes).


File: am-utils.info,  Node: portmap_program Parameter,  Next: print_pid Parameter,  Prev: plock Parameter,  Up: Global Parameters

portmap_program Parameter
-------------------------

   (type=numeric, default=300019).  Specify an alternate Port-mapper RPC
program number, other than the official number.  This is useful when
running multiple Amd processes.  For example, you can run another Amd
in "test" mode, without affecting the primary Amd process in any way.
For safety reasons, the alternate program numbers that can be specified
must be in the range 300019-300029, inclusive.  Amq has an option `-P'
which can be used to specify an alternate program number of an Amd to
contact.  In this way, amq can fully control any number of Amd
processes running on the same host.


File: am-utils.info,  Node: print_pid Parameter,  Next: print_version Parameter,  Prev: portmap_program Parameter,  Up: Global Parameters

print_pid Parameter
-------------------

   (type=boolean, default=no).  Same as the `-p' option to Amd.  If
`yes', Amd will print its process ID upon starting.


File: am-utils.info,  Node: print_version Parameter,  Next: restart_mounts Parameter,  Prev: print_pid Parameter,  Up: Global Parameters

print_version Parameter
-----------------------

   (type=boolean, default=no).  Same as the `-v' option to Amd, but the
version prints and Amd continues to run.  If `yes', Amd will print its
version information string, which includes some configuration and
compilation values.


File: am-utils.info,  Node: restart_mounts Parameter,  Next: selectors_on_default Parameter,  Prev: print_version Parameter,  Up: Global Parameters

restart_mounts Parameter
------------------------

   (type=boolean, default=no).  Same as the `-r' option to Amd.  If
`yes' Amd will scan the mount table to determine which file systems are
currently mounted.  Whenever one of these would have been auto-mounted,
Amd inherits it.


File: am-utils.info,  Node: selectors_on_default Parameter,  Next: show_statfs_entries Parameter,  Prev: restart_mounts Parameter,  Up: Global Parameters

selectors_on_default Parameter
------------------------------

   (type=boolean, default=no).  If `yes', then the /default entry of
maps will be look for and process any selectors before setting defaults
for all other keys in that map.  Useful when you want to set different
options for a complete map based on some parameters.  For example, you
may want to better the NFS performance over slow slip-based networks as
follows:

     /defaults \
         wire==slip-net;opts:=intr,rsize=1024,wsize=1024 \
         wire!=slip-net;opts:=intr,rsize=8192,wsize=8192


File: am-utils.info,  Node: show_statfs_entries Parameter,  Prev: selectors_on_default Parameter,  Up: Global Parameters

show_statfs_entries Parameter
-----------------------------

   (type=boolean), default=no).  If `yes', then all maps which are
browsable will also show the number of entries (keys) they have when
`df' runs. (This is accomplished by returning non-zero values to the
statfs(2) system call).


File: am-utils.info,  Node: Regular Map Parameters,  Next: amd.conf Examples,  Prev: Global Parameters,  Up: Amd Configuration File

Regular Map Parameters
======================

   The following parameters are applicable only to regular map sections.

* Menu:

* map_name Parameter::
* tag Parameter::


File: am-utils.info,  Node: map_name Parameter,  Next: tag Parameter,  Prev: Regular Map Parameters,  Up: Regular Map Parameters

map_name Parameter
------------------

   (type=string, must be specified).  Name of the map where the keys are
located.


File: am-utils.info,  Node: tag Parameter,  Prev: map_name Parameter,  Up: Regular Map Parameters

tag Parameter
-------------

   (type=string, default no tag).  Each map entry in the configuration
file can be tagged.  If no tag is specified, that map section will
always be processed by Amd.  If it is specified, then amd will process
the map if the `-T' option was given to amd, and the value given to that
command-line option matches that in the map section.


File: am-utils.info,  Node: amd.conf Examples,  Prev: Regular Map Parameters,  Up: Amd Configuration File

amd.conf Examples
=================

   The following is the actual `amd.conf' file I use at the Computer
Science Department of Columbia University.

     # GLOBAL OPTIONS SECTION
     [ global ]
     normalize_hostnames =    no
     print_pid =              no
     restart_mounts =         yes
     auto_dir =               /n
     log_file =               /var/log/amd
     log_options =            all
     #debug_options =         all
     plock =                  no
     selectors_on_default =   yes
     # config.guess picks up "sunos5" and I don't want to edit my maps yet
     os =                     sos5
     # if you print_version after setting up "os", it will show it.
     print_version =          no
     map_type =               file
     search_path =            /etc/amdmaps:/usr/lib/amd:/usr/local/AMD/lib
     browsable_dirs =         yes
     fully_qualified_hosts =  no
     
     # DEFINE AN AMD MOUNT POINT
     [ /u ]
     map_name =               amd.u
     
     [ /proj ]
     map_name =               amd.proj
     
     [ /src ]
     map_name =               amd.src
     
     [ /misc ]
     map_name =               amd.misc
     
     [ /import ]
     map_name =               amd.import
     
     [ /tftpboot/.amd ]
     tag =                    tftpboot
     map_name =               amd.tftpboot


File: am-utils.info,  Node: Run-time Administration,  Next: FSinfo,  Prev: Amd Configuration File,  Up: Top

Run-time Administration
***********************

* Menu:

* Starting Amd::
* Stopping Amd::
* Restarting Amd::
* Controlling Amd::


File: am-utils.info,  Node: Starting Amd,  Next: Stopping Amd,  Prev: Run-time Administration,  Up: Run-time Administration

Starting Amd
============

   Amd is best started from `/etc/rc.local' on BSD systems, or from the
appropriate start-level script in `/etc/init.d' on SVR systems.

     if [ -f /usr/local/sbin/ctl-amd ]; then
         /usr/local/sbin/ctl-amd start; (echo -n ' amd') > /dev/console
     fi

The shell script, `ctl-amd' is used to start, stop, or restart Amd.  It
is a relatively generic script.  All options you want to set should not
be made in this script, but rather updated in the `amd.conf' file.
*note Amd Configuration File::..

   If you do not wish to use an Amd configuration file, you may start
Amd manually.  For example, getting the map entries via NIS:

     amd -r -l /var/log/amd `ypcat -k auto.master`


File: am-utils.info,  Node: Stopping Amd,  Next: Restarting Amd,  Prev: Starting Amd,  Up: Run-time Administration

Stopping Amd
============

   Amd stops in response to two signals.

`SIGTERM'
     causes the top-level automount points to be unmounted and then Amd
     to exit.  Any automounted filesystems are left mounted.  They can
     be recovered by restarting Amd with the "-r" command line option.

`SIGINT'
     causes Amd to attempt to unmount any filesystems which it has
     automounted, in addition to the actions of `SIGTERM'.  This signal
     is primarily used for debugging.

   Actions taken for other signals are undefined.

   The easiest and safest way to stop Amd, without having to find its
process ID by hand, is to use the `ctl-amd' script, as with:

     ctl-amd stop


File: am-utils.info,  Node: Restarting Amd,  Next: Controlling Amd,  Prev: Stopping Amd,  Up: Run-time Administration

Restarting Amd
==============

   Before Amd can be started, it is vital to ensure that no other Amd
processes are managing any of the mount points, and that the previous
process(es) have terminated cleanly.  When a terminating signal is set
to Amd, the automounter does *not* terminate right then.  Rather, it
starts by unmounting all of its managed mount mounts in the background,
and then terminates.  It usually takes a few seconds for this process
to happen, but it can take an arbitrarily longer time.  If two or more
Amd processes attempt to manage the same mount point, it usually will
result in a system lockup.

   The easiest and safest way to restart Amd, without having to find
its process ID by hand, sending it the TERM process, waiting for Amd to
die cleanly, and verifying so, is to use the `ctl-amd' script, as with:

     ctl-amd restart

   The script will locate the process ID of Amd, kill it, and wait for
it to die cleanly before starting a new instance of the automounter.
`ctl-amd' will wait for a total of 30 seconds for Amd to die, and will
check once every 5 seconds if it had.


File: am-utils.info,  Node: Controlling Amd,  Prev: Restarting Amd,  Up: Run-time Administration

Controlling Amd
===============

   It is sometimes desirable or necessary to exercise external control
over some of Amd's internal state.  To support this requirement, Amd
implements an RPC interface which is used by the "Amq" program.  A
variety of information is available.

   Amq generally applies an operation, specified by a single letter
option, to a list of mount points.  The default operation is to obtain
statistics about each mount point.  This is similar to the output shown
above but includes information about the number and type of accesses to
each mount point.

* Menu:

* Amq default::       Default command behavior.
* Amq -f option::     Flushing the map cache.
* Amq -h option::     Controlling a non-local host.
* Amq -l option::     Controlling the log file.
* Amq -m option::     Obtaining mount statistics.
* Amq -M-option::     Mounting a volume.
* Amq -p option::     Getting Amd's process ID.
* Amq -P-option::     Contacting alternate Amd processes.
* Amq -s option::     Obtaining global statistics.
* Amq -u option::     Forcing volumes to time out.
* Amq -v option::     Version information.
* Other Amq options:: Three other special options.


File: am-utils.info,  Node: Amq default,  Next: Amq -f option,  Prev: Controlling Amd,  Up: Controlling Amd

Amq default information
-----------------------

   With no arguments, "Amq" obtains a brief list of all existing mounts
created by Amd.  This is different from the list displayed by df(1)
since the latter only includes system mount points.

The output from this option includes the following information:

   * the automount point,

   * the filesystem type,

   * the mount map or mount information,

   * the internal, or system mount point.

For example:

     /            root   "root"                    sky:(pid75)
     /homes       toplvl /usr/local/etc/amd.homes  /homes
     /home        toplvl /usr/local/etc/amd.home   /home
     /homes/jsp   nfs    charm:/home/charm         /a/charm/home/charm/jsp
     /homes/phjk  nfs    toytown:/home/toytown     /a/toytown/home/toytown/ai/phjk

If an argument is given then statistics for that volume name will be
output.  For example:

     What         Uid   Getattr Lookup RdDir   RdLnk   Statfs Mounted@
     /homes       0     1196    512    22      0       30     90/09/14 12:32:55
     /homes/jsp   0     0       0      0       1180    0      90/10/13 12:56:58

`What'
     the volume name.

`Uid'
     ignored.

`Getattr'
     the count of NFS "getattr" requests on this node.  This should
     only be non-zero for directory nodes.

`Lookup'
     the count of NFS "lookup" requests on this node.  This should only
     be non-zero for directory nodes.

`RdDir'
     the count of NFS "readdir" requests on this node.  This should only
     be non-zero for directory nodes.

`RdLnk'
     the count of NFS "readlink" requests on this node.  This should be
     zero for directory nodes.

`Statfs'
     the count of NFS "statfs" requests on this node.  This should only
     be non-zero for top-level automount points.

`Mounted@'
     the date and time the volume name was first referenced.


File: am-utils.info,  Node: Amq -f option,  Next: Amq -h option,  Prev: Amq default,  Up: Controlling Amd

Amq -f option
-------------

   The "-f" option causes Amd to flush the internal mount map cache.
This is useful for example in Hesiod maps since Amd will not
automatically notice when they have been updated.  The map cache can
also be synchronized with the map source by using the `sync' option
(*note Automount Filesystem::.).


File: am-utils.info,  Node: Amq -l option,  Next: Amq -m option,  Prev: Amq -h option,  Up: Controlling Amd

Amq -l option
-------------

   Tell Amd to use log_file as the log file name.  For security
reasons, this *must* be the same log file which Amd used when started.
This option is therefore only useful to refresh Amd's open file handle
on the log file, so that it can be rotated and compressed via daily
cron jobs.


File: am-utils.info,  Node: Amq -h option,  Next: Amq -l option,  Prev: Amq -f option,  Up: Controlling Amd

Amq -h option
-------------

   By default the local host is used.  In an HP-UX cluster the root
server is used since that is the only place in the cluster where Amd
will be running.  To query Amd on another host the "-h" option should
be used.


File: am-utils.info,  Node: Amq -m option,  Next: Amq -M-option,  Prev: Amq -l option,  Up: Controlling Amd

Amq -m option
-------------

   The "-m" option displays similar information about mounted
filesystems, rather than automount points.  The output includes the
following information:

   * the mount information,

   * the mount point,

   * the filesystem type,

   * the number of references to this filesystem,

   * the server hostname,

   * the state of the file server,

   * any error which has occurred.

   For example:

     "root"           truth:(pid602)     root   1 localhost is up
     hesiod.home      /home              toplvl 1 localhost is up
     hesiod.vol       /vol               toplvl 1 localhost is up
     hesiod.homes     /homes             toplvl 1 localhost is up
     amy:/home/amy    /a/amy/home/amy    nfs    5 amy is up
     swan:/home/swan  /a/swan/home/swan  nfs    0 swan is up (Permission denied)
     ex:/home/ex      /a/ex/home/ex      nfs    0 ex is down

   When the reference count is zero the filesystem is not mounted but
the mount point and server information is still being maintained by Amd.


File: am-utils.info,  Node: Amq -M-option,  Next: Amq -p option,  Prev: Amq -m option,  Up: Controlling Amd

Amq -M option
-------------

   The "-M" option passes a new map entry to Amd and waits for it to be
evaluated, possibly causing a mount.  For example, the following
command would cause `/home/toytown' on host `toytown' to be mounted
locally on `/mnt/toytown'.

     amq -M '/mnt/toytown type:=nfs;rfs:=/home/toytown;rhost:=toytown;fs:=${key}'

   Amd applies some simple security checks before allowing this
operation.  The check tests whether the incoming request is from a
privileged UDP port on the local machine.  "Permission denied" is
returned if the check fails.

   This option is very insecure as it is vulnerable to attacks such as
IP Spoofing.  In other words, it is relatively easy for an attacker who
really wants to, to make your Amd process mount any filesystem from the
Internet!  Therefore, the *complete* code which supports the "-M"
option in Amd and Amq is turned off by default.  To turn it on, you
have to reconfigure am-utils with `configure --enable-amq-mount'.
Think twice before doing so, and use this option only if you absolutely
need to.

   A future release of Amd will include code to allow the mount(8)
command to mount automount points:

     mount -t amd /vol hesiod.vol

   This will then allow Amd to be controlled from the standard system
filesystem mount list.


File: am-utils.info,  Node: Amq -p option,  Next: Amq -P-option,  Prev: Amq -M-option,  Up: Controlling Amd

Amq -p option
-------------

   Return the process ID of the remote or locally running Amd.  Useful
when you need to send a signal to the local Amd process, and would
rather not have to search through the process table.  This option is
used in the `ctl-amd' script.


File: am-utils.info,  Node: Amq -P-option,  Next: Amq -s option,  Prev: Amq -p option,  Up: Controlling Amd

Amq -P option
-------------

   Contact an alternate running Amd that had registered itself on a
different RPC PROGRAM_NUMBER and apply all other operations to that
instance of the automounter.  This is useful when you run multiple
copies of Amd, and need to manage each one separately.  If not
specified, amq will use the default program number for Amd, 300019.
For security reasons, the only alternate program numbers Amd can use
range from 300019 to 300029, inclusive.

   For example, to kill an alternate running Amd:

     kill `amq -p -P 300020`


File: am-utils.info,  Node: Amq -s option,  Next: Amq -u option,  Prev: Amq -P-option,  Up: Controlling Amd

Amq -s option
-------------

   The "-s" option displays global statistics.  If any other options
are specified or any filesystems named then this option is ignored.
For example:

     requests  stale     mount     mount     unmount
     deferred  fhandles  ok        failed    failed
     1054      1         487       290       7017

`Deferred requests'
     are those for which an immediate reply could not be constructed.
     For example, this would happen if a background mount was required.

`Stale filehandles'
     counts the number of times the kernel passes a stale filehandle to
     Amd.  Large numbers indicate problems.

`Mount ok'
     counts the number of automounts which were successful.

`Mount failed'
     counts the number of automounts which failed.

`Unmount failed'
     counts the number of times a filesystem could not be unmounted.
     Very large numbers here indicate that the time between unmount
     attempts should be increased.


File: am-utils.info,  Node: Amq -u option,  Next: Amq -v option,  Prev: Amq -s option,  Up: Controlling Amd

Amq -u option
-------------

   The "-u" option causes the time-to-live interval of the named mount
points to be expired, thus causing an unmount attempt.  This is the only
safe way to unmount an automounted filesystem.  It is not possible to
unmount a filesystem which has been mounted with the `nounmount' flag.


File: am-utils.info,  Node: Amq -v option,  Next: Other Amq options,  Prev: Amq -u option,  Up: Controlling Amd

Amq -v option
-------------

   The "-v" option displays the version of Amd in a similar way to
Amd's "-v" option.


File: am-utils.info,  Node: Other Amq options,  Prev: Amq -v option,  Up: Controlling Amd

Other Amq options
-----------------

   Two other operations are implemented.  These modify the state of Amd
as a whole, rather than any particular filesystem.  The "-x" and "-D"
options have exactly the same effect as Amd's corresponding command
line options.

   When Amd receives a "-x" flag it limits the log options being
modified to those which were not enabled at startup.  This prevents a
user turning *off* any logging option which was specified at startup,
though any which have been turned off since then can still be turned
off.  The "-D" option has a similar behavior.


File: am-utils.info,  Node: FSinfo,  Next: Hlfsd,  Prev: Run-time Administration,  Up: Top

FSinfo
******

   XXX: this chapter should be reviewed by someone knowledgeable with
fsinfo.

* Menu:

* FSinfo Overview::                 Introduction to FSinfo.
* Using FSinfo::                    Basic concepts.
* FSinfo Grammar::                  Language syntax, semantics and examples.
* FSinfo host definitions::         Defining a new host.
* FSinfo host attributes::          Definable host attributes.
* FSinfo filesystems::              Defining locally attached filesystems.
* FSinfo static mounts::            Defining additional static mounts.
* FSinfo automount definitions::
* FSinfo Command Line Options::
* FSinfo errors::


File: am-utils.info,  Node: FSinfo Overview,  Next: Using FSinfo,  Prev: FSinfo,  Up: FSinfo

FSinfo overview
===============

   FSinfo is a filesystem management tool.  It has been designed to
work with Amd to help system administrators keep track of the ever
increasing filesystem namespace under their control.

   The purpose of FSinfo is to generate all the important standard
filesystem data files from a single set of input data.  Starting with a
single data source guarantees that all the generated files are
self-consistent.  One of the possible output data formats is a set of
Amd maps which can be used amongst the set of hosts described in the
input data.

   FSinfo implements a declarative language.  This language is
specifically designed for describing filesystem namespace and physical
layouts.  The basic declaration defines a mounted filesystem including
its device name, mount point, and all the volumes and access
permissions.  FSinfo reads this information and builds an internal map
of the entire network of hosts.  Using this map, many different data
formats can be produced including `/etc/fstab', `/etc/exports', Amd
mount maps and `/etc/bootparams'.


File: am-utils.info,  Node: Using FSinfo,  Next: FSinfo Grammar,  Prev: FSinfo Overview,  Up: FSinfo

Using FSinfo
============

   The basic strategy when using FSinfo is to gather all the
information about all disks on all machines into one set of
declarations.  For each machine being managed, the following data is
required:

   * Hostname

   * List of all filesystems and, optionally, their mount points.

   * Names of volumes stored on each filesystem.

   * NFS export information for each volume.

   * The list of static filesystem mounts.

   The following information can also be entered into the same
configuration files so that all data can be kept in one place.

   * List of network interfaces

   * IP address of each interface

   * Hardware address of each interface

   * Dumpset to which each filesystem belongs

   * and more ...

   To generate Amd mount maps, the automount tree must also be defined
(*note FSinfo automount definitions::.).  This will have been designed
at the time the volume names were allocated.  Some volume names will
not be automounted, so FSinfo needs an explicit list of which volumes
should be automounted.

   Hostnames are required at several places in the FSinfo language.  It
is important to stick to either fully qualified names or unqualified
names.  Using a mixture of the two will inevitably result in confusion.

   Sometimes volumes need to be referenced which are not defined in the
set of hosts being managed with FSinfo.  The required action is to add a
dummy set of definitions for the host and volume names required.  Since
the files generated for those particular hosts will not be used on them,
the exact values used is not critical.


File: am-utils.info,  Node: FSinfo Grammar,  Next: FSinfo host definitions,  Prev: Using FSinfo,  Up: FSinfo

FSinfo grammar
==============

   FSinfo has a relatively simple grammar.  Distinct syntactic
constructs exist for each of the different types of data, though they
share a common flavor.  Several conventions are used in the grammar
fragments below.

   The notation, list(xxx), indicates a list of zero or more xxx's.
The notation, opt(xxx), indicates zero or one xxx.  Items in double
quotes, eg "host", represent input tokens.  Items in angle brackets, eg
<HOSTNAME>, represent strings in the input.  Strings need not be in
double quotes, except to differentiate them from reserved words.
Quoted strings may include the usual set of C "\" escape sequences with
one exception: a backslash-newline-whitespace sequence is squashed into
a single space character.  To defeat this feature, put a further
backslash at the start of the second line.

   At the outermost level of the grammar, the input consists of a
sequence of host and automount declarations.  These declarations are
all parsed before they are analyzed.  This means they can appear in any
order and cyclic host references are possible.

     fsinfo      : list(fsinfo_attr) ;
     
     fsinfo_attr : host | automount ;

* Menu:

* FSinfo host definitions::
* FSinfo automount definitions::


File: am-utils.info,  Node: FSinfo host definitions,  Next: FSinfo host attributes,  Prev: FSinfo Grammar,  Up: FSinfo

FSinfo host definitions
=======================

   A host declaration consists of three parts: a set of machine
attribute data, a list of filesystems physically attached to the
machine, and a list of additional statically mounted filesystems.

     host        : "host" host_data list(filesystem) list(mount) ;

   Each host must be declared in this way exactly once.  Such things as
the hardware address, the architecture and operating system types and
the cluster name are all specified within the "host data".

   All the disks the machine has should then be described in the "list
of filesystems".  When describing disks, you can specify what "volname"
the disk/partition should have and all such entries are built up into a
dictionary which can then be used for building the automounter maps.

   The "list of mounts" specifies all the filesystems that should be
statically mounted on the machine.

* Menu:

* FSinfo host attributes::
* FSinfo filesystems::
* FSinfo static mounts::


File: am-utils.info,  Node: FSinfo host attributes,  Next: FSinfo filesystems,  Prev: FSinfo host definitions,  Up: FSinfo host definitions

FSinfo host attributes
======================

   The host data, "host_data", always includes the "hostname".  In
addition, several other host attributes can be given.

     host_data   : <HOSTNAME>
                 | "{" list(host_attrs) "}" <HOSTNAME>
                 ;
     
     host_attrs  : host_attr "=" <STRING>
                 | netif
                 ;
     
     host_attr   : "config"
                 | "arch"
                 | "os"
                 | "cluster"
                 ;

   The "hostname" is, typically, the fully qualified hostname of the
machine.

   Examples:

     host dylan.doc.ic.ac.uk
     
     host {
         os = hpux
         arch = hp300
     } dougal.doc.ic.ac.uk

   The options that can be given as host attributes are shown below.

* Menu:

* netif Option:         FSinfo host netif:
* config Option:        FSinfo host config:
* arch Option:          FSinfo host arch:
* os Option:            FSinfo host os:
* cluster Option:       FSinfo host cluster:


File: am-utils.info,  Node: FSinfo host netif,  Next: FSinfo host config,  Up: FSinfo host attributes

netif Option
------------

   This defines the set of network interfaces configured on the machine.
The interface attributes collected by FSinfo are the IP address, subnet
mask and hardware address.  Multiple interfaces may be defined for
hosts with several interfaces by an entry for each interface.  The
values given are sanity checked, but are currently unused for anything
else.

     netif       : "netif" <STRING> "{" list(netif_attrs) "}" ;
     
     netif_attrs : netif_attr "=" <STRING> ;
     
     netif_attr  : "inaddr" | "netmask" | "hwaddr" ;

   Examples:

     netif ie0 {
         inaddr  = 129.31.81.37
         netmask = 0xfffffe00
         hwaddr  = "08:00:20:01:a6:a5"
     }
     
     netif ec0 { }


File: am-utils.info,  Node: FSinfo host config,  Next: FSinfo host arch,  Prev: FSinfo host netif,  Up: FSinfo host attributes

config Option
-------------

   This option allows you to specify configuration variables for the
startup scripts (`rc' scripts).  A simple string should immediately
follow the keyword.

   Example:

     config "NFS_SERVER=true"
     config "ZEPHYR=true"

   This option is currently unsupported.


File: am-utils.info,  Node: FSinfo host arch,  Next: FSinfo host os,  Prev: FSinfo host config,  Up: FSinfo host attributes

arch Option
-----------

   This defines the architecture of the machine.  For example:

     arch = hp300

   This is intended to be of use when building architecture specific
mountmaps, however, the option is currently unsupported.


File: am-utils.info,  Node: FSinfo host os,  Next: FSinfo host cluster,  Prev: FSinfo host arch,  Up: FSinfo host attributes

os Option
---------

   This defines the operating system type of the host.  For example:

     os = hpux

   This information is used when creating the `fstab' files, for
example in choosing which format to use for the `fstab' entries within
the file.


File: am-utils.info,  Node: FSinfo host cluster,  Prev: FSinfo host os,  Up: FSinfo host attributes

cluster Option
--------------

   This is used for specifying in which cluster the machine belongs.
For example:

     cluster = "theory"

   The cluster is intended to be used when generating the automount
maps, although it is currently unsupported.


File: am-utils.info,  Node: FSinfo filesystems,  Next: FSinfo static mounts,  Prev: FSinfo host attributes,  Up: FSinfo host definitions

FSinfo filesystems
==================

   The list of physically attached filesystems follows the machine
attributes.  These should define all the filesystems available from this
machine, whether exported or not.  In addition to the device name,
filesystems have several attributes, such as filesystem type, mount
options, and `fsck' pass number which are needed to generate `fstab'
entries.

     filesystem  : "fs" <DEVICE> "{" list(fs_data) "}" ;
     
     fs_data     : fs_data_attr "=" <STRING>
                 | mount
                 ;
     
     fs_data_attr
                 : "fstype" | "opts" | "passno"
                 | "freq" | "dumpset" | "log"
                 ;

   Here, <DEVICE> is the device name of the disk (for example,
`/dev/dsk/2s0').  The device name is used for building the mount maps
and for the `fstab' file.  The attributes that can be specified are
shown in the following section.

   The FSinfo configuration file for `dylan.doc.ic.ac.uk' is listed
below.

     host dylan.doc.ic.ac.uk
     
     fs /dev/dsk/0s0 {
             fstype = swap
     }
     
     fs /dev/dsk/0s0 {
             fstype = hfs
             opts = rw,noquota,grpid
             passno = 0;
             freq = 1;
             mount / { }
     }
     
     fs /dev/dsk/1s0 {
             fstype = hfs
             opts = defaults
             passno = 1;
             freq = 1;
             mount /usr {
                     local {
                             exportfs "dougal eden dylan zebedee brian"
                             volname /nfs/hp300/local
                     }
             }
     }
     
     fs /dev/dsk/2s0 {
             fstype = hfs
             opts = defaults
             passno = 1;
             freq = 1;
             mount default {
                     exportfs "toytown_clients hangers_on"
                     volname /home/dylan/dk2
             }
     }
     
     fs /dev/dsk/3s0 {
             fstype = hfs
             opts = defaults
             passno = 1;
             freq = 1;
             mount default {
                     exportfs "toytown_clients hangers_on"
                     volname /home/dylan/dk3
             }
     }
     
     fs /dev/dsk/5s0 {
             fstype = hfs
             opts = defaults
             passno = 1;
             freq = 1;
             mount default {
                     exportfs "toytown_clients hangers_on"
                     volname /home/dylan/dk5
             }
     }

* Menu:

* fstype Option:        FSinfo filesystems fstype:
* opts Option:          FSinfo filesystems opts:
* passno Option:        FSinfo filesystems passno:
* freq Option:          FSinfo filesystems freq:
* mount Option:         FSinfo filesystems mount:
* dumpset Option:       FSinfo filesystems dumpset:
* log Option:           FSinfo filesystems log:

