.TH ACE_Map_Const_Iterator 3 "5 Oct 2001" "ACE" \" -*- nroff -*-
.ad l
.nh
.SH NAME
ACE_Map_Const_Iterator \- Forward const iterator for the . 
.SH SYNOPSIS
.br
.PP
\fC#include <Map_Manager.h>\fR
.PP
Inherits \fBACE_Map_Const_Iterator_Base< EXT_ID,INT_ID,ACE_LOCK >\fR.
.PP
.SS Public Methods

.in +1c
.ti -1c
.RI "\fBACE_Map_Const_Iterator\fR (const \fBACE_Map_Manager\fR <EXT_ID, INT_ID, ACE_LOCK> &mm, int pass_end = 0)"
.br
.ti -1c
.RI "int \fBadvance\fR (void)"
.br
.RI "\fIMove forward by one element in the set. Returns 0 when all the items in the set have been seen, else 1.\fR"
.ti -1c
.RI "void \fBdump\fR (void) const"
.br
.RI "\fIDump the state of an object.\fR"
.ti -1c
.RI "ACE_Map_Const_Iterator<EXT_ID, INT_ID, ACE_LOCK>& \fBoperator++\fR (void)"
.br
.RI "\fIPrefix advance.\fR"
.ti -1c
.RI "ACE_Map_Const_Iterator<EXT_ID, INT_ID, ACE_LOCK> \fBoperator++\fR (int)"
.br
.RI "\fIPostfix advance.\fR"
.ti -1c
.RI "ACE_Map_Const_Iterator<EXT_ID, INT_ID, ACE_LOCK>& \fBoperator--\fR (void)"
.br
.RI "\fIPrefix reverse.\fR"
.ti -1c
.RI "ACE_Map_Const_Iterator<EXT_ID, INT_ID, ACE_LOCK> \fBoperator--\fR (int)"
.br
.RI "\fIPostfix reverse.\fR"
.in -1c
.SS Public Attributes

.in +1c
.ti -1c
.RI "\fBACE_ALLOC_HOOK_DECLARE\fR"
.br
.RI "\fIDeclare the dynamic allocation hooks.\fR"
.in -1c
.SH DETAILED DESCRIPTION
.PP 

.SS template<class EXT_ID, class INT_ID, class ACE_LOCK>  template class ACE_Map_Const_Iterator
Forward const iterator for the .
.PP
.PP
 This class does not perform any internal locking of the  it is iterating upon since locking is inherently inefficient and/or error-prone within an STL-style iterator. If you require locking, you can explicitly use an  or  on the 's internal lock, which is accessible via its <mutex> method. 
.PP
.SH CONSTRUCTOR & DESTRUCTOR DOCUMENTATION
.PP 
.SS template<classEXT_ID, classINT_ID, classACE_LOCK> ACE_Map_Const_Iterator<EXT_ID, INT_ID, ACE_LOCK>::ACE_Map_Const_Iterator<EXT_ID, INT_ID, ACE_LOCK> (const \fBACE_Map_Manager\fR< EXT_ID,INT_ID,ACE_LOCK >& mm, int pass_end = 0)
.PP
.SH MEMBER FUNCTION DOCUMENTATION
.PP 
.SS template<classEXT_ID, classINT_ID, classACE_LOCK> int ACE_Map_Const_Iterator<EXT_ID, INT_ID, ACE_LOCK>::advance (void)
.PP
Move forward by one element in the set. Returns 0 when all the items in the set have been seen, else 1.
.PP
.SS template<classEXT_ID, classINT_ID, classACE_LOCK> void ACE_Map_Const_Iterator<EXT_ID, INT_ID, ACE_LOCK>::dump (void) const
.PP
Dump the state of an object.
.PP
.SS template<classEXT_ID, classINT_ID, classACE_LOCK> ACE_Map_Const_Iterator< EXT_ID,INT_ID,ACE_LOCK > ACE_Map_Const_Iterator<EXT_ID, INT_ID, ACE_LOCK>::operator++ (int)
.PP
Postfix advance.
.PP
.SS template<classEXT_ID, classINT_ID, classACE_LOCK> ACE_Map_Const_Iterator< EXT_ID,INT_ID,ACE_LOCK >& ACE_Map_Const_Iterator<EXT_ID, INT_ID, ACE_LOCK>::operator++ (void)
.PP
Prefix advance.
.PP
.SS template<classEXT_ID, classINT_ID, classACE_LOCK> ACE_Map_Const_Iterator< EXT_ID,INT_ID,ACE_LOCK > ACE_Map_Const_Iterator<EXT_ID, INT_ID, ACE_LOCK>::operator-- (int)
.PP
Postfix reverse.
.PP
.SS template<classEXT_ID, classINT_ID, classACE_LOCK> ACE_Map_Const_Iterator< EXT_ID,INT_ID,ACE_LOCK >& ACE_Map_Const_Iterator<EXT_ID, INT_ID, ACE_LOCK>::operator-- (void)
.PP
Prefix reverse.
.PP
.SH MEMBER DATA DOCUMENTATION
.PP 
.SS template<classEXT_ID, classINT_ID, classACE_LOCK> ACE_Map_Const_Iterator<EXT_ID, INT_ID, ACE_LOCK>::ACE_ALLOC_HOOK_DECLARE
.PP
Declare the dynamic allocation hooks.
.PP
Reimplemented from \fBACE_Map_Const_Iterator_Base\fR.

.SH AUTHOR
.PP 
Generated automatically by Doxygen for ACE from the source code.