.TH ACE_POSIX_Asynch_Transmit_File_Result 3 "5 Oct 2001" "ACE" \" -*- nroff -*-
.ad l
.nh
.SH NAME
ACE_POSIX_Asynch_Transmit_File_Result \- This is that class which will be passed back to the <handler> when the asynchronous transmit file completes. 
.SH SYNOPSIS
.br
.PP
\fC#include <POSIX_Asynch_IO.h>\fR
.PP
Inherits \fBACE_Asynch_Transmit_File_Result_Impl\fR, and \fBACE_POSIX_Asynch_Result\fR.
.PP
.SS Public Methods

.in +1c
.ti -1c
.RI "ACE_HANDLE \fBsocket\fR (void) const"
.br
.RI "\fISocket used for transmitting the file.\fR"
.ti -1c
.RI "ACE_HANDLE \fBfile\fR (void) const"
.br
.RI "\fIFile from which the data is read.\fR"
.ti -1c
.RI "\fBACE_Asynch_Transmit_File::Header_And_Trailer\fR* \fBheader_and_trailer\fR (void) const"
.br
.RI "\fIHeader and trailer data associated with this transmit file.\fR"
.ti -1c
.RI "u_long \fBbytes_to_write\fR (void) const"
.br
.RI "\fIThe number of bytes which were requested at the start of the asynchronous transmit file.\fR"
.ti -1c
.RI "u_long \fBbytes_per_send\fR (void) const"
.br
.RI "\fINumber of bytes per send requested at the start of the transmit file.\fR"
.ti -1c
.RI "u_long \fBflags\fR (void) const"
.br
.RI "\fIFlags which were passed into transmit file.\fR"
.ti -1c
.RI "u_long \fBbytes_transferred\fR (void) const"
.br
.RI "\fINumber of bytes transferred by the operation.\fR"
.ti -1c
.RI "const void* \fBact\fR (void) const"
.br
.RI "\fIACT associated with the operation.\fR"
.ti -1c
.RI "int \fBsuccess\fR (void) const"
.br
.RI "\fIDid the operation succeed?\fR"
.ti -1c
.RI "const void* \fBcompletion_key\fR (void) const"
.br
.ti -1c
.RI "u_long \fBerror\fR (void) const"
.br
.RI "\fIError value if the operation fail.\fR"
.ti -1c
.RI "ACE_HANDLE \fBevent\fR (void) const"
.br
.RI "\fIThis returns ACE_INVALID_HANDLE.\fR"
.ti -1c
.RI "u_long \fBoffset\fR (void) const"
.br
.ti -1c
.RI "u_long \fBoffset_high\fR (void) const"
.br
.ti -1c
.RI "int \fBpriority\fR (void) const"
.br
.RI "\fIThe priority of the asynchronous operation.\fR"
.ti -1c
.RI "int \fBsignal_number\fR (void) const"
.br
.ti -1c
.RI "int \fBpost_completion\fR (\fBACE_Proactor_Impl\fR *proactor)"
.br
.RI "\fIPost <this> to the Proactor.\fR"
.in -1c
.SS Protected Methods

.in +1c
.ti -1c
.RI "\fBACE_POSIX_Asynch_Transmit_File_Result\fR (\fBACE_Handler\fR &handler, ACE_HANDLE socket, ACE_HANDLE file, \fBACE_Asynch_Transmit_File::Header_And_Trailer\fR *header_and_trailer, u_long bytes_to_write, u_long offset, u_long offset_high, u_long bytes_per_send, u_long flags, const void *act, ACE_HANDLE event, int priority, int signal_number)"
.br
.ti -1c
.RI "virtual void \fBcomplete\fR (u_long bytes_transferred, int success, const void *completion_key, u_long error)"
.br
.RI "\fI\fBACE_Proactor\fR will call this method when the write completes.\fR"
.ti -1c
.RI "virtual \fB~ACE_POSIX_Asynch_Transmit_File_Result\fR (void)"
.br
.RI "\fIDestructor.\fR"
.in -1c
.SS Protected Attributes

.in +1c
.ti -1c
.RI "ACE_HANDLE \fBsocket_\fR"
.br
.RI "\fINetwork I/O handle.\fR"
.ti -1c
.RI "\fBACE_Asynch_Transmit_File::Header_And_Trailer\fR* \fBheader_and_trailer_\fR"
.br
.RI "\fIHeader and trailer data associated with this transmit file.\fR"
.ti -1c
.RI "u_long \fBbytes_per_send_\fR"
.br
.RI "\fINumber of bytes per send requested at the start of the transmit file.\fR"
.ti -1c
.RI "u_long \fBflags_\fR"
.br
.RI "\fIFlags which were passed into transmit file.\fR"
.in -1c
.SS Friends

.in +1c
.ti -1c
.RI "class \fBACE_POSIX_AIOCB_Asynch_Transmit_File\fR"
.br
.ti -1c
.RI "class \fBACE_POSIX_Asynch_Transmit_Handler\fR"
.br
.ti -1c
.RI "class \fBACE_POSIX_AIOCB_Asynch_Transmit_Handler\fR"
.br
.ti -1c
.RI "class \fBACE_POSIX_Proactor\fR"
.br
.in -1c
.SH DETAILED DESCRIPTION
.PP 
This is that class which will be passed back to the <handler> when the asynchronous transmit file completes.
.PP
.PP
 This class has all the information necessary for the <handler> to uniquiely identify the completion of the asynchronous transmit file. 
.PP
.SH CONSTRUCTOR & DESTRUCTOR DOCUMENTATION
.PP 
.SS ACE_POSIX_Asynch_Transmit_File_Result::ACE_POSIX_Asynch_Transmit_File_Result (\fBACE_Handler\fR & handler, ACE_HANDLE socket, ACE_HANDLE file, \fBACE_Asynch_Transmit_File::Header_And_Trailer\fR * header_and_trailer, u_long bytes_to_write, u_long offset, u_long offset_high, u_long bytes_per_send, u_long flags, const void * act, ACE_HANDLE event, int priority, int signal_number)\fC [protected]\fR
.PP
.SS ACE_POSIX_Asynch_Transmit_File_Result::~ACE_POSIX_Asynch_Transmit_File_Result (void)\fC [protected, virtual]\fR
.PP
Destructor.
.PP
.SH MEMBER FUNCTION DOCUMENTATION
.PP 
.SS const void * ACE_POSIX_Asynch_Transmit_File_Result::act (void) const
.PP
ACT associated with the operation.
.PP
Reimplemented from \fBACE_POSIX_Asynch_Result\fR.
.SS u_long ACE_POSIX_Asynch_Transmit_File_Result::bytes_per_send (void) const
.PP
Number of bytes per send requested at the start of the transmit file.
.PP
.SS u_long ACE_POSIX_Asynch_Transmit_File_Result::bytes_to_write (void) const
.PP
The number of bytes which were requested at the start of the asynchronous transmit file.
.PP
.SS u_long ACE_POSIX_Asynch_Transmit_File_Result::bytes_transferred (void) const
.PP
Number of bytes transferred by the operation.
.PP
Reimplemented from \fBACE_POSIX_Asynch_Result\fR.
.SS void ACE_POSIX_Asynch_Transmit_File_Result::complete (u_long bytes_transferred, int success, const void * completion_key, u_long error)\fC [protected, virtual]\fR
.PP
\fBACE_Proactor\fR will call this method when the write completes.
.PP
.SS const void * ACE_POSIX_Asynch_Transmit_File_Result::completion_key (void) const
.PP
This is the ACT associated with the handle on which the Asynch_Operation takes place.
.PP
@ This is not implemented for POSIX4 platforms. 
.PP
Reimplemented from \fBACE_POSIX_Asynch_Result\fR.
.SS u_long ACE_POSIX_Asynch_Transmit_File_Result::error (void) const
.PP
Error value if the operation fail.
.PP
Reimplemented from \fBACE_POSIX_Asynch_Result\fR.
.SS ACE_HANDLE ACE_POSIX_Asynch_Transmit_File_Result::event (void) const
.PP
This returns ACE_INVALID_HANDLE.
.PP
Reimplemented from \fBACE_POSIX_Asynch_Result\fR.
.SS ACE_HANDLE ACE_POSIX_Asynch_Transmit_File_Result::file (void) const
.PP
File from which the data is read.
.PP
.SS u_long ACE_POSIX_Asynch_Transmit_File_Result::flags (void) const
.PP
Flags which were passed into transmit file.
.PP
.SS \fBACE_Asynch_Transmit_File::Header_And_Trailer\fR * ACE_POSIX_Asynch_Transmit_File_Result::header_and_trailer (void) const
.PP
Header and trailer data associated with this transmit file.
.PP
.SS u_long ACE_POSIX_Asynch_Transmit_File_Result::offset (void) const
.PP
This really make sense only when doing file I/O.
.PP
@ On POSIX4-Unix, offset_high should be supported using aiocb64. 
.PP
Reimplemented from \fBACE_POSIX_Asynch_Result\fR.
.SS u_long ACE_POSIX_Asynch_Transmit_File_Result::offset_high (void) const
.PP
Reimplemented from \fBACE_POSIX_Asynch_Result\fR.
.SS int ACE_POSIX_Asynch_Transmit_File_Result::post_completion (\fBACE_Proactor_Impl\fR * proactor)
.PP
Post <this> to the Proactor.
.PP
Reimplemented from \fBACE_POSIX_Asynch_Result\fR.
.SS int ACE_POSIX_Asynch_Transmit_File_Result::priority (void) const
.PP
The priority of the asynchronous operation.
.PP
Reimplemented from \fBACE_POSIX_Asynch_Result\fR.
.SS int ACE_POSIX_Asynch_Transmit_File_Result::signal_number (void) const
.PP
POSIX4 realtime signal number to be used for the operation. <signal_number> ranges from SIGRTMIN to SIGRTMAX. By default, SIGRTMIN is used to issue  calls. This is a no-op on non-POSIX4 systems and returns 0. 
.PP
Reimplemented from \fBACE_POSIX_Asynch_Result\fR.
.SS ACE_HANDLE ACE_POSIX_Asynch_Transmit_File_Result::socket (void) const
.PP
Socket used for transmitting the file.
.PP
.SS int ACE_POSIX_Asynch_Transmit_File_Result::success (void) const
.PP
Did the operation succeed?
.PP
Reimplemented from \fBACE_POSIX_Asynch_Result\fR.
.SH FRIENDS AND RELATED FUNCTION DOCUMENTATION
.PP 
.SS class ACE_POSIX_AIOCB_Asynch_Transmit_File\fC [friend]\fR
.PP
Factory classes willl have special permissions.
.PP
.SS class ACE_POSIX_AIOCB_Asynch_Transmit_Handler\fC [friend]\fR
.PP
.SS class ACE_POSIX_Asynch_Transmit_Handler\fC [friend]\fR
.PP
Handlers do all the job.
.PP
.SS class ACE_POSIX_Proactor\fC [friend]\fR
.PP
The Proactor constructs the Result class for faking results.
.PP
.SH MEMBER DATA DOCUMENTATION
.PP 
.SS u_long ACE_POSIX_Asynch_Transmit_File_Result::bytes_per_send_\fC [protected]\fR
.PP
Number of bytes per send requested at the start of the transmit file.
.PP
.SS u_long ACE_POSIX_Asynch_Transmit_File_Result::flags_\fC [protected]\fR
.PP
Flags which were passed into transmit file.
.PP
.SS \fBACE_Asynch_Transmit_File::Header_And_Trailer\fR * ACE_POSIX_Asynch_Transmit_File_Result::header_and_trailer_\fC [protected]\fR
.PP
Header and trailer data associated with this transmit file.
.PP
.SS ACE_HANDLE ACE_POSIX_Asynch_Transmit_File_Result::socket_\fC [protected]\fR
.PP
Network I/O handle.
.PP


.SH AUTHOR
.PP 
Generated automatically by Doxygen for ACE from the source code.