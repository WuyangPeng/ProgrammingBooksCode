.TH ACE_Unmanaged_TSS_Singleton 3 "5 Oct 2001" "ACE" \" -*- nroff -*-
.ad l
.nh
.SH NAME
ACE_Unmanaged_TSS_Singleton \- Same as , except does _not_ register with  for destruction. 
.SH SYNOPSIS
.br
.PP
\fC#include <Singleton.h>\fR
.PP
Inherits \fBACE_TSS_Singleton< TYPE,ACE_LOCK >\fR.
.PP
.SS Static Public Methods

.in +1c
.ti -1c
.RI "TYPE* \fBinstance\fR (void)"
.br
.RI "\fIGlobal access point to the Singleton.\fR"
.ti -1c
.RI "void \fBclose\fR (void)"
.br
.RI "\fIExplicitly delete the Singleton instance.\fR"
.ti -1c
.RI "void \fBdump\fR (void)"
.br
.RI "\fIDump the state of the object.\fR"
.in -1c
.SS Protected Methods

.in +1c
.ti -1c
.RI "\fBACE_Unmanaged_TSS_Singleton\fR (void)"
.br
.RI "\fIDefault constructor.\fR"
.in -1c
.SS Static Protected Methods

.in +1c
.ti -1c
.RI "ACE_Unmanaged_TSS_Singleton<TYPE, ACE_LOCK>*& \fBinstance_i\fR (void)"
.br
.RI "\fIGet pointer to the Singleton instance.\fR"
.in -1c
.SS Static Protected Attributes

.in +1c
.ti -1c
.RI "ACE_Unmanaged_TSS_Singleton<TYPE, ACE_LOCK>* \fBsingleton_\fR"
.br
.RI "\fIPointer to the Singleton (\fBACE_Cleanup\fR) instance.\fR"
.in -1c
.SH DETAILED DESCRIPTION
.PP 

.SS template<class TYPE, class ACE_LOCK>  template class ACE_Unmanaged_TSS_Singleton
Same as , except does _not_ register with  for destruction.
.PP
.PP
 This version of  can be used if, for example, its DLL will be unloaded before the  destroys the instance. Unlike with , the application is responsible for explicitly destroying the instance after it is no longer needed (if it wants to avoid memory leaks, at least). The <close> static member function must be used to explicitly destroy the Singleton. 
.PP
.SH CONSTRUCTOR & DESTRUCTOR DOCUMENTATION
.PP 
.SS template<classTYPE, classACE_LOCK> ACE_Unmanaged_TSS_Singleton<TYPE, ACE_LOCK>::ACE_Unmanaged_TSS_Singleton<TYPE, ACE_LOCK> (void)\fC [protected]\fR
.PP
Default constructor.
.PP
.SH MEMBER FUNCTION DOCUMENTATION
.PP 
.SS template<classTYPE, classACE_LOCK> void ACE_Unmanaged_TSS_Singleton<TYPE, ACE_LOCK>::close (void)\fC [static]\fR
.PP
Explicitly delete the Singleton instance.
.PP
.SS template<classTYPE, classACE_LOCK> void ACE_Unmanaged_TSS_Singleton<TYPE, ACE_LOCK>::dump (void)\fC [static]\fR
.PP
Dump the state of the object.
.PP
Reimplemented from \fBACE_TSS_Singleton\fR.
.SS template<classTYPE, classACE_LOCK> TYPE * ACE_Unmanaged_TSS_Singleton<TYPE, ACE_LOCK>::instance (void)\fC [static]\fR
.PP
Global access point to the Singleton.
.PP
Reimplemented from \fBACE_TSS_Singleton\fR.
.SS template<classTYPE, classACE_LOCK> ACE_Unmanaged_TSS_Singleton< TYPE,ACE_LOCK >*& ACE_Unmanaged_TSS_Singleton<TYPE, ACE_LOCK>::instance_i (void)\fC [static, protected]\fR
.PP
Get pointer to the Singleton instance.
.PP
Reimplemented from \fBACE_TSS_Singleton\fR.
.SH MEMBER DATA DOCUMENTATION
.PP 
.SS template<classTYPE, classACE_LOCK> ACE_Unmanaged_TSS_Singleton< TYPE,ACE_LOCK >* ACE_Unmanaged_TSS_Singleton<TYPE, ACE_LOCK>::singleton_\fC [static, protected]\fR
.PP
Pointer to the Singleton (\fBACE_Cleanup\fR) instance.
.PP
Reimplemented from \fBACE_TSS_Singleton\fR.

.SH AUTHOR
.PP 
Generated automatically by Doxygen for ACE from the source code.