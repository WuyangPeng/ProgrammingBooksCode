.TH ACE_Trace 3 "5 Oct 2001" "ACE" \" -*- nroff -*-
.ad l
.nh
.SH NAME
ACE_Trace \- A C++ trace facility that keeps track of which methods are entered and exited. 
.SH SYNOPSIS
.br
.PP
\fC#include <Trace.h>\fR
.PP
.SS Public Methods

.in +1c
.ti -1c
.RI "\fBACE_Trace\fR (const \fBACE_TCHAR\fR *n, int line = 0, const \fBACE_TCHAR\fR *file = ACE_LIB_TEXT (""))"
.br
.RI "\fIPerform the first part of the trace, which prints out the string N, the LINE, and the \fBACE_FILE\fR as the function is entered.\fR"
.ti -1c
.RI "\fB~ACE_Trace\fR (void)"
.br
.RI "\fIPerform the second part of the trace, which prints out the NAME as the function is exited.\fR"
.ti -1c
.RI "void \fBdump\fR (void) const"
.br
.RI "\fIDump the state of an object.\fR"
.in -1c
.SS Static Public Methods

.in +1c
.ti -1c
.RI "int \fBis_tracing\fR (void)"
.br
.RI "\fIDetermine if tracing is enabled (return == 1) or not (== 0).\fR"
.ti -1c
.RI "void \fBstart_tracing\fR (void)"
.br
.RI "\fIEnable the tracing facility.\fR"
.ti -1c
.RI "void \fBstop_tracing\fR (void)"
.br
.RI "\fIDisable the tracing facility.\fR"
.ti -1c
.RI "void \fBset_nesting_indent\fR (int indent)"
.br
.RI "\fIChange the nesting indentation level.\fR"
.ti -1c
.RI "int \fBget_nesting_indent\fR (void)"
.br
.RI "\fIGet the nesting indentation level.\fR"
.in -1c
.SS Private Types

.in +1c
.ti -1c
.RI "enum { \fBDEFAULT_INDENT\fR = 3, \fBDEFAULT_TRACING\fR = 1 }"
.br
.RI "\fIDefault values.\fR"
.in -1c
.SS Private Attributes

.in +1c
.ti -1c
.RI "const \fBACE_TCHAR\fR* \fBname_\fR"
.br
.RI "\fIName of the method we are in.\fR"
.in -1c
.SS Static Private Attributes

.in +1c
.ti -1c
.RI "int \fBnesting_indent_\fR"
.br
.RI "\fIKeeps track of how far to indent per trace call.\fR"
.ti -1c
.RI "int \fBenable_tracing_\fR"
.br
.RI "\fIIs tracing enabled?\fR"
.in -1c
.SH DETAILED DESCRIPTION
.PP 
A C++ trace facility that keeps track of which methods are entered and exited.
.PP
.PP
 This class uses C++ constructors and destructors to automate the ACE_Trace nesting. In addition, thread-specific storage is used to enable multiple threads to work correctly. 
.PP
.SH MEMBER ENUMERATION DOCUMENTATION
.PP 
.SS anonymous enum\fC [private]\fR
.PP
Default values.
.PP
\fBEnumeration values:\fR
.in +1c
.TP
\fB\fIDEFAULT_INDENT\fR \fR
.TP
\fB\fIDEFAULT_TRACING\fR \fR
.SH CONSTRUCTOR & DESTRUCTOR DOCUMENTATION
.PP 
.SS ACE_Trace::ACE_Trace (const \fBACE_TCHAR\fR * n, int line = 0, const \fBACE_TCHAR\fR * file = ACE_LIB_TEXT (""))
.PP
Perform the first part of the trace, which prints out the string N, the LINE, and the \fBACE_FILE\fR as the function is entered.
.PP
.SS ACE_Trace::~ACE_Trace (void)
.PP
Perform the second part of the trace, which prints out the NAME as the function is exited.
.PP
.SH MEMBER FUNCTION DOCUMENTATION
.PP 
.SS void ACE_Trace::dump (void) const
.PP
Dump the state of an object.
.PP
.SS int ACE_Trace::get_nesting_indent (void)\fC [static]\fR
.PP
Get the nesting indentation level.
.PP
.SS int ACE_Trace::is_tracing (void)\fC [static]\fR
.PP
Determine if tracing is enabled (return == 1) or not (== 0).
.PP
.SS void ACE_Trace::set_nesting_indent (int indent)\fC [static]\fR
.PP
Change the nesting indentation level.
.PP
.SS void ACE_Trace::start_tracing (void)\fC [static]\fR
.PP
Enable the tracing facility.
.PP
.SS void ACE_Trace::stop_tracing (void)\fC [static]\fR
.PP
Disable the tracing facility.
.PP
.SH MEMBER DATA DOCUMENTATION
.PP 
.SS int ACE_Trace::enable_tracing_\fC [static, private]\fR
.PP
Is tracing enabled?
.PP
.SS const \fBACE_TCHAR\fR * ACE_Trace::name_\fC [private]\fR
.PP
Name of the method we are in.
.PP
.SS int ACE_Trace::nesting_indent_\fC [static, private]\fR
.PP
Keeps track of how far to indent per trace call.
.PP


.SH AUTHOR
.PP 
Generated automatically by Doxygen for ACE from the source code.