.TH ACE_Map_Iterator_Base 3 "5 Oct 2001" "ACE" \" -*- nroff -*-
.ad l
.nh
.SH NAME
ACE_Map_Iterator_Base \- Iterator for the . 
.SH SYNOPSIS
.br
.PP
\fC#include <Map_Manager.h>\fR
.PP
Inherited by \fBACE_Map_Iterator\fR, and \fBACE_Map_Reverse_Iterator\fR.
.PP
.SS Public Methods

.in +1c
.ti -1c
.RI "\fBACE_Map_Iterator_Base\fR (\fBACE_Map_Manager\fR <EXT_ID, INT_ID, ACE_LOCK> &mm)"
.br
.RI "\fIContructor. If head != 0, the iterator constructed is positioned at the head of the map, it is positioned at the end otherwise.\fR"
.ti -1c
.RI "int \fBnext\fR (\fBACE_Map_Entry\fR<EXT_ID, INT_ID> *&next_entry) const"
.br
.RI "\fIPass back the next <entry> that hasn't been seen in the Set. Returns 0 when all items have been seen, else 1.\fR"
.ti -1c
.RI "int \fBdone\fR (void) const"
.br
.RI "\fIReturns 1 when all items have been seen, else 0.\fR"
.ti -1c
.RI "\fBACE_Map_Entry\fR<EXT_ID, INT_ID>& \fBoperator *\fR (void) const"
.br
.RI "\fIReturns a reference to the interal element <this> is pointing to.\fR"
.ti -1c
.RI "\fBACE_Map_Manager\fR<EXT_ID, INT_ID, ACE_LOCK>& \fBmap\fR (void)"
.br
.RI "\fIReturns reference the Map_Manager that is being iterated over.\fR"
.ti -1c
.RI "int \fBoperator==\fR (const ACE_Map_Iterator_Base<EXT_ID, INT_ID, ACE_LOCK> &) const"
.br
.RI "\fICheck if two iterators point to the same position.\fR"
.ti -1c
.RI "int \fBoperator!=\fR (const ACE_Map_Iterator_Base<EXT_ID, INT_ID, ACE_LOCK> &) const"
.br
.in -1c
.SS Public Attributes

.in +1c
.ti -1c
.RI "\fBACE_ALLOC_HOOK_DECLARE\fR"
.br
.RI "\fIDeclare the dynamic allocation hooks.\fR"
.in -1c
.SS Protected Methods

.in +1c
.ti -1c
.RI "int \fBforward_i\fR (void)"
.br
.RI "\fIMove forward by one element in the set. Returns 0 when there's no more item in the set after the current items, else 1.\fR"
.ti -1c
.RI "int \fBreverse_i\fR (void)"
.br
.RI "\fIMove backware by one element in the set. Returns 0 when there's no more item in the set before the current item, else 1.\fR"
.ti -1c
.RI "void \fBdump_i\fR (void) const"
.br
.RI "\fIDump the state of an object.\fR"
.in -1c
.SS Protected Attributes

.in +1c
.ti -1c
.RI "\fBACE_Map_Manager\fR<EXT_ID, INT_ID, ACE_LOCK>* \fBmap_man_\fR"
.br
.RI "\fIMap we are iterating over.\fR"
.ti -1c
.RI "ACE_UINT32 \fBnext_\fR"
.br
.RI "\fIKeeps track of how far we've advanced...\fR"
.in -1c
.SH DETAILED DESCRIPTION
.PP 

.SS template<class EXT_ID, class INT_ID, class ACE_LOCK>  template class ACE_Map_Iterator_Base
Iterator for the .
.PP
.PP
 This class factors out common code from its templatized subclasses. 
.PP
.SH CONSTRUCTOR & DESTRUCTOR DOCUMENTATION
.PP 
.SS template<classEXT_ID, classINT_ID, classACE_LOCK> ACE_Map_Iterator_Base<EXT_ID, INT_ID, ACE_LOCK>::ACE_Map_Iterator_Base<EXT_ID, INT_ID, ACE_LOCK> (\fBACE_Map_Manager\fR< EXT_ID,INT_ID,ACE_LOCK >& mm)
.PP
Contructor. If head != 0, the iterator constructed is positioned at the head of the map, it is positioned at the end otherwise.
.PP
.SH MEMBER FUNCTION DOCUMENTATION
.PP 
.SS template<classEXT_ID, classINT_ID, classACE_LOCK> int ACE_Map_Iterator_Base<EXT_ID, INT_ID, ACE_LOCK>::done (void) const
.PP
Returns 1 when all items have been seen, else 0.
.PP
.SS template<classEXT_ID, classINT_ID, classACE_LOCK> void ACE_Map_Iterator_Base<EXT_ID, INT_ID, ACE_LOCK>::dump_i (void) const\fC [protected]\fR
.PP
Dump the state of an object.
.PP
.SS template<classEXT_ID, classINT_ID, classACE_LOCK> int ACE_Map_Iterator_Base<EXT_ID, INT_ID, ACE_LOCK>::forward_i (void)\fC [protected]\fR
.PP
Move forward by one element in the set. Returns 0 when there's no more item in the set after the current items, else 1.
.PP
.SS template<classEXT_ID, classINT_ID, classACE_LOCK> \fBACE_Map_Manager\fR< EXT_ID,INT_ID,ACE_LOCK >& ACE_Map_Iterator_Base<EXT_ID, INT_ID, ACE_LOCK>::map (void)
.PP
Returns reference the Map_Manager that is being iterated over.
.PP
.SS template<classEXT_ID, classINT_ID, classACE_LOCK> int ACE_Map_Iterator_Base<EXT_ID, INT_ID, ACE_LOCK>::next (\fBACE_Map_Entry\fR< EXT_ID,INT_ID >*& next_entry) const
.PP
Pass back the next <entry> that hasn't been seen in the Set. Returns 0 when all items have been seen, else 1.
.PP
.SS template<classEXT_ID, classINT_ID, classACE_LOCK> \fBACE_Map_Entry\fR< EXT_ID,INT_ID >& ACE_Map_Iterator_Base<EXT_ID, INT_ID, ACE_LOCK>::operator * (void) const
.PP
Returns a reference to the interal element <this> is pointing to.
.PP
.SS template<classEXT_ID, classINT_ID, classACE_LOCK> int ACE_Map_Iterator_Base<EXT_ID, INT_ID, ACE_LOCK>::operator!= (const ACE_Map_Iterator_Base< EXT_ID,INT_ID,ACE_LOCK >&) const
.PP
.SS template<classEXT_ID, classINT_ID, classACE_LOCK> int ACE_Map_Iterator_Base<EXT_ID, INT_ID, ACE_LOCK>::operator== (const ACE_Map_Iterator_Base< EXT_ID,INT_ID,ACE_LOCK >&) const
.PP
Check if two iterators point to the same position.
.PP
.SS template<classEXT_ID, classINT_ID, classACE_LOCK> int ACE_Map_Iterator_Base<EXT_ID, INT_ID, ACE_LOCK>::reverse_i (void)\fC [protected]\fR
.PP
Move backware by one element in the set. Returns 0 when there's no more item in the set before the current item, else 1.
.PP
.SH MEMBER DATA DOCUMENTATION
.PP 
.SS template<classEXT_ID, classINT_ID, classACE_LOCK> ACE_Map_Iterator_Base<EXT_ID, INT_ID, ACE_LOCK>::ACE_ALLOC_HOOK_DECLARE
.PP
Declare the dynamic allocation hooks.
.PP
Reimplemented in \fBACE_Map_Iterator\fR, and \fBACE_Map_Reverse_Iterator\fR.
.SS template<classEXT_ID, classINT_ID, classACE_LOCK> \fBACE_Map_Manager\fR< EXT_ID,INT_ID,ACE_LOCK >* ACE_Map_Iterator_Base<EXT_ID, INT_ID, ACE_LOCK>::map_man_\fC [protected]\fR
.PP
Map we are iterating over.
.PP
.SS template<classEXT_ID, classINT_ID, classACE_LOCK> ACE_UINT32 ACE_Map_Iterator_Base<EXT_ID, INT_ID, ACE_LOCK>::next_\fC [protected]\fR
.PP
Keeps track of how far we've advanced...
.PP


.SH AUTHOR
.PP 
Generated automatically by Doxygen for ACE from the source code.