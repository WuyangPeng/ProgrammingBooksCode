.TH ACE_SPIPE_Addr 3 "5 Oct 2001" "ACE" \" -*- nroff -*-
.ad l
.nh
.SH NAME
ACE_SPIPE_Addr \- Defines the SVR4 \fBSTREAM\fR pipe address family address format. 
.SH SYNOPSIS
.br
.PP
\fC#include <SPIPE_Addr.h>\fR
.PP
Inherits \fBACE_Addr\fR.
.PP
.SS Public Methods

.in +1c
.ti -1c
.RI "\fBACE_SPIPE_Addr\fR (void)"
.br
.RI "\fIDefault constructor.\fR"
.ti -1c
.RI "\fBACE_SPIPE_Addr\fR (const ACE_SPIPE_Addr &sa)"
.br
.RI "\fICopy constructor.\fR"
.ti -1c
.RI "\fBACE_SPIPE_Addr\fR (const \fBACE_TCHAR\fR *rendezvous_point, \fBgid_t\fR = 0, \fBuid_t\fR = 0)"
.br
.RI "\fICreate a ACE_SPIPE_Addr from a rendezvous point in the file system.\fR"
.ti -1c
.RI "int \fBset\fR (const ACE_SPIPE_Addr &sa)"
.br
.RI "\fIActs like a copy constructor...\fR"
.ti -1c
.RI "int \fBset\fR (const \fBACE_TCHAR\fR *rendezvous_point, \fBgid_t\fR = 0, \fBuid_t\fR = 0)"
.br
.RI "\fICreate a ACE_SPIPE_Addr from a rendezvous point in the file system.\fR"
.ti -1c
.RI "virtual void* \fBget_addr\fR (void) const"
.br
.RI "\fIReturn a pointer to the address.\fR"
.ti -1c
.RI "virtual void \fBset_addr\fR (void *addr, int len)"
.br
.RI "\fISet a pointer to the underlying network address.\fR"
.ti -1c
.RI "virtual int \fBaddr_to_string\fR (\fBACE_TCHAR\fR *addr, size_t) const"
.br
.RI "\fITransform the current address into string format.\fR"
.ti -1c
.RI "virtual int \fBstring_to_addr\fR (const \fBACE_TCHAR\fR *addr)"
.br
.RI "\fITransform the string into the current addressing format.\fR"
.ti -1c
.RI "int \fBoperator==\fR (const ACE_SPIPE_Addr &SAP) const"
.br
.RI "\fICheck for equality.\fR"
.ti -1c
.RI "int \fBoperator!=\fR (const ACE_SPIPE_Addr &SAP) const"
.br
.RI "\fICheck for inequality.\fR"
.ti -1c
.RI "const \fBACE_TCHAR\fR* \fBget_path_name\fR (void) const"
.br
.RI "\fIPathname of rendezvous point in file system.\fR"
.ti -1c
.RI "\fBuid_t\fR \fBuser_id\fR (void) const"
.br
.RI "\fIGet user id. Set user id.\fR"
.ti -1c
.RI "void \fBuser_id\fR (\fBuid_t\fR uid)"
.br
.ti -1c
.RI "void \fBgroup_id\fR (\fBgid_t\fR gid)"
.br
.RI "\fISet group ids. Get group ids.\fR"
.ti -1c
.RI "\fBgid_t\fR \fBgroup_id\fR (void) const"
.br
.ti -1c
.RI "void \fBdump\fR (void) const"
.br
.RI "\fIDump the state of an object.\fR"
.in -1c
.SS Public Attributes

.in +1c
.ti -1c
.RI "\fBACE_ALLOC_HOOK_DECLARE\fR"
.br
.RI "\fIDeclare the dynamic allocation hooks.\fR"
.in -1c
.SS Private Attributes

.in +1c
.ti -1c
.RI "struct \fBACE_SPIPE_Addr::SPIPE_Addr\fR  \fBSPIPE_addr_\fR"
.br
.RI "\fIContains security attributes.\fR"
.in -1c
.SH DETAILED DESCRIPTION
.PP 
Defines the SVR4 \fBSTREAM\fR pipe address family address format.
.PP
.SH CONSTRUCTOR & DESTRUCTOR DOCUMENTATION
.PP 
.SS ACE_SPIPE_Addr::ACE_SPIPE_Addr (void)
.PP
Default constructor.
.PP
.SS ACE_SPIPE_Addr::ACE_SPIPE_Addr (const ACE_SPIPE_Addr & sa)
.PP
Copy constructor.
.PP
.SS ACE_SPIPE_Addr::ACE_SPIPE_Addr (const \fBACE_TCHAR\fR * rendezvous_point, \fBgid_t\fR = 0, \fBuid_t\fR = 0)
.PP
Create a ACE_SPIPE_Addr from a rendezvous point in the file system.
.PP
.SH MEMBER FUNCTION DOCUMENTATION
.PP 
.SS int ACE_SPIPE_Addr::addr_to_string (\fBACE_TCHAR\fR * addr, size_t) const\fC [virtual]\fR
.PP
Transform the current address into string format.
.PP
.SS void ACE_SPIPE_Addr::dump (void) const
.PP
Dump the state of an object.
.PP
Reimplemented from \fBACE_Addr\fR.
.SS void * ACE_SPIPE_Addr::get_addr (void) const\fC [virtual]\fR
.PP
Return a pointer to the address.
.PP
Reimplemented from \fBACE_Addr\fR.
.SS const \fBACE_TCHAR\fR * ACE_SPIPE_Addr::get_path_name (void) const
.PP
Pathname of rendezvous point in file system.
.PP
.SS \fBgid_t\fR ACE_SPIPE_Addr::group_id (void) const
.PP
.SS void ACE_SPIPE_Addr::group_id (\fBgid_t\fR gid)
.PP
Set group ids. Get group ids.
.PP
.SS int ACE_SPIPE_Addr::operator!= (const ACE_SPIPE_Addr & SAP) const
.PP
Check for inequality.
.PP
.SS int ACE_SPIPE_Addr::operator== (const ACE_SPIPE_Addr & SAP) const
.PP
Check for equality.
.PP
.SS int ACE_SPIPE_Addr::set (const \fBACE_TCHAR\fR * rendezvous_point, \fBgid_t\fR = 0, \fBuid_t\fR = 0)
.PP
Create a ACE_SPIPE_Addr from a rendezvous point in the file system.
.PP
.SS int ACE_SPIPE_Addr::set (const ACE_SPIPE_Addr & sa)
.PP
Acts like a copy constructor...
.PP
.SS void ACE_SPIPE_Addr::set_addr (void * addr, int len)\fC [virtual]\fR
.PP
Set a pointer to the underlying network address.
.PP
Reimplemented from \fBACE_Addr\fR.
.SS int ACE_SPIPE_Addr::string_to_addr (const \fBACE_TCHAR\fR * addr)\fC [virtual]\fR
.PP
Transform the string into the current addressing format.
.PP
.SS void ACE_SPIPE_Addr::user_id (\fBuid_t\fR uid)
.PP
.SS \fBuid_t\fR ACE_SPIPE_Addr::user_id (void) const
.PP
Get user id. Set user id.
.PP
.SH MEMBER DATA DOCUMENTATION
.PP 
.SS ACE_SPIPE_Addr::ACE_ALLOC_HOOK_DECLARE
.PP
Declare the dynamic allocation hooks.
.PP
Reimplemented from \fBACE_Addr\fR.
.SS struct \fBACE_SPIPE_Addr::SPIPE_Addr\fR ACE_SPIPE_Addr::SPIPE_addr_\fC [private]\fR
.PP
Contains security attributes.
.PP


.SH AUTHOR
.PP 
Generated automatically by Doxygen for ACE from the source code.