.TH ACE_Unbounded_Queue_Iterator 3 "5 Oct 2001" "ACE" \" -*- nroff -*-
.ad l
.nh
.SH NAME
ACE_Unbounded_Queue_Iterator \- Implement an iterator over an unbounded queue. 
.SH SYNOPSIS
.br
.PP
\fC#include <Unbounded_Queue.h>\fR
.PP
.SS Public Methods

.in +1c
.ti -1c
.RI "\fBACE_Unbounded_Queue_Iterator\fR (\fBACE_Unbounded_Queue\fR<T> &q, int end = 0)"
.br
.ti -1c
.RI "int \fBnext\fR (T *&next_item)"
.br
.RI "\fIPass back the <next_item> that hasn't been seen in the queue. Returns 0 when all items have been seen, else 1.\fR"
.ti -1c
.RI "int \fBadvance\fR (void)"
.br
.RI "\fIMove forward by one element in the set. Returns 0 when all the items in the queue have been seen, else 1.\fR"
.ti -1c
.RI "int \fBfirst\fR (void)"
.br
.RI "\fIMove to the first element in the queue. Returns 0 if the queue is empty, else 1.\fR"
.ti -1c
.RI "int \fBdone\fR (void) const"
.br
.RI "\fIReturns 1 when all items have been seen, else 0.\fR"
.ti -1c
.RI "void \fBdump\fR (void) const"
.br
.RI "\fIDump the state of an object.\fR"
.in -1c
.SS Public Attributes

.in +1c
.ti -1c
.RI "\fBACE_ALLOC_HOOK_DECLARE\fR"
.br
.RI "\fIDeclare the dynamic allocation hooks.\fR"
.in -1c
.SS Private Attributes

.in +1c
.ti -1c
.RI "\fBACE_Node\fR<T>* \fBcurrent_\fR"
.br
.RI "\fIPointer to the current node in the iteration.\fR"
.ti -1c
.RI "\fBACE_Unbounded_Queue\fR<T>& \fBqueue_\fR"
.br
.RI "\fIPointer to the queue we're iterating over.\fR"
.in -1c
.SH DETAILED DESCRIPTION
.PP 

.SS template<class T>  template class ACE_Unbounded_Queue_Iterator
Implement an iterator over an unbounded queue.
.PP
.SH CONSTRUCTOR & DESTRUCTOR DOCUMENTATION
.PP 
.SS template<classT> ACE_Unbounded_Queue_Iterator<T>::ACE_Unbounded_Queue_Iterator<T> (\fBACE_Unbounded_Queue\fR< T >& q, int end = 0)
.PP
.SH MEMBER FUNCTION DOCUMENTATION
.PP 
.SS template<classT> int ACE_Unbounded_Queue_Iterator<T>::advance (void)
.PP
Move forward by one element in the set. Returns 0 when all the items in the queue have been seen, else 1.
.PP
.SS template<classT> int ACE_Unbounded_Queue_Iterator<T>::done (void) const
.PP
Returns 1 when all items have been seen, else 0.
.PP
.SS template<classT> void ACE_Unbounded_Queue_Iterator<T>::dump (void) const
.PP
Dump the state of an object.
.PP
.SS template<classT> int ACE_Unbounded_Queue_Iterator<T>::first (void)
.PP
Move to the first element in the queue. Returns 0 if the queue is empty, else 1.
.PP
.SS template<classT> int ACE_Unbounded_Queue_Iterator<T>::next (T *& next_item)
.PP
Pass back the <next_item> that hasn't been seen in the queue. Returns 0 when all items have been seen, else 1.
.PP
.SH MEMBER DATA DOCUMENTATION
.PP 
.SS template<classT> ACE_Unbounded_Queue_Iterator<T>::ACE_ALLOC_HOOK_DECLARE
.PP
Declare the dynamic allocation hooks.
.PP
.SS template<classT> \fBACE_Node\fR< T >* ACE_Unbounded_Queue_Iterator<T>::current_\fC [private]\fR
.PP
Pointer to the current node in the iteration.
.PP
.SS template<classT> \fBACE_Unbounded_Queue\fR< T >& ACE_Unbounded_Queue_Iterator<T>::queue_\fC [private]\fR
.PP
Pointer to the queue we're iterating over.
.PP


.SH AUTHOR
.PP 
Generated automatically by Doxygen for ACE from the source code.