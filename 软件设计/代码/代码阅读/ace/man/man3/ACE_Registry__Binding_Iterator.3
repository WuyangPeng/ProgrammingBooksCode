.TH ACE_Registry::Binding_Iterator 3 "5 Oct 2001" "ACE" \" -*- nroff -*-
.ad l
.nh
.SH NAME
ACE_Registry::Binding_Iterator \- An iterator. 
.SH SYNOPSIS
.br
.PP
\fC#include <Registry.h>\fR
.PP
.SS Public Methods

.in +1c
.ti -1c
.RI "\fBBinding_Iterator\fR (void)"
.br
.RI "\fIDefault constructor.\fR"
.ti -1c
.RI "int \fBnext_one\fR (\fBBinding\fR &binding)"
.br
.RI "\fINext entry.\fR"
.ti -1c
.RI "int \fBnext_n\fR (u_long how_many, \fBBinding_List\fR &list)"
.br
.RI "\fINext <how_many> entries.\fR"
.ti -1c
.RI "int \fBdestroy\fR (void)"
.br
.RI "\fICleanup.\fR"
.ti -1c
.RI "void \fBreset\fR (void)"
.br
.RI "\fIReset the internal state of the iterator.\fR"
.ti -1c
.RI "\fBNaming_Context\fR& \fBnaming_context\fR (void)"
.br
.RI "\fIGet naming_context that the iterator is iterating over.\fR"
.in -1c
.SS Private Methods

.in +1c
.ti -1c
.RI "void \fBnaming_context\fR (\fBNaming_Context\fR& naming_context)"
.br
.RI "\fISet naming_context that the iterator is iterating over.\fR"
.ti -1c
.RI "void \fBcurrent_enumeration\fR (\fBIteration_State\fR& current_enumeration)"
.br
.RI "\fISet/Get current_enumeration.\fR"
.ti -1c
.RI "\fBIteration_State\fR& \fBcurrent_enumeration\fR (void)"
.br
.in -1c
.SS Private Attributes

.in +1c
.ti -1c
.RI "\fBNaming_Context\fR* \fBnaming_context_\fR"
.br
.RI "\fIReference to context.\fR"
.ti -1c
.RI "\fBObject_Iteration\fR \fBobject_iteration_\fR"
.br
.RI "\fIInstances of all states.\fR"
.ti -1c
.RI "\fBContext_Iteration\fR \fBcontext_iteration_\fR"
.br
.ti -1c
.RI "\fBIteration_Complete\fR \fBiteration_complete_\fR"
.br
.ti -1c
.RI "\fBIteration_State\fR* \fBcurrent_enumeration_\fR"
.br
.RI "\fIPointer to current state.\fR"
.in -1c
.SS Friends

.in +1c
.ti -1c
.RI "class \fBNaming_Context\fR"
.br
.ti -1c
.RI "class \fBIteration_State\fR"
.br
.ti -1c
.RI "class \fBObject_Iteration\fR"
.br
.ti -1c
.RI "class \fBContext_Iteration\fR"
.br
.ti -1c
.RI "class \fBIteration_Complete\fR"
.br
.in -1c
.SH DETAILED DESCRIPTION
.PP 
An iterator.
.PP
Forward declaration of iterator 
.PP
.SH CONSTRUCTOR & DESTRUCTOR DOCUMENTATION
.PP 
.SS ACE_Registry::Binding_Iterator::Binding_Iterator (void)
.PP
Default constructor.
.PP
.SH MEMBER FUNCTION DOCUMENTATION
.PP 
.SS \fBIteration_State\fR& ACE_Registry::Binding_Iterator::current_enumeration (void)\fC [private]\fR
.PP
.SS void ACE_Registry::Binding_Iterator::current_enumeration (\fBIteration_State\fR & current_enumeration)\fC [private]\fR
.PP
Set/Get current_enumeration.
.PP
.SS int ACE_Registry::Binding_Iterator::destroy (void)
.PP
Cleanup.
.PP
.SS void ACE_Registry::Binding_Iterator::naming_context (\fBNaming_Context\fR & naming_context)\fC [private]\fR
.PP
Set naming_context that the iterator is iterating over.
.PP
.SS \fBNaming_Context\fR & ACE_Registry::Binding_Iterator::naming_context (void)
.PP
Get naming_context that the iterator is iterating over.
.PP
.SS int ACE_Registry::Binding_Iterator::next_n (u_long how_many, \fBBinding_List\fR & list)
.PP
Next <how_many> entries.
.PP
.SS int ACE_Registry::Binding_Iterator::next_one (\fBBinding\fR & binding)
.PP
Next entry.
.PP
.SS void ACE_Registry::Binding_Iterator::reset (void)
.PP
Reset the internal state of the iterator.
.PP
.SH FRIENDS AND RELATED FUNCTION DOCUMENTATION
.PP 
.SS class Context_Iteration\fC [friend]\fR
.PP
.SS class Iteration_Complete\fC [friend]\fR
.PP
.SS class Iteration_State\fC [friend]\fR
.PP
Friend states.
.PP
.SS class Naming_Context\fC [friend]\fR
.PP
Friend factory.
.PP
.SS class Object_Iteration\fC [friend]\fR
.PP
.SH MEMBER DATA DOCUMENTATION
.PP 
.SS \fBContext_Iteration\fR ACE_Registry::Binding_Iterator::context_iteration_\fC [private]\fR
.PP
.SS \fBIteration_State\fR * ACE_Registry::Binding_Iterator::current_enumeration_\fC [private]\fR
.PP
Pointer to current state.
.PP
.SS \fBIteration_Complete\fR ACE_Registry::Binding_Iterator::iteration_complete_\fC [private]\fR
.PP
.SS \fBNaming_Context\fR * ACE_Registry::Binding_Iterator::naming_context_\fC [private]\fR
.PP
Reference to context.
.PP
.SS \fBObject_Iteration\fR ACE_Registry::Binding_Iterator::object_iteration_\fC [private]\fR
.PP
Instances of all states.
.PP


.SH AUTHOR
.PP 
Generated automatically by Doxygen for ACE from the source code.