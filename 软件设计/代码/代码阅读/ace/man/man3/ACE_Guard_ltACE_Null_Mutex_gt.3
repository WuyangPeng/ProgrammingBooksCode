.TH ACE_Guard< ACE_Null_Mutex > 3 "5 Oct 2001" "ACE" \" -*- nroff -*-
.ad l
.nh
.SH NAME
ACE_Guard< ACE_Null_Mutex > \- Template specialization of  for the . 
.SH SYNOPSIS
.br
.PP
\fC#include <Synch.h>\fR
.PP
Inherited by \fBACE_Read_Guard< ACE_Null_Mutex >\fR, and \fBACE_Write_Guard< ACE_Null_Mutex >\fR.
.PP
.SS Public Methods

.in +1c
.ti -1c
.RI "\fBACE_Guard\fR (\fBACE_Null_Mutex\fR &)"
.br
.ti -1c
.RI "\fBACE_Guard\fR (\fBACE_Null_Mutex\fR &, int)"
.br
.ti -1c
.RI "\fB~ACE_Guard\fR (void)"
.br
.ti -1c
.RI "int \fBacquire\fR (void)"
.br
.ti -1c
.RI "int \fBtryacquire\fR (void)"
.br
.ti -1c
.RI "int \fBrelease\fR (void)"
.br
.ti -1c
.RI "int \fBlocked\fR (void)"
.br
.ti -1c
.RI "int \fBremove\fR (void)"
.br
.ti -1c
.RI "void \fBdump\fR (void) const"
.br
.in -1c
.SS Private Methods

.in +1c
.ti -1c
.RI "void \fBoperator=\fR (const \fBACE_Guard\fR<\fBACE_Null_Mutex\fR> &)"
.br
.ti -1c
.RI "\fBACE_Guard\fR (const ACE_Guard<\fBACE_Null_Mutex\fR> &)"
.br
.in -1c
.SH DETAILED DESCRIPTION
.PP 
Template specialization of  for the .
.PP
.PP
 This specialization is useful since it helps to speedup performance of the "Null_Mutex" considerably. 
.PP
.SH CONSTRUCTOR & DESTRUCTOR DOCUMENTATION
.PP 
.SS \fBACE_Guard\fR< \fBACE_Null_Mutex\fR >::~\fBACE_Guard\fR< \fBACE_Null_Mutex\fR > (void)\fC [inline]\fR
.PP
.SH MEMBER FUNCTION DOCUMENTATION
.PP 
.SS ACE_Guard< \fBACE_Null_Mutex\fR >::ACE_Guard< \fBACE_Null_Mutex\fR > (const ACE_Guard< \fBACE_Null_Mutex\fR >&)\fC [private]\fR
.PP
.SS ACE_Guard< \fBACE_Null_Mutex\fR >::ACE_Guard< \fBACE_Null_Mutex\fR > (\fBACE_Null_Mutex\fR &, int)\fC [inline]\fR
.PP
.SS ACE_Guard< \fBACE_Null_Mutex\fR >::ACE_Guard< \fBACE_Null_Mutex\fR > (\fBACE_Null_Mutex\fR &)\fC [inline]\fR
.PP
.SS int \fBACE_Guard\fR< \fBACE_Null_Mutex\fR >::acquire (void)\fC [inline]\fR
.PP
Reimplemented in \fBACE_Write_Guard< ACE_Null_Mutex >\fR, and \fBACE_Read_Guard< ACE_Null_Mutex >\fR.
.SS void \fBACE_Guard\fR< \fBACE_Null_Mutex\fR >::dump (void) const\fC [inline]\fR
.PP
Reimplemented in \fBACE_Write_Guard< ACE_Null_Mutex >\fR, and \fBACE_Read_Guard< ACE_Null_Mutex >\fR.
.SS int \fBACE_Guard\fR< \fBACE_Null_Mutex\fR >::locked (void)\fC [inline]\fR
.PP
.SS void \fBACE_Guard\fR< \fBACE_Null_Mutex\fR >::operator= (const \fBACE_Guard\fR< \fBACE_Null_Mutex\fR >&)\fC [private]\fR
.PP
.SS int \fBACE_Guard\fR< \fBACE_Null_Mutex\fR >::release (void)\fC [inline]\fR
.PP
.SS int \fBACE_Guard\fR< \fBACE_Null_Mutex\fR >::remove (void)\fC [inline]\fR
.PP
.SS int \fBACE_Guard\fR< \fBACE_Null_Mutex\fR >::tryacquire (void)\fC [inline]\fR
.PP
Reimplemented in \fBACE_Write_Guard< ACE_Null_Mutex >\fR, and \fBACE_Read_Guard< ACE_Null_Mutex >\fR.

.SH AUTHOR
.PP 
Generated automatically by Doxygen for ACE from the source code.