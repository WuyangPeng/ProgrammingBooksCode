.TH ACE_Singleton 3 "5 Oct 2001" "ACE" \" -*- nroff -*-
.ad l
.nh
.SH NAME
ACE_Singleton \- A Singleton Adapter uses the Adapter pattern to turn ordinary classes into Singletons optimized with the Double-Checked Locking optimization pattern. 
.SH SYNOPSIS
.br
.PP
\fC#include <Singleton.h>\fR
.PP
Inherits \fBACE_Cleanup\fR.
.PP
Inherited by \fBACE_Unmanaged_Singleton\fR.
.PP
.SS Public Methods

.in +1c
.ti -1c
.RI "virtual void \fBcleanup\fR (void *param = 0)"
.br
.RI "\fICleanup method, used by  to destroy the .\fR"
.in -1c
.SS Static Public Methods

.in +1c
.ti -1c
.RI "TYPE* \fBinstance\fR (void)"
.br
.RI "\fIGlobal access point to the Singleton.\fR"
.ti -1c
.RI "void \fBdump\fR (void)"
.br
.RI "\fIDump the state of the object.\fR"
.in -1c
.SS Protected Methods

.in +1c
.ti -1c
.RI "\fBACE_Singleton\fR (void)"
.br
.RI "\fIDefault constructor.\fR"
.in -1c
.SS Protected Attributes

.in +1c
.ti -1c
.RI "TYPE \fBinstance_\fR"
.br
.RI "\fIContained instance.\fR"
.in -1c
.SS Static Protected Methods

.in +1c
.ti -1c
.RI "ACE_Singleton<TYPE, ACE_LOCK>*& \fBinstance_i\fR (void)"
.br
.RI "\fIGet pointer to the Singleton instance.\fR"
.in -1c
.SS Static Protected Attributes

.in +1c
.ti -1c
.RI "ACE_Singleton<TYPE, ACE_LOCK>* \fBsingleton_\fR"
.br
.RI "\fIPointer to the Singleton (\fBACE_Cleanup\fR) instance.\fR"
.in -1c
.SH DETAILED DESCRIPTION
.PP 

.SS template<class TYPE, class ACE_LOCK>  template class ACE_Singleton
A Singleton Adapter uses the Adapter pattern to turn ordinary classes into Singletons optimized with the Double-Checked Locking optimization pattern.
.PP
.PP
 This implementation is a slight variation on the GoF Singleton pattern. In particular, a single  > instance is allocated here, not a <TYPE> instance. The reason for this is to allow registration with the , so that the Singleton can be cleaned up when the process exits. For this scheme to work, a (static) <cleanup> function must be provided.  provides one so that TYPE doesn't need to. If you want to make sure that only the singleton instance of <T> is created, and that users cannot create their own instances of <T>, do the following to class <T>: (a) Make the constructor of <T> private (or protected) (b) Make Singleton a friend of <T> Here is an example: 
.PP
.nf

 * class foo
 * {
 * friend class ACE_Singleton<foo, ACE_Null_Mutex>;
 * private:
 * foo () { cout << "foo constructed" << endl; }
 * ~foo () { cout << "foo destroyed" << endl; }
 * };
 * typedef ACE_Singleton<foo, ACE_Null_Mutex> FOO;
 * 
.fi
.PP
NOTE: the best types to use for ACE_LOCK are \fBACE_Recursive_Thread_Mutex\fR and \fBACE_Null_Mutex\fR. \fBACE_Recursive_Thread_Mutex\fR should be used in multi-threaded programs in which it is possible for more than one thread to access the > instance. \fBACE_Null_Mutex\fR can be used otherwise. The reason that these types of locks are best has to do with their allocation by the \fBACE_Object_Manager\fR. Single \fBACE_Recursive_Thread_Mutex\fR and \fBACE_Null_Mutex\fR instances are used for all ACE_Singleton instantiations. However, other types of locks are allocated per ACE_Singleton instantiation. 
.PP
.SH CONSTRUCTOR & DESTRUCTOR DOCUMENTATION
.PP 
.SS template<classTYPE, classACE_LOCK> ACE_Singleton<TYPE, ACE_LOCK>::ACE_Singleton<TYPE, ACE_LOCK> (void)\fC [protected]\fR
.PP
Default constructor.
.PP
.SH MEMBER FUNCTION DOCUMENTATION
.PP 
.SS template<classTYPE, classACE_LOCK> void ACE_Singleton<TYPE, ACE_LOCK>::cleanup (void * param = 0)\fC [virtual]\fR
.PP
Cleanup method, used by  to destroy the .
.PP
Reimplemented from \fBACE_Cleanup\fR.
.SS template<classTYPE, classACE_LOCK> void ACE_Singleton<TYPE, ACE_LOCK>::dump (void)\fC [static]\fR
.PP
Dump the state of the object.
.PP
Reimplemented in \fBACE_Unmanaged_Singleton\fR.
.SS template<classTYPE, classACE_LOCK> TYPE * ACE_Singleton<TYPE, ACE_LOCK>::instance (void)\fC [static]\fR
.PP
Global access point to the Singleton.
.PP
Reimplemented in \fBACE_Unmanaged_Singleton\fR.
.SS template<classTYPE, classACE_LOCK> ACE_Singleton< TYPE,ACE_LOCK >*& ACE_Singleton<TYPE, ACE_LOCK>::instance_i (void)\fC [static, protected]\fR
.PP
Get pointer to the Singleton instance.
.PP
Reimplemented in \fBACE_Unmanaged_Singleton\fR.
.SH MEMBER DATA DOCUMENTATION
.PP 
.SS template<classTYPE, classACE_LOCK> TYPE ACE_Singleton<TYPE, ACE_LOCK>::instance_\fC [protected]\fR
.PP
Contained instance.
.PP
.SS template<classTYPE, classACE_LOCK> ACE_Singleton< TYPE,ACE_LOCK >* ACE_Singleton<TYPE, ACE_LOCK>::singleton_\fC [static, protected]\fR
.PP
Pointer to the Singleton (\fBACE_Cleanup\fR) instance.
.PP
Reimplemented in \fBACE_Unmanaged_Singleton\fR.

.SH AUTHOR
.PP 
Generated automatically by Doxygen for ACE from the source code.