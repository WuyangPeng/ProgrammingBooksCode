.TH ACE_Dynamic 3 "5 Oct 2001" "ACE" \" -*- nroff -*-
.ad l
.nh
.SH NAME
ACE_Dynamic \- Checks to see if an object was dynamically allocated. 
.SH SYNOPSIS
.br
.PP
\fC#include <Dynamic.h>\fR
.PP
.SS Public Methods

.in +1c
.ti -1c
.RI "\fBACE_Dynamic\fR (void)"
.br
.RI "\fIConstructor.\fR"
.ti -1c
.RI "\fB~ACE_Dynamic\fR (void)"
.br
.RI "\fIDestructor.\fR"
.ti -1c
.RI "void \fBset\fR (void)"
.br
.ti -1c
.RI "int \fBis_dynamic\fR (void)"
.br
.RI "\fI1 if we were allocated dynamically, else 0.\fR"
.ti -1c
.RI "void \fBreset\fR (void)"
.br
.RI "\fIResets state flag.\fR"
.in -1c
.SS Static Public Methods

.in +1c
.ti -1c
.RI "ACE_Dynamic* \fBinstance\fR (void)"
.br
.in -1c
.SS Private Attributes

.in +1c
.ti -1c
.RI "int \fBis_dynamic_\fR"
.br
.in -1c
.SH DETAILED DESCRIPTION
.PP 
Checks to see if an object was dynamically allocated.
.PP
.PP
 This class holds the pointer in a thread-safe manner between the call to operator new and the call to the constructor. 
.PP
.SH CONSTRUCTOR & DESTRUCTOR DOCUMENTATION
.PP 
.SS ACE_Dynamic::ACE_Dynamic (void)
.PP
Constructor.
.PP
.SS ACE_Dynamic::~ACE_Dynamic (void)
.PP
Destructor.
.PP
.SH MEMBER FUNCTION DOCUMENTATION
.PP 
.SS ACE_Dynamic* ACE_Dynamic::instance (void)\fC [static]\fR
.PP
.SS int ACE_Dynamic::is_dynamic (void)
.PP
1 if we were allocated dynamically, else 0.
.PP
.SS void ACE_Dynamic::reset (void)
.PP
Resets state flag.
.PP
.SS void ACE_Dynamic::set (void)
.PP
Sets a flag that indicates that the object was dynamically created. This method is usually called in operator new and then checked and reset in the constructor. 
.SH MEMBER DATA DOCUMENTATION
.PP 
.SS int ACE_Dynamic::is_dynamic_\fC [private]\fR
.PP
Flag that indicates that the object was dynamically created. This method is usually called in operator new and then checked and reset in the constructor. 

.SH AUTHOR
.PP 
Generated automatically by Doxygen for ACE from the source code.