.TH ACE_Command_Base 3 "5 Oct 2001" "ACE" \" -*- nroff -*-
.ad l
.nh
.SH NAME
ACE_Command_Base \- Defines an abstract class that allows us to invoke commands without knowing anything about the implementation. 
.SH SYNOPSIS
.br
.PP
\fC#include <Functor.h>\fR
.PP
Inherited by \fBACE_Command_Callback\fR.
.PP
.SS Public Methods

.in +1c
.ti -1c
.RI "\fBACE_Command_Base\fR (void)"
.br
.RI "\fIDefault constructor.\fR"
.ti -1c
.RI "virtual \fB~ACE_Command_Base\fR (void)"
.br
.RI "\fIVirtaul destructor.\fR"
.ti -1c
.RI "virtual int \fBexecute\fR (void *arg = 0) = 0"
.br
.in -1c
.SH DETAILED DESCRIPTION
.PP 
Defines an abstract class that allows us to invoke commands without knowing anything about the implementation.
.PP
.PP
 This class declares an interface to execute a command independent of the effect of the command, or the objects used to implement it. 
.PP
.SH CONSTRUCTOR & DESTRUCTOR DOCUMENTATION
.PP 
.SS ACE_Command_Base::ACE_Command_Base (void)
.PP
Default constructor.
.PP
.SS ACE_Command_Base::~ACE_Command_Base (void)\fC [virtual]\fR
.PP
Virtaul destructor.
.PP
.SH MEMBER FUNCTION DOCUMENTATION
.PP 
.SS int ACE_Command_Base::execute (void * arg = 0)\fC [pure virtual]\fR
.PP
Invokes the method encapsulated by the command, passing along the passed argument (if any). Users of classes derived from this class must ensure that the resulting invocation can tolerate a null void pointer being passed, or otherwise ensure that this will never occur. 
.PP
Reimplemented in \fBACE_Command_Callback\fR.

.SH AUTHOR
.PP 
Generated automatically by Doxygen for ACE from the source code.