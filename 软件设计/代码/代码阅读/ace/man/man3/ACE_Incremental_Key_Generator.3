.TH ACE_Incremental_Key_Generator 3 "5 Oct 2001" "ACE" \" -*- nroff -*-
.ad l
.nh
.SH NAME
ACE_Incremental_Key_Generator \- Defines a simple incremental key generator. 
.SH SYNOPSIS
.br
.PP
\fC#include <Map_T.h>\fR
.PP
.SS Public Methods

.in +1c
.ti -1c
.RI "\fBACE_Incremental_Key_Generator\fR (void)"
.br
.RI "\fIConstructor.\fR"
.ti -1c
.RI "int \fBoperator()\fR (T &t)"
.br
.RI "\fIFunctor method: generates a new key.\fR"
.ti -1c
.RI "const T& \fBcurrent_value\fR (void) const"
.br
.RI "\fIReturns the current value.\fR"
.in -1c
.SS Protected Attributes

.in +1c
.ti -1c
.RI "T \fBt_\fR"
.br
.RI "\fICurrent value.\fR"
.in -1c
.SH DETAILED DESCRIPTION
.PP 

.SS template<class T>  template class ACE_Incremental_Key_Generator
Defines a simple incremental key generator.
.PP
.PP
 Generates a new key of type T by incrementing current value. Requirements on T are:
.TP
Constructor that accepts 0 in the constructor.
.TP
Prefix increment.
.TP
Assignment. Note that a primitive types such as u_long, int, etc., are suitable for this class. 
.PP
.SH CONSTRUCTOR & DESTRUCTOR DOCUMENTATION
.PP 
.SS template<classT> ACE_Incremental_Key_Generator<T>::ACE_Incremental_Key_Generator<T> (void)
.PP
Constructor.
.PP
.SH MEMBER FUNCTION DOCUMENTATION
.PP 
.SS template<classT> const T & ACE_Incremental_Key_Generator<T>::current_value (void) const
.PP
Returns the current value.
.PP
.SS template<classT> int ACE_Incremental_Key_Generator<T>::operator() (T & t)
.PP
Functor method: generates a new key.
.PP
.SH MEMBER DATA DOCUMENTATION
.PP 
.SS template<classT> T ACE_Incremental_Key_Generator<T>::t_\fC [protected]\fR
.PP
Current value.
.PP


.SH AUTHOR
.PP 
Generated automatically by Doxygen for ACE from the source code.