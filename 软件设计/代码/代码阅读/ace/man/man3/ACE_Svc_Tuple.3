.TH ACE_Svc_Tuple 3 "5 Oct 2001" "ACE" \" -*- nroff -*-
.ad l
.nh
.SH NAME
ACE_Svc_Tuple \- Holds the \fBACE_Svc_Handler\fR and its argument and  until an asynchronous connection completes. 
.SH SYNOPSIS
.br
.PP
\fC#include <Connector.h>\fR
.PP
.SS Public Methods

.in +1c
.ti -1c
.RI "\fBACE_Svc_Tuple\fR (SVC_HANDLER *, ACE_HANDLE, const void * = 0, long timer_id = -1)"
.br
.ti -1c
.RI "SVC_HANDLER* \fBsvc_handler\fR (void)"
.br
.ti -1c
.RI "ACE_HANDLE \fBhandle\fR (void)"
.br
.RI "\fIGet handle. Set handle.\fR"
.ti -1c
.RI "void \fBhandle\fR (ACE_HANDLE)"
.br
.ti -1c
.RI "const void* \fBarg\fR (void)"
.br
.RI "\fIGet argument. Set argument.\fR"
.ti -1c
.RI "void \fBarg\fR (const void *)"
.br
.ti -1c
.RI "long \fBcancellation_id\fR (void)"
.br
.RI "\fIGet cancellation id. Set cancellation id.\fR"
.ti -1c
.RI "void \fBcancellation_id\fR (long timer_id)"
.br
.ti -1c
.RI "void \fBdump\fR (void) const"
.br
.RI "\fIDump the state of an object.\fR"
.in -1c
.SS Public Attributes

.in +1c
.ti -1c
.RI "\fBACE_ALLOC_HOOK_DECLARE\fR"
.br
.RI "\fIDeclare the dynamic allocation hooks.\fR"
.in -1c
.SS Private Attributes

.in +1c
.ti -1c
.RI "SVC_HANDLER* \fBsvc_handler_\fR"
.br
.RI "\fIAssociated SVC_HANDLER.\fR"
.ti -1c
.RI "ACE_HANDLE \fBhandle_\fR"
.br
.RI "\fIIPC <HANDLE> that we are trying to connect.\fR"
.ti -1c
.RI "const void* \fBarg_\fR"
.br
.RI "\fIAssociated argument.\fR"
.ti -1c
.RI "long \fBcancellation_id_\fR"
.br
.RI "\fIAssociated cancellation id.\fR"
.in -1c
.SH DETAILED DESCRIPTION
.PP 

.SS template<class SVC_HANDLER>  template class ACE_Svc_Tuple
Holds the \fBACE_Svc_Handler\fR and its argument and  until an asynchronous connection completes.
.PP
.PP
 This is a no-brainer... 
.PP
.SH CONSTRUCTOR & DESTRUCTOR DOCUMENTATION
.PP 
.SS template<classSVC_HANDLER> ACE_Svc_Tuple<SVC_HANDLER>::ACE_Svc_Tuple<SVC_HANDLER> (SVC_HANDLER *, ACE_HANDLE, const void * = 0, long timer_id = -1)
.PP
.SH MEMBER FUNCTION DOCUMENTATION
.PP 
.SS template<classSVC_HANDLER> void ACE_Svc_Tuple<SVC_HANDLER>::arg (const void *)
.PP
.SS template<classSVC_HANDLER> const void * ACE_Svc_Tuple<SVC_HANDLER>::arg (void)
.PP
Get argument. Set argument.
.PP
.SS template<classSVC_HANDLER> void ACE_Svc_Tuple<SVC_HANDLER>::cancellation_id (long timer_id)
.PP
.SS template<classSVC_HANDLER> long ACE_Svc_Tuple<SVC_HANDLER>::cancellation_id (void)
.PP
Get cancellation id. Set cancellation id.
.PP
.SS template<classSVC_HANDLER> void ACE_Svc_Tuple<SVC_HANDLER>::dump (void) const
.PP
Dump the state of an object.
.PP
.SS template<classSVC_HANDLER> void ACE_Svc_Tuple<SVC_HANDLER>::handle (ACE_HANDLE)
.PP
.SS template<classSVC_HANDLER> ACE_HANDLE ACE_Svc_Tuple<SVC_HANDLER>::handle (void)
.PP
Get handle. Set handle.
.PP
.SS template<classSVC_HANDLER> SVC_HANDLER* ACE_Svc_Tuple<SVC_HANDLER>::svc_handler (void)
.PP
.SH MEMBER DATA DOCUMENTATION
.PP 
.SS template<classSVC_HANDLER> ACE_Svc_Tuple<SVC_HANDLER>::ACE_ALLOC_HOOK_DECLARE
.PP
Declare the dynamic allocation hooks.
.PP
.SS template<classSVC_HANDLER> const void * ACE_Svc_Tuple<SVC_HANDLER>::arg_\fC [private]\fR
.PP
Associated argument.
.PP
.SS template<classSVC_HANDLER> long ACE_Svc_Tuple<SVC_HANDLER>::cancellation_id_\fC [private]\fR
.PP
Associated cancellation id.
.PP
.SS template<classSVC_HANDLER> ACE_HANDLE ACE_Svc_Tuple<SVC_HANDLER>::handle_\fC [private]\fR
.PP
IPC <HANDLE> that we are trying to connect.
.PP
.SS template<classSVC_HANDLER> SVC_HANDLER * ACE_Svc_Tuple<SVC_HANDLER>::svc_handler_\fC [private]\fR
.PP
Associated SVC_HANDLER.
.PP


.SH AUTHOR
.PP 
Generated automatically by Doxygen for ACE from the source code.