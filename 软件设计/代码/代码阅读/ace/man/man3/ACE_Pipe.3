.TH ACE_Pipe 3 "5 Oct 2001" "ACE" \" -*- nroff -*-
.ad l
.nh
.SH NAME
ACE_Pipe \- Provides a bidirectional "pipe" abstraction that is portable to Windows NT, SVR4 UNIX, and BSD UNIX. 
.SH SYNOPSIS
.br
.PP
\fC#include <Pipe.h>\fR
.PP
.SS Public Methods

.in +1c
.ti -1c
.RI "\fBACE_Pipe\fR (void)"
.br
.RI "\fIDefault constructor (does nothing...).\fR"
.ti -1c
.RI "\fBACE_Pipe\fR (ACE_HANDLE handles[2])"
.br
.RI "\fIOpen the pipe and initialize the handles.\fR"
.ti -1c
.RI "\fBACE_Pipe\fR (ACE_HANDLE read, ACE_HANDLE write)"
.br
.RI "\fIInitialize the  from the <read> and <write> handles.\fR"
.ti -1c
.RI "\fB~ACE_Pipe\fR (void)"
.br
.RI "\fIDefault dtor. It doesn't close the handles for you.\fR"
.ti -1c
.RI "int \fBopen\fR (ACE_HANDLE handles[2])"
.br
.RI "\fIOpen the pipe and initialize the handles.\fR"
.ti -1c
.RI "int \fBopen\fR (int buffer_size = ACE_DEFAULT_MAX_SOCKET_BUFSIZ)"
.br
.RI "\fIOpen the pipe, setting the buffer size to the maximum.\fR"
.ti -1c
.RI "int \fBclose\fR (void)"
.br
.RI "\fIClose down the pipe HANDLEs;.\fR"
.ti -1c
.RI "ACE_HANDLE \fBread_handle\fR (void) const"
.br
.ti -1c
.RI "ACE_HANDLE \fBwrite_handle\fR (void) const"
.br
.ti -1c
.RI "void \fBdump\fR (void) const"
.br
.RI "\fIDump the state of the object.\fR"
.in -1c
.SS Private Attributes

.in +1c
.ti -1c
.RI "ACE_HANDLE \fBhandles_\fR [2]"
.br
.in -1c
.SH DETAILED DESCRIPTION
.PP 
Provides a bidirectional "pipe" abstraction that is portable to Windows NT, SVR4 UNIX, and BSD UNIX.
.PP
.PP
 Uses "name" for lookup in the \fBACE\fR service repository. Obtains the object and returns it as the appropriate type. 
.PP
.SH CONSTRUCTOR & DESTRUCTOR DOCUMENTATION
.PP 
.SS ACE_Pipe::ACE_Pipe (void)
.PP
Default constructor (does nothing...).
.PP
.SS ACE_Pipe::ACE_Pipe (ACE_HANDLE handles[2])
.PP
Open the pipe and initialize the handles.
.PP
.SS ACE_Pipe::ACE_Pipe (ACE_HANDLE read, ACE_HANDLE write)
.PP
Initialize the  from the <read> and <write> handles.
.PP
.SS ACE_Pipe::~ACE_Pipe (void)
.PP
Default dtor. It doesn't close the handles for you.
.PP
.SH MEMBER FUNCTION DOCUMENTATION
.PP 
.SS int ACE_Pipe::close (void)
.PP
Close down the pipe HANDLEs;.
.PP
.SS void ACE_Pipe::dump (void) const
.PP
Dump the state of the object.
.PP
.SS int ACE_Pipe::open (int buffer_size = ACE_DEFAULT_MAX_SOCKET_BUFSIZ)
.PP
Open the pipe, setting the buffer size to the maximum.
.PP
.SS int ACE_Pipe::open (ACE_HANDLE handles[2])
.PP
Open the pipe and initialize the handles.
.PP
.SS ACE_HANDLE ACE_Pipe::read_handle (void) const
.PP
This is the "read" side of the pipe. Note, however, that processes can also write to this handle as well since pipes are bi-directional. 
.SS ACE_HANDLE ACE_Pipe::write_handle (void) const
.PP
This is the "write" side of the pipe. Note, however, that processes can also read to this handle as well since pipes are bi-directional. 
.SH MEMBER DATA DOCUMENTATION
.PP 
.SS ACE_HANDLE ACE_Pipe::handles_[2]\fC [private]\fR
.PP


.SH AUTHOR
.PP 
Generated automatically by Doxygen for ACE from the source code.