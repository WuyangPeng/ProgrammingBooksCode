.TH ACE_Bounded_Stack 3 "5 Oct 2001" "ACE" \" -*- nroff -*-
.ad l
.nh
.SH NAME
ACE_Bounded_Stack \- Implement a generic LIFO abstract data type. 
.SH SYNOPSIS
.br
.PP
\fC#include <Containers_T.h>\fR
.PP
.SS Public Methods

.in +1c
.ti -1c
.RI "\fBACE_Bounded_Stack\fR (size_t size)"
.br
.RI "\fIInitialize a new stack so that it is empty. The copy constructor (performs initialization).\fR"
.ti -1c
.RI "\fBACE_Bounded_Stack\fR (const ACE_Bounded_Stack<T> &s)"
.br
.ti -1c
.RI "void \fBoperator=\fR (const ACE_Bounded_Stack<T> &s)"
.br
.RI "\fIAssignment operator(performs assignment).\fR"
.ti -1c
.RI "\fB~ACE_Bounded_Stack\fR (void)"
.br
.RI "\fIPerform actions needed when stack goes out of scope.\fR"
.ti -1c
.RI "int \fBpush\fR (const T &new_item)"
.br
.ti -1c
.RI "int \fBpop\fR (T &item)"
.br
.ti -1c
.RI "int \fBtop\fR (T &item) const"
.br
.ti -1c
.RI "int \fBis_empty\fR (void) const"
.br
.RI "\fIReturns 1 if the container is empty, otherwise returns 0.\fR"
.ti -1c
.RI "int \fBis_full\fR (void) const"
.br
.RI "\fIReturns 1 if the container is full, otherwise returns 0.\fR"
.ti -1c
.RI "size_t \fBsize\fR (void) const"
.br
.RI "\fIThe number of items in the stack.\fR"
.ti -1c
.RI "void \fBdump\fR (void) const"
.br
.RI "\fIDump the state of an object.\fR"
.in -1c
.SS Public Attributes

.in +1c
.ti -1c
.RI "\fBACE_ALLOC_HOOK_DECLARE\fR"
.br
.RI "\fIDeclare the dynamic allocation hooks.\fR"
.in -1c
.SS Private Attributes

.in +1c
.ti -1c
.RI "size_t \fBsize_\fR"
.br
.RI "\fISize of the dynamically allocated data.\fR"
.ti -1c
.RI "size_t \fBtop_\fR"
.br
.RI "\fIKeeps track of the current top of stack.\fR"
.ti -1c
.RI "T* \fBstack_\fR"
.br
.RI "\fIHolds the stack's contents.\fR"
.in -1c
.SH DETAILED DESCRIPTION
.PP 

.SS template<class T>  template class ACE_Bounded_Stack
Implement a generic LIFO abstract data type.
.PP
.PP
 This implementation of a Stack uses a bounded array that is allocated dynamically. 
.PP
.SH CONSTRUCTOR & DESTRUCTOR DOCUMENTATION
.PP 
.SS template<classT> ACE_Bounded_Stack<T>::ACE_Bounded_Stack<T> (size_t size)
.PP
Initialize a new stack so that it is empty. The copy constructor (performs initialization).
.PP
.SS template<classT> ACE_Bounded_Stack<T>::ACE_Bounded_Stack<T> (const ACE_Bounded_Stack< T >& s)
.PP
.SS template<classT> ACE_Bounded_Stack<T>::~ACE_Bounded_Stack<T> (void)
.PP
Perform actions needed when stack goes out of scope.
.PP
.SH MEMBER FUNCTION DOCUMENTATION
.PP 
.SS template<classT> void ACE_Bounded_Stack<T>::dump (void) const
.PP
Dump the state of an object.
.PP
.SS template<classT> int ACE_Bounded_Stack<T>::is_empty (void) const
.PP
Returns 1 if the container is empty, otherwise returns 0.
.PP
.SS template<classT> int ACE_Bounded_Stack<T>::is_full (void) const
.PP
Returns 1 if the container is full, otherwise returns 0.
.PP
.SS template<classT> void ACE_Bounded_Stack<T>::operator= (const ACE_Bounded_Stack< T >& s)
.PP
Assignment operator(performs assignment).
.PP
.SS template<classT> int ACE_Bounded_Stack<T>::pop (T & item)
.PP
Remove and return the top stack item. Returns -1 if the stack is already empty, 0 if the stack is not already empty, and -1 if failure occurs. 
.SS template<classT> int ACE_Bounded_Stack<T>::push (const T & new_item)
.PP
Place a new item on top of the stack. Returns -1 if the stack is already full, 0 if the stack is not already full, and -1 if failure occurs. 
.SS template<classT> size_t ACE_Bounded_Stack<T>::size (void) const
.PP
The number of items in the stack.
.PP
.SS template<classT> int ACE_Bounded_Stack<T>::top (T & item) const
.PP
Return top stack item without removing it. Returns -1 if the stack is already empty, 0 if the stack is not already empty, and -1 if failure occurs. 
.SH MEMBER DATA DOCUMENTATION
.PP 
.SS template<classT> ACE_Bounded_Stack<T>::ACE_ALLOC_HOOK_DECLARE
.PP
Declare the dynamic allocation hooks.
.PP
.SS template<classT> size_t ACE_Bounded_Stack<T>::size_\fC [private]\fR
.PP
Size of the dynamically allocated data.
.PP
.SS template<classT> T * ACE_Bounded_Stack<T>::stack_\fC [private]\fR
.PP
Holds the stack's contents.
.PP
.SS template<classT> size_t ACE_Bounded_Stack<T>::top_\fC [private]\fR
.PP
Keeps track of the current top of stack.
.PP


.SH AUTHOR
.PP 
Generated automatically by Doxygen for ACE from the source code.