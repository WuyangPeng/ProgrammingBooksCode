.TH ACE_Active_Map_Manager_Key 3 "5 Oct 2001" "ACE" \" -*- nroff -*-
.ad l
.nh
.SH NAME
ACE_Active_Map_Manager_Key \- Key used in the Active Object Map. 
.SH SYNOPSIS
.br
.PP
\fC#include <Active_Map_Manager.h>\fR
.PP
.SS Public Methods

.in +1c
.ti -1c
.RI "\fBACE_Active_Map_Manager_Key\fR (void)"
.br
.RI "\fIDefault constructor.\fR"
.ti -1c
.RI "\fBACE_Active_Map_Manager_Key\fR (ACE_UINT32 slot_index, ACE_UINT32 slot_generation)"
.br
.ti -1c
.RI "ACE_UINT32 \fBslot_index\fR (void) const"
.br
.RI "\fIGet/Set the <slot_index>.\fR"
.ti -1c
.RI "void \fBslot_index\fR (ACE_UINT32 i)"
.br
.ti -1c
.RI "ACE_UINT32 \fBslot_generation\fR (void) const"
.br
.RI "\fIGet/Set the <slot_generation> number.\fR"
.ti -1c
.RI "void \fBslot_generation\fR (ACE_UINT32 g)"
.br
.ti -1c
.RI "void \fBdecode\fR (const void *data)"
.br
.RI "\fIRecover state of active key from <data>. User must make sure that <data> encoded using the <encode> method.\fR"
.ti -1c
.RI "void \fBencode\fR (void *data) const"
.br
.RI "\fIEncode state of the active key into <data>. <data> must be as big as the value returned from <size>.\fR"
.ti -1c
.RI "int \fBoperator==\fR (const ACE_Active_Map_Manager_Key &rhs) const"
.br
.RI "\fICompare keys.\fR"
.ti -1c
.RI "int \fBoperator!=\fR (const ACE_Active_Map_Manager_Key &rhs) const"
.br
.ti -1c
.RI "void \fBincrement_slot_generation_count\fR (void)"
.br
.RI "\fIIncrement the <slot_generation> number.\fR"
.in -1c
.SS Static Public Methods

.in +1c
.ti -1c
.RI "size_t \fBsize\fR (void)"
.br
.RI "\fISize required to store information about active key.\fR"
.in -1c
.SS Private Attributes

.in +1c
.ti -1c
.RI "\fBkey_data\fR \fBkey_data_\fR"
.br
.RI "\fIData for the Active Object Map Key.\fR"
.in -1c
.SH DETAILED DESCRIPTION
.PP 
Key used in the Active Object Map.
.PP
.PP
 This key keeps information of the index and the generation count of the slot it represents. Since the index information is part of the key, lookups are super fast and predictable, 
.PP
.SH CONSTRUCTOR & DESTRUCTOR DOCUMENTATION
.PP 
.SS ACE_Active_Map_Manager_Key::ACE_Active_Map_Manager_Key (void)
.PP
Default constructor.
.PP
.SS ACE_Active_Map_Manager_Key::ACE_Active_Map_Manager_Key (ACE_UINT32 slot_index, ACE_UINT32 slot_generation)
.PP
Constructor given the <slot_index> and <slot_generation> number. This is useful once the user has somehow recovered the <slot_index> and <slot_generation> number from the client. 
.SH MEMBER FUNCTION DOCUMENTATION
.PP 
.SS void ACE_Active_Map_Manager_Key::decode (const void * data)
.PP
Recover state of active key from <data>. User must make sure that <data> encoded using the <encode> method.
.PP
.SS void ACE_Active_Map_Manager_Key::encode (void * data) const
.PP
Encode state of the active key into <data>. <data> must be as big as the value returned from <size>.
.PP
.SS void ACE_Active_Map_Manager_Key::increment_slot_generation_count (void)
.PP
Increment the <slot_generation> number.
.PP
.SS int ACE_Active_Map_Manager_Key::operator!= (const ACE_Active_Map_Manager_Key & rhs) const
.PP
.SS int ACE_Active_Map_Manager_Key::operator== (const ACE_Active_Map_Manager_Key & rhs) const
.PP
Compare keys.
.PP
.SS size_t ACE_Active_Map_Manager_Key::size (void)\fC [static]\fR
.PP
Size required to store information about active key.
.PP
.SS void ACE_Active_Map_Manager_Key::slot_generation (ACE_UINT32 g)
.PP
.SS ACE_UINT32 ACE_Active_Map_Manager_Key::slot_generation (void) const
.PP
Get/Set the <slot_generation> number.
.PP
.SS void ACE_Active_Map_Manager_Key::slot_index (ACE_UINT32 i)
.PP
.SS ACE_UINT32 ACE_Active_Map_Manager_Key::slot_index (void) const
.PP
Get/Set the <slot_index>.
.PP
.SH MEMBER DATA DOCUMENTATION
.PP 
.SS \fBkey_data\fR ACE_Active_Map_Manager_Key::key_data_\fC [private]\fR
.PP
Data for the Active Object Map Key.
.PP


.SH AUTHOR
.PP 
Generated automatically by Doxygen for ACE from the source code.