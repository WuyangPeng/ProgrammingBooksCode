.TH ACE_WIN32_Asynch_Write_Stream 3 "5 Oct 2001" "ACE" \" -*- nroff -*-
.ad l
.nh
.SH NAME
ACE_WIN32_Asynch_Write_Stream \- This class is a factory for starting off asynchronous writes on a stream. 
.SH SYNOPSIS
.br
.PP
\fC#include <WIN32_Asynch_IO.h>\fR
.PP
Inherits \fBACE_Asynch_Write_Stream_Impl\fR, and \fBACE_WIN32_Asynch_Operation\fR.
.PP
Inherited by \fBACE_WIN32_Asynch_Write_File\fR.
.PP
.SS Public Methods

.in +1c
.ti -1c
.RI "\fBACE_WIN32_Asynch_Write_Stream\fR (\fBACE_WIN32_Proactor\fR *win32_proactor)"
.br
.RI "\fIConstructor.\fR"
.ti -1c
.RI "int \fBwrite\fR (\fBACE_Message_Block\fR &message_block, u_long bytes_to_write, const void *act, int priority, int signal_number = 0)"
.br
.RI "\fIThis starts off an asynchronous write. Upto <bytes_to_write> will be written from the <message_block>.\fR"
.ti -1c
.RI "virtual \fB~ACE_WIN32_Asynch_Write_Stream\fR (void)"
.br
.RI "\fIDestructor.\fR"
.ti -1c
.RI "int \fBopen\fR (\fBACE_Handler\fR &handler, ACE_HANDLE handle, const void *completion_key, \fBACE_Proactor\fR *proactor)"
.br
.ti -1c
.RI "int \fBcancel\fR (void)"
.br
.ti -1c
.RI "\fBACE_Proactor\fR* \fBproactor\fR (void) const"
.br
.RI "\fIReturn the underlying proactor.\fR"
.in -1c
.SS Protected Methods

.in +1c
.ti -1c
.RI "int \fBshared_write\fR (\fBACE_WIN32_Asynch_Write_Stream_Result\fR *result)"
.br
.RI "\fIThis is the method which does the real work and is there so that the \fBACE_Asynch_Write_File\fR class can use it too.\fR"
.in -1c
.SH DETAILED DESCRIPTION
.PP 
This class is a factory for starting off asynchronous writes on a stream.
.PP
.PP
 Once <open> is called, multiple asynchronous <writes>s can started using this class. A \fBACE_Asynch_Write_Stream::Result\fR will be passed back to the <handler> when the asynchronous write completes through the  callback. 
.PP
.SH CONSTRUCTOR & DESTRUCTOR DOCUMENTATION
.PP 
.SS ACE_WIN32_Asynch_Write_Stream::ACE_WIN32_Asynch_Write_Stream (\fBACE_WIN32_Proactor\fR * win32_proactor)
.PP
Constructor.
.PP
.SS ACE_WIN32_Asynch_Write_Stream::~ACE_WIN32_Asynch_Write_Stream (void)\fC [virtual]\fR
.PP
Destructor.
.PP
.SH MEMBER FUNCTION DOCUMENTATION
.PP 
.SS int ACE_WIN32_Asynch_Write_Stream::cancel (void)
.PP
This cancels all pending accepts operations that were issued by the calling thread. The function does not cancel asynchronous operations issued by other threads. 
.PP
Reimplemented from \fBACE_WIN32_Asynch_Operation\fR.
.PP
Reimplemented in \fBACE_WIN32_Asynch_Write_File\fR.
.SS int ACE_WIN32_Asynch_Write_Stream::open (\fBACE_Handler\fR & handler, ACE_HANDLE handle, const void * completion_key, \fBACE_Proactor\fR * proactor)
.PP
Initializes the factory with information which will be used with each asynchronous call. If (<handle> == ACE_INVALID_HANDLE),  will be called on the <handler> to get the correct handle. 
.PP
Reimplemented from \fBACE_WIN32_Asynch_Operation\fR.
.PP
Reimplemented in \fBACE_WIN32_Asynch_Write_File\fR.
.SS \fBACE_Proactor\fR * ACE_WIN32_Asynch_Write_Stream::proactor (void) const
.PP
Return the underlying proactor.
.PP
Reimplemented from \fBACE_WIN32_Asynch_Operation\fR.
.PP
Reimplemented in \fBACE_WIN32_Asynch_Write_File\fR.
.SS int ACE_WIN32_Asynch_Write_Stream::shared_write (\fBACE_WIN32_Asynch_Write_Stream_Result\fR * result)\fC [protected]\fR
.PP
This is the method which does the real work and is there so that the \fBACE_Asynch_Write_File\fR class can use it too.
.PP
.SS int ACE_WIN32_Asynch_Write_Stream::write (\fBACE_Message_Block\fR & message_block, u_long bytes_to_write, const void * act, int priority, int signal_number = 0)
.PP
This starts off an asynchronous write. Upto <bytes_to_write> will be written from the <message_block>.
.PP
Reimplemented in \fBACE_WIN32_Asynch_Write_File\fR.

.SH AUTHOR
.PP 
Generated automatically by Doxygen for ACE from the source code.