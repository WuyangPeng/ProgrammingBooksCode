.TH ACE_Null_Barrier 3 "5 Oct 2001" "ACE" \" -*- nroff -*-
.ad l
.nh
.SH NAME
ACE_Null_Barrier \- Implements "NULL barrier synchronization". 
.SH SYNOPSIS
.br
.PP
\fC#include <Synch.h>\fR
.PP
.SS Public Methods

.in +1c
.ti -1c
.RI "\fBACE_Null_Barrier\fR (u_int, const char * = 0, void * = 0)"
.br
.RI "\fIInitialize the barrier to synchronize <count> threads.\fR"
.ti -1c
.RI "\fB~ACE_Null_Barrier\fR (void)"
.br
.RI "\fIDefault dtor.\fR"
.ti -1c
.RI "int \fBwait\fR (void)"
.br
.RI "\fIBlock the caller until all <count> threads have called <wait> and then allow all the caller threads to continue in parallel.\fR"
.ti -1c
.RI "void \fBdump\fR (void) const"
.br
.RI "\fIDump the state of an object.\fR"
.in -1c
.SS Public Attributes

.in +1c
.ti -1c
.RI "\fBACE_ALLOC_HOOK_DECLARE\fR"
.br
.RI "\fIDeclare the dynamic allocation hooks.\fR"
.in -1c
.SS Private Methods

.in +1c
.ti -1c
.RI "void \fBoperator=\fR (const ACE_Null_Barrier &)"
.br
.ti -1c
.RI "\fBACE_Null_Barrier\fR (const ACE_Null_Barrier &)"
.br
.in -1c
.SH DETAILED DESCRIPTION
.PP 
Implements "NULL barrier synchronization".
.PP
.SH CONSTRUCTOR & DESTRUCTOR DOCUMENTATION
.PP 
.SS ACE_Null_Barrier::ACE_Null_Barrier (u_int, const char * = 0, void * = 0)
.PP
Initialize the barrier to synchronize <count> threads.
.PP
.SS ACE_Null_Barrier::~ACE_Null_Barrier (void)
.PP
Default dtor.
.PP
.SS ACE_Null_Barrier::ACE_Null_Barrier (const ACE_Null_Barrier &)\fC [private]\fR
.PP
.SH MEMBER FUNCTION DOCUMENTATION
.PP 
.SS void ACE_Null_Barrier::dump (void) const
.PP
Dump the state of an object.
.PP
.SS void ACE_Null_Barrier::operator= (const ACE_Null_Barrier &)\fC [private]\fR
.PP
.SS int ACE_Null_Barrier::wait (void)
.PP
Block the caller until all <count> threads have called <wait> and then allow all the caller threads to continue in parallel.
.PP
.SH MEMBER DATA DOCUMENTATION
.PP 
.SS ACE_Null_Barrier::ACE_ALLOC_HOOK_DECLARE
.PP
Declare the dynamic allocation hooks.
.PP


.SH AUTHOR
.PP 
Generated automatically by Doxygen for ACE from the source code.