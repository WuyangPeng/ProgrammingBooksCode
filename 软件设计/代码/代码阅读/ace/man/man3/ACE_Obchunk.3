.TH ACE_Obchunk 3 "5 Oct 2001" "ACE" \" -*- nroff -*-
.ad l
.nh
.SH NAME
ACE_Obchunk \- Defines the state that represents a "chunk" of memory. Evenything in this class is public because it is designed as an internal structure of Obstack_T and users are not supposed to use this class directly. 
.SH SYNOPSIS
.br
.PP
\fC#include <Obchunk.h>\fR
.PP
.SS Public Methods

.in +1c
.ti -1c
.RI "\fBACE_Obchunk\fR (size_t size)"
.br
.RI "\fIConstructor.\fR"
.ti -1c
.RI "\fB~ACE_Obchunk\fR (void)"
.br
.RI "\fIDtor.\fR"
.ti -1c
.RI "void \fBdump\fR (void) const"
.br
.RI "\fIDump the state of an object.\fR"
.in -1c
.SS Public Attributes

.in +1c
.ti -1c
.RI "\fBACE_ALLOC_HOOK_DECLARE\fR"
.br
.RI "\fIDeclare the dynamic allocation hooks.\fR"
.ti -1c
.RI "char* \fBend_\fR"
.br
.RI "\fIPointer to the end of the chunk.\fR"
.ti -1c
.RI "char* \fBblock_\fR"
.br
.RI "\fIPointer to the head of the current building block.\fR"
.ti -1c
.RI "char* \fBcur_\fR"
.br
.RI "\fIPointer to the current location in the chunk.\fR"
.ti -1c
.RI "ACE_Obchunk* \fBnext_\fR"
.br
.RI "\fINext chunk in the chain.\fR"
.ti -1c
.RI "char \fBcontents_\fR [4]"
.br
.in -1c
.SH DETAILED DESCRIPTION
.PP 
Defines the state that represents a "chunk" of memory. Evenything in this class is public because it is designed as an internal structure of Obstack_T and users are not supposed to use this class directly.
.PP
\fBSee also: \fR
.in +1c
 \fBACE_Obstack_T\fR 
.PP
.SH CONSTRUCTOR & DESTRUCTOR DOCUMENTATION
.PP 
.SS ACE_Obchunk::ACE_Obchunk (size_t size)
.PP
Constructor.
.PP
.SS ACE_Obchunk::~ACE_Obchunk (void)
.PP
Dtor.
.PP
.SH MEMBER FUNCTION DOCUMENTATION
.PP 
.SS void ACE_Obchunk::dump (void) const
.PP
Dump the state of an object.
.PP
.SH MEMBER DATA DOCUMENTATION
.PP 
.SS ACE_Obchunk::ACE_ALLOC_HOOK_DECLARE
.PP
Declare the dynamic allocation hooks.
.PP
.SS char * ACE_Obchunk::block_
.PP
Pointer to the head of the current building block.
.PP
.SS char ACE_Obchunk::contents_[4]
.PP
Pointer to the beginning contents of this chunk. This field is actually overlayed by the memory allocated by . Therefore, it *must* come last. 
.SS char * ACE_Obchunk::cur_
.PP
Pointer to the current location in the chunk.
.PP
.SS char * ACE_Obchunk::end_
.PP
Pointer to the end of the chunk.
.PP
.SS ACE_Obchunk * ACE_Obchunk::next_
.PP
Next chunk in the chain.
.PP


.SH AUTHOR
.PP 
Generated automatically by Doxygen for ACE from the source code.