.TH Basic_Types_h 3 "5 Oct 2001" "ACE" \" -*- nroff -*-
.ad l
.nh
.SH NAME
Basic_Types_h \- 
.SH SYNOPSIS
.br
.PP
\fC#include "ace/pre.h"\fR
.br
\fC#include "ace/config-all.h"\fR
.br
\fC#include "ace/ACE_export.h"\fR
.br
\fC#include "ace/post.h"\fR
.br

.SS Defines

.in +1c
.ti -1c
.RI "#define \fBACE_SIZEOF_CHAR\fR  1"
.br
.ti -1c
.RI "#define \fBACE_SIZEOF_WCHAR\fR  0"
.br
.ti -1c
.RI "#define \fBACE_SIZEOF_LONG_LONG\fR  8"
.br
.ti -1c
.RI "#define \fBACE_SIZEOF_VOID_P\fR  ACE_SIZEOF_LONG"
.br
.ti -1c
.RI "#define \fBACE_LONGLONG_TO_PTR\fR(PTR_TYPE, L) "
.br
.ti -1c
.RI "#define \fBACE_U64_TO_U32\fR(n)   (ACE_static_cast (ACE_UINT32, (n)))"
.br
.ti -1c
.RI "#define \fBACE_CU64_TO_CU32\fR(n) "
.br
.ti -1c
.RI "#define \fBACE_UINT64_LITERAL\fR(n)   n ## ui64"
.br
.ti -1c
.RI "#define \fBACE_INT64_LITERAL\fR(n)   n ## i64"
.br
.ti -1c
.RI "#define \fBACE_UINT64_FORMAT_SPECIFIER\fR  ACE_LIB_TEXT ("%llu")"
.br
.ti -1c
.RI "#define \fBACE_INT64_FORMAT_SPECIFIER\fR  ACE_LIB_TEXT ("%lld")"
.br
.ti -1c
.RI "#define \fBACE_SSIZE_T_FORMAT_SPECIFIER\fR  ACE_LIB_TEXT ("%d")"
.br
.ti -1c
.RI "#define \fBACE_SIZE_T_FORMAT_SPECIFIER\fR  ACE_LIB_TEXT ("%u")"
.br
.ti -1c
.RI "#define \fBACE_UINT64_DBLCAST_ADAPTER\fR(n)   ACE_static_cast (__int64, n)"
.br
.ti -1c
.RI "#define \fBACE_CHAR_MAX\fR  0x7F"
.br
.ti -1c
.RI "#define \fBACE_CHAR_MIN\fR  -(ACE_CHAR_MAX)-1"
.br
.ti -1c
.RI "#define \fBACE_OCTET_MAX\fR  0xFF"
.br
.ti -1c
.RI "#define \fBACE_INT16_MAX\fR  0x7FFF"
.br
.ti -1c
.RI "#define \fBACE_INT16_MIN\fR  -(ACE_INT16_MAX)-1"
.br
.ti -1c
.RI "#define \fBACE_UINT16_MAX\fR  0xFFFF"
.br
.ti -1c
.RI "#define \fBACE_WCHAR_MAX\fR  ACE_UINT16_MAX"
.br
.ti -1c
.RI "#define \fBACE_INT32_MAX\fR  0x7FFFFFFF"
.br
.ti -1c
.RI "#define \fBACE_INT32_MIN\fR  -(ACE_INT32_MAX)-1"
.br
.ti -1c
.RI "#define \fBACE_UINT32_MAX\fR  0xFFFFFFFF"
.br
.ti -1c
.RI "#define \fBACE_INT64_MAX\fR  ACE_INT64_LITERAL(0x7FFFFFFFFFFFFFFF)"
.br
.ti -1c
.RI "#define \fBACE_INT64_MIN\fR  -(ACE_INT64_MAX)-1"
.br
.ti -1c
.RI "#define \fBACE_UINT64_MAX\fR  ACE_UINT64_LITERAL(0xFFFFFFFFFFFFFFFF)"
.br
.ti -1c
.RI "#define \fBACE_FLT_MAX\fR  3.402823466e+38F"
.br
.ti -1c
.RI "#define \fBACE_DBL_MAX\fR  1.7976931348623158e+308"
.br
.ti -1c
.RI "#define \fBACE_BIG_ENDIAN\fR  0x3210"
.br
.ti -1c
.RI "#define \fBACE_BYTE_ORDER\fR  ACE_BIG_ENDIAN"
.br
.in -1c
.SS Typedefs

.in +1c
.ti -1c
.RI "typedef unsigned long long \fBACE_UINT64\fR"
.br
.ti -1c
.RI "typedef ACE_UINT16 \fBACE_USHORT16\fR"
.br
.ti -1c
.RI "typedef u_int \fBptr_arith_t\fR"
.br
.in -1c
.SH DETAILED DESCRIPTION
.PP 
.PP
\fBBasic_Types.h\fR,v 4.82 2001/09/15 13:18:11 schmidt Exp
.PP
\fBAuthor(s): \fR
.in +1c
 David L. Levine
.PP
defines the list of preprocessor macros below. The config.h file can pre-define any of these to short-cut the definitions. This is usually only necessary if the preprocessor does all of its math using integers.
.PP
Sizes of built-in types:
.TP
ACE_SIZEOF_CHAR
.TP
ACE_SIZEOF_WCHAR
.TP
ACE_SIZEOF_SHORT
.TP
ACE_SIZEOF_INT
.TP
ACE_SIZEOF_LONG
.TP
ACE_SIZEOF_LONG_LONG
.TP
ACE_SIZEOF_VOID_P
.TP
ACE_SIZEOF_FLOAT
.TP
ACE_SIZEOF_DOUBLE
.TP
ACE_SIZEOF_LONG_DOUBLEWrappers for built-in types of specific sizes:
.TP
ACE_USHORT16 (For backward compatibility. Use ACE_UINT16 instead.)
.TP
ACE_INT16
.TP
ACE_UINT16
.TP
ACE_INT32
.TP
ACE_UINT32
.TP
ACE_UINT64 (Note: ACE_INT64 is not defined, because there is no ACE_LongLong for platforms that don't have a native 8-byte integer type.)Byte-order (endian-ness) determination: ACE_BYTE_ORDER, to either ACE_BIG_ENDIAN or ACE_LITTLE_ENDIAN
.PP
.SH DEFINE DOCUMENTATION
.PP 
.SS #define ACE_BIG_ENDIAN  0x3210
.PP
.SS #define ACE_BYTE_ORDER  ACE_BIG_ENDIAN
.PP
.SS #define ACE_CHAR_MAX  0x7F
.PP
.SS #define ACE_CHAR_MIN  -(ACE_CHAR_MAX)-1
.PP
.SS #define ACE_CU64_TO_CU32(n)
.PP
\fBInitializer:\fR
.PP
.nf
\
     (ACE_static_cast (ACE_CAST_CONST ACE_UINT32, (n)))
.fi
.SS #define ACE_DBL_MAX  1.7976931348623158e+308
.PP
.SS #define ACE_FLT_MAX  3.402823466e+38F
.PP
.SS #define ACE_INT16_MAX  0x7FFF
.PP
.SS #define ACE_INT16_MIN  -(ACE_INT16_MAX)-1
.PP
.SS #define ACE_INT32_MAX  0x7FFFFFFF
.PP
.SS #define ACE_INT32_MIN  -(ACE_INT32_MAX)-1
.PP
.SS #define ACE_INT64_FORMAT_SPECIFIER  ACE_LIB_TEXT ("%lld")
.PP
.SS #define ACE_INT64_LITERAL(n)  n ## i64
.PP
.SS #define ACE_INT64_MAX  ACE_INT64_LITERAL(0x7FFFFFFFFFFFFFFF)
.PP
.SS #define ACE_INT64_MIN  -(ACE_INT64_MAX)-1
.PP
.SS #define ACE_LONGLONG_TO_PTR(PTR_TYPE, L)
.PP
\fBInitializer:\fR
.PP
.nf
\
  ACE_reinterpret_cast (PTR_TYPE, ACE_static_cast (ptr_arith_t, L))
.fi
.SS #define ACE_OCTET_MAX  0xFF
.PP
.SS #define ACE_SIZEOF_CHAR  1
.PP
.SS #define ACE_SIZEOF_LONG_LONG  8
.PP
.SS #define ACE_SIZEOF_VOID_P  ACE_SIZEOF_LONG
.PP
.SS #define ACE_SIZEOF_WCHAR  0
.PP
.SS #define ACE_SIZE_T_FORMAT_SPECIFIER  ACE_LIB_TEXT ("%u")
.PP
.SS #define ACE_SSIZE_T_FORMAT_SPECIFIER  ACE_LIB_TEXT ("%d")
.PP
.SS #define ACE_U64_TO_U32(n)  (ACE_static_cast (ACE_UINT32, (n)))
.PP
.SS #define ACE_UINT16_MAX  0xFFFF
.PP
.SS #define ACE_UINT32_MAX  0xFFFFFFFF
.PP
.SS #define ACE_UINT64_DBLCAST_ADAPTER(n)  ACE_static_cast (__int64, n)
.PP
.SS #define ACE_UINT64_FORMAT_SPECIFIER  ACE_LIB_TEXT ("%llu")
.PP
.SS #define ACE_UINT64_LITERAL(n)  n ## ui64
.PP
.SS #define ACE_UINT64_MAX  ACE_UINT64_LITERAL(0xFFFFFFFFFFFFFFFF)
.PP
.SS #define ACE_WCHAR_MAX  ACE_UINT16_MAX
.PP
.SH TYPEDEF DOCUMENTATION
.PP 
.SS typedef unsigned long long ACE_UINT64
.PP
.SS typedef ACE_UINT16 ACE_USHORT16
.PP
.SS typedef u_int ptr_arith_t
.PP
.SH AUTHOR
.PP 
Generated automatically by Doxygen for ACE from the source code.