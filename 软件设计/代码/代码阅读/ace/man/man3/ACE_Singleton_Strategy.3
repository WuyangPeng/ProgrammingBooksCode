.TH ACE_Singleton_Strategy 3 "5 Oct 2001" "ACE" \" -*- nroff -*-
.ad l
.nh
.SH NAME
ACE_Singleton_Strategy \- Defines the interface for specifying a creation strategy for a <SVC_HANDLER> that always returns the same <SVC_HANDLER> (i.e., it's a Singleton). 
.SH SYNOPSIS
.br
.PP
\fC#include <Strategies_T.h>\fR
.PP
Inherits \fBACE_Creation_Strategy< SVC_HANDLER >\fR.
.PP
.SS Public Methods

.in +1c
.ti -1c
.RI "\fBACE_Singleton_Strategy\fR (SVC_HANDLER * = 0, \fBACE_Thread_Manager\fR * = 0)"
.br
.ti -1c
.RI "int \fBopen\fR (SVC_HANDLER *, \fBACE_Thread_Manager\fR * = 0)"
.br
.ti -1c
.RI "virtual \fB~ACE_Singleton_Strategy\fR (void)"
.br
.ti -1c
.RI "virtual int \fBmake_svc_handler\fR (SVC_HANDLER *&)"
.br
.RI "\fICreate a Singleton SVC_HANDLER by always returning the same SVC_HANDLER. Returns -1 on failure, else 0.\fR"
.ti -1c
.RI "void \fBdump\fR (void) const"
.br
.RI "\fIDump the state of an object.\fR"
.in -1c
.SS Public Attributes

.in +1c
.ti -1c
.RI "\fBACE_ALLOC_HOOK_DECLARE\fR"
.br
.RI "\fIDeclare the dynamic allocation hooks.\fR"
.in -1c
.SS Protected Attributes

.in +1c
.ti -1c
.RI "SVC_HANDLER* \fBsvc_handler_\fR"
.br
.RI "\fIPointer to the Singleton svc_handler.\fR"
.ti -1c
.RI "int \fBdelete_svc_handler_\fR"
.br
.RI "\fIKeep track of whether we need to delete the <SVC_HANDLER>.\fR"
.in -1c
.SH DETAILED DESCRIPTION
.PP 

.SS template<class SVC_HANDLER>  template class ACE_Singleton_Strategy
Defines the interface for specifying a creation strategy for a <SVC_HANDLER> that always returns the same <SVC_HANDLER> (i.e., it's a Singleton).
.PP
.PP
 Note that this class takes over the ownership of the SVC_HANDLER passed into it as a parameter and it becomes responsible for deleting this object. 
.PP
.SH CONSTRUCTOR & DESTRUCTOR DOCUMENTATION
.PP 
.SS template<classSVC_HANDLER> ACE_Singleton_Strategy<SVC_HANDLER>::ACE_Singleton_Strategy<SVC_HANDLER> (SVC_HANDLER * = 0, \fBACE_Thread_Manager\fR * = 0)
.PP
.SS template<classSVC_HANDLER> virtual ACE_Singleton_Strategy<SVC_HANDLER>::~ACE_Singleton_Strategy<SVC_HANDLER> (void)\fC [virtual]\fR
.PP
.SH MEMBER FUNCTION DOCUMENTATION
.PP 
.SS template<classSVC_HANDLER> void ACE_Singleton_Strategy<SVC_HANDLER>::dump (void) const
.PP
Dump the state of an object.
.PP
Reimplemented from \fBACE_Creation_Strategy\fR.
.SS template<classSVC_HANDLER> int ACE_Singleton_Strategy<SVC_HANDLER>::make_svc_handler (SVC_HANDLER *& sh)\fC [virtual]\fR
.PP
Create a Singleton SVC_HANDLER by always returning the same SVC_HANDLER. Returns -1 on failure, else 0.
.PP
Reimplemented from \fBACE_Creation_Strategy\fR.
.SS template<classSVC_HANDLER> int ACE_Singleton_Strategy<SVC_HANDLER>::open (SVC_HANDLER *, \fBACE_Thread_Manager\fR * = 0)
.PP
.SH MEMBER DATA DOCUMENTATION
.PP 
.SS template<classSVC_HANDLER> ACE_Singleton_Strategy<SVC_HANDLER>::ACE_ALLOC_HOOK_DECLARE
.PP
Declare the dynamic allocation hooks.
.PP
Reimplemented from \fBACE_Creation_Strategy\fR.
.SS template<classSVC_HANDLER> int ACE_Singleton_Strategy<SVC_HANDLER>::delete_svc_handler_\fC [protected]\fR
.PP
Keep track of whether we need to delete the <SVC_HANDLER>.
.PP
.SS template<classSVC_HANDLER> SVC_HANDLER * ACE_Singleton_Strategy<SVC_HANDLER>::svc_handler_\fC [protected]\fR
.PP
Pointer to the Singleton svc_handler.
.PP


.SH AUTHOR
.PP 
Generated automatically by Doxygen for ACE from the source code.