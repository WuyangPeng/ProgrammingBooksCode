.TH ACE_Ordered_MultiSet_Iterator 3 "5 Oct 2001" "ACE" \" -*- nroff -*-
.ad l
.nh
.SH NAME
ACE_Ordered_MultiSet_Iterator \- Implement a bidirectional iterator over an ordered multiset. This class template requires that < operator semantics be defined for the parameterized type <T>, but does not impose any restriction on how that ordering operator is implemented. 
.SH SYNOPSIS
.br
.PP
\fC#include <Containers_T.h>\fR
.PP
.SS Public Methods

.in +1c
.ti -1c
.RI "\fBACE_Ordered_MultiSet_Iterator\fR (\fBACE_Ordered_MultiSet\fR<T> &s)"
.br
.ti -1c
.RI "int \fBnext\fR (T *&next_item) const"
.br
.RI "\fIPass back the <next_item> that hasn't been seen in the ordered multiset. Returns 0 when all items have been seen, else 1.\fR"
.ti -1c
.RI "int \fBfirst\fR (void)"
.br
.RI "\fIRepositions the iterator at the first item in the ordered multiset Returns 0 if the list is empty else 1.\fR"
.ti -1c
.RI "int \fBlast\fR (void)"
.br
.RI "\fIRepositions the iterator at the last item in the ordered multiset Returns 0 if the list is empty else 1.\fR"
.ti -1c
.RI "int \fBadvance\fR (void)"
.br
.RI "\fIMove forward by one element in the set. Returns 0 when all the items in the set have been seen, else 1.\fR"
.ti -1c
.RI "int \fBretreat\fR (void)"
.br
.RI "\fIMove backward by one element in the set. Returns 0 when all the items in the set have been seen, else 1.\fR"
.ti -1c
.RI "int \fBdone\fR (void) const"
.br
.RI "\fIReturns 1 when all items have been seen, else 0.\fR"
.ti -1c
.RI "void \fBdump\fR (void) const"
.br
.RI "\fIDump the state of an object.\fR"
.ti -1c
.RI "T& \fBoperator *\fR (void)"
.br
.RI "\fIReturns a reference to the internal element <this> is pointing to.\fR"
.in -1c
.SS Public Attributes

.in +1c
.ti -1c
.RI "\fBACE_ALLOC_HOOK_DECLARE\fR"
.br
.RI "\fIDeclare the dynamic allocation hooks.\fR"
.in -1c
.SS Private Attributes

.in +1c
.ti -1c
.RI "\fBACE_DNode\fR<T>* \fBcurrent_\fR"
.br
.RI "\fIPointer to the current node in the iteration.\fR"
.ti -1c
.RI "\fBACE_Ordered_MultiSet\fR<T>& \fBset_\fR"
.br
.RI "\fIPointer to the set we're iterating over.\fR"
.in -1c
.SS Friends

.in +1c
.ti -1c
.RI "class \fBACE_Ordered_MultiSet< T >\fR"
.br
.in -1c
.SH DETAILED DESCRIPTION
.PP 

.SS template<class T>  template class ACE_Ordered_MultiSet_Iterator
Implement a bidirectional iterator over an ordered multiset. This class template requires that < operator semantics be defined for the parameterized type <T>, but does not impose any restriction on how that ordering operator is implemented.
.PP
.SH CONSTRUCTOR & DESTRUCTOR DOCUMENTATION
.PP 
.SS template<classT> ACE_Ordered_MultiSet_Iterator<T>::ACE_Ordered_MultiSet_Iterator<T> (\fBACE_Ordered_MultiSet\fR< T >& s)
.PP
.SH MEMBER FUNCTION DOCUMENTATION
.PP 
.SS template<classT> int ACE_Ordered_MultiSet_Iterator<T>::advance (void)
.PP
Move forward by one element in the set. Returns 0 when all the items in the set have been seen, else 1.
.PP
.SS template<classT> int ACE_Ordered_MultiSet_Iterator<T>::done (void) const
.PP
Returns 1 when all items have been seen, else 0.
.PP
.SS template<classT> void ACE_Ordered_MultiSet_Iterator<T>::dump (void) const
.PP
Dump the state of an object.
.PP
.SS template<classT> int ACE_Ordered_MultiSet_Iterator<T>::first (void)
.PP
Repositions the iterator at the first item in the ordered multiset Returns 0 if the list is empty else 1.
.PP
.SS template<classT> int ACE_Ordered_MultiSet_Iterator<T>::last (void)
.PP
Repositions the iterator at the last item in the ordered multiset Returns 0 if the list is empty else 1.
.PP
.SS template<classT> int ACE_Ordered_MultiSet_Iterator<T>::next (T *& next_item) const
.PP
Pass back the <next_item> that hasn't been seen in the ordered multiset. Returns 0 when all items have been seen, else 1.
.PP
.SS template<classT> T & ACE_Ordered_MultiSet_Iterator<T>::operator * (void)
.PP
Returns a reference to the internal element <this> is pointing to.
.PP
.SS template<classT> int ACE_Ordered_MultiSet_Iterator<T>::retreat (void)
.PP
Move backward by one element in the set. Returns 0 when all the items in the set have been seen, else 1.
.PP
.SH FRIENDS AND RELATED FUNCTION DOCUMENTATION
.PP 
.SS template<classT> class \fBACE_Ordered_MultiSet\fR\fC [friend]\fR
.PP
.SH MEMBER DATA DOCUMENTATION
.PP 
.SS template<classT> ACE_Ordered_MultiSet_Iterator<T>::ACE_ALLOC_HOOK_DECLARE
.PP
Declare the dynamic allocation hooks.
.PP
.SS template<classT> \fBACE_DNode\fR< T >* ACE_Ordered_MultiSet_Iterator<T>::current_\fC [private]\fR
.PP
Pointer to the current node in the iteration.
.PP
.SS template<classT> \fBACE_Ordered_MultiSet\fR< T >& ACE_Ordered_MultiSet_Iterator<T>::set_\fC [private]\fR
.PP
Pointer to the set we're iterating over.
.PP


.SH AUTHOR
.PP 
Generated automatically by Doxygen for ACE from the source code.