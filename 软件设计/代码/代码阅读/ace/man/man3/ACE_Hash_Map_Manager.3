.TH ACE_Hash_Map_Manager 3 "5 Oct 2001" "ACE" \" -*- nroff -*-
.ad l
.nh
.SH NAME
ACE_Hash_Map_Manager \- Wrapper for backward compatibility. 
.SH SYNOPSIS
.br
.PP
\fC#include <Hash_Map_Manager_T.h>\fR
.PP
Inherits \fBACE_Hash_Map_Manager_Ex< EXT_ID,INT_ID,ACE_Hash< EXT_ID >,ACE_Equal_To< EXT_ID >,ACE_LOCK >\fR.
.PP
Inherited by \fBACE_Hash_Map_With_Allocator\fR, and \fBACE_Name_Space_Map\fR.
.PP
.SS Public Methods

.in +1c
.ti -1c
.RI "\fBACE_Hash_Map_Manager\fR (\fBACE_Allocator\fR *alloc = 0)"
.br
.RI "\fIInitialize a <Hash_Map_Manager> with default size.\fR"
.ti -1c
.RI "\fBACE_Hash_Map_Manager\fR (size_t size, \fBACE_Allocator\fR *alloc = 0)"
.br
.RI "\fIInitialize a <Hash_Map_Manager> with size <length>.\fR"
.ti -1c
.RI "int \fBequal\fR (const EXT_ID &id1, const EXT_ID &id2)"
.br
.RI "\fIReturns 1 if <id1> == <id2>, else 0. This is defined as a separate method to facilitate template specialization.\fR"
.ti -1c
.RI "u_long \fBhash\fR (const EXT_ID &ext_id)"
.br
.RI "\fICompute the hash value of the <ext_id>. This is defined as a separate method to facilitate template specialization.\fR"
.in -1c
.SH DETAILED DESCRIPTION
.PP 

.SS template<class EXT_ID, class INT_ID, class ACE_LOCK>  template class ACE_Hash_Map_Manager
Wrapper for backward compatibility.
.PP
.PP
 This implementation of a map uses a hash table. This class expects that the <EXT_ID> contains a method called <hash>. In addition, the <EXT_ID> must support <operator==>. Both of these constraints can be alleviated via template specialization, as shown in the $ACE_ROOT/tests/Conn_Test.cpp test. 
.PP
.SH CONSTRUCTOR & DESTRUCTOR DOCUMENTATION
.PP 
.SS template<classEXT_ID, classINT_ID, classACE_LOCK> ACE_Hash_Map_Manager<EXT_ID, INT_ID, ACE_LOCK>::ACE_Hash_Map_Manager<EXT_ID, INT_ID, ACE_LOCK> (\fBACE_Allocator\fR * alloc = 0)
.PP
Initialize a <Hash_Map_Manager> with default size.
.PP
.SS template<classEXT_ID, classINT_ID, classACE_LOCK> ACE_Hash_Map_Manager<EXT_ID, INT_ID, ACE_LOCK>::ACE_Hash_Map_Manager<EXT_ID, INT_ID, ACE_LOCK> (size_t size, \fBACE_Allocator\fR * alloc = 0)
.PP
Initialize a <Hash_Map_Manager> with size <length>.
.PP
.SH MEMBER FUNCTION DOCUMENTATION
.PP 
.SS template<classEXT_ID, classINT_ID, classACE_LOCK> int ACE_Hash_Map_Manager<EXT_ID, INT_ID, ACE_LOCK>::equal (const EXT_ID & id1, const EXT_ID & id2)
.PP
Returns 1 if <id1> == <id2>, else 0. This is defined as a separate method to facilitate template specialization.
.PP
Reimplemented from \fBACE_Hash_Map_Manager_Ex\fR.
.SS template<classEXT_ID, classINT_ID, classACE_LOCK> u_long ACE_Hash_Map_Manager<EXT_ID, INT_ID, ACE_LOCK>::hash (const EXT_ID & ext_id)
.PP
Compute the hash value of the <ext_id>. This is defined as a separate method to facilitate template specialization.
.PP
Reimplemented from \fBACE_Hash_Map_Manager_Ex\fR.

.SH AUTHOR
.PP 
Generated automatically by Doxygen for ACE from the source code.