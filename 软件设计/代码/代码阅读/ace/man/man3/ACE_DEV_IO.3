.TH ACE_DEV_IO 3 "5 Oct 2001" "ACE" \" -*- nroff -*-
.ad l
.nh
.SH NAME
ACE_DEV_IO \- Read/Write operations on Devices. 
.SH SYNOPSIS
.br
.PP
\fC#include <DEV_IO.h>\fR
.PP
Inherits \fBACE_DEV\fR.
.PP
Inherited by \fBACE_TTY_IO\fR.
.PP
.SS Public Types

.in +1c
.ti -1c
.RI "typedef \fBACE_DEV_Addr\fR \fBPEER_ADDR\fR"
.br
.in -1c
.SS Public Methods

.in +1c
.ti -1c
.RI "\fBACE_DEV_IO\fR (void)"
.br
.RI "\fIDefault constructor.\fR"
.ti -1c
.RI "\fBssize_t\fR \fBsend\fR (const void *buf, size_t n) const"
.br
.RI "\fIsend upto <n> bytes in <buf>.\fR"
.ti -1c
.RI "\fBssize_t\fR \fBrecv\fR (void *buf, size_t n) const"
.br
.RI "\fIRecv upto <n> bytes in <buf>.\fR"
.ti -1c
.RI "\fBssize_t\fR \fBsend_n\fR (const void *buf, size_t n) const"
.br
.RI "\fISend n bytes, keep trying until n are sent.\fR"
.ti -1c
.RI "\fBssize_t\fR \fBrecv_n\fR (void *buf, size_t n) const"
.br
.RI "\fIRecv n bytes, keep trying until n are received.\fR"
.ti -1c
.RI "\fBssize_t\fR \fBsend\fR (const \fBiovec\fR iov[], size_t n) const"
.br
.RI "\fISend iovecs via <writev>.\fR"
.ti -1c
.RI "\fBssize_t\fR \fBrecv\fR (\fBiovec\fR iov[], size_t n) const"
.br
.RI "\fIRecv iovecs via <readv>.\fR"
.ti -1c
.RI "\fBssize_t\fR \fBsend\fR (size_t n, ...) const"
.br
.ti -1c
.RI "\fBssize_t\fR \fBrecv\fR (size_t n, ...) const"
.br
.ti -1c
.RI "\fBssize_t\fR \fBsend\fR (const void *buf, size_t n, \fBACE_OVERLAPPED\fR *overlapped) const"
.br
.RI "\fISend <n> bytes via Win32 WriteFile using overlapped I/O.\fR"
.ti -1c
.RI "\fBssize_t\fR \fBrecv\fR (void *buf, size_t n, \fBACE_OVERLAPPED\fR *overlapped) const"
.br
.RI "\fIRecv <n> bytes via Win32 ReadFile using overlapped I/O.\fR"
.ti -1c
.RI "void \fBdump\fR (void) const"
.br
.RI "\fIDump the state of an object.\fR"
.ti -1c
.RI "int \fBget_local_addr\fR (\fBACE_DEV_Addr\fR &) const"
.br
.RI "\fIReturn the local endpoint address.\fR"
.ti -1c
.RI "int \fBget_remote_addr\fR (\fBACE_DEV_Addr\fR &) const"
.br
.RI "\fIReturn the address of the remotely connected peer (if there is one).\fR"
.in -1c
.SS Public Attributes

.in +1c
.ti -1c
.RI "\fBACE_ALLOC_HOOK_DECLARE\fR"
.br
.RI "\fIDeclare the dynamic allocation hooks.\fR"
.in -1c
.SS Private Attributes

.in +1c
.ti -1c
.RI "\fBACE_DEV_Addr\fR \fBaddr_\fR"
.br
.RI "\fIAddress of device we are connected to.\fR"
.in -1c
.SS Friends

.in +1c
.ti -1c
.RI "class \fBACE_DEV_Connector\fR"
.br
.in -1c
.SH DETAILED DESCRIPTION
.PP 
Read/Write operations on Devices.
.PP
.SH MEMBER TYPEDEF DOCUMENTATION
.PP 
.SS typedef \fBACE_DEV_Addr\fR ACE_DEV_IO::PEER_ADDR
.PP
.SH CONSTRUCTOR & DESTRUCTOR DOCUMENTATION
.PP 
.SS ACE_DEV_IO::ACE_DEV_IO (void)
.PP
Default constructor.
.PP
.SH MEMBER FUNCTION DOCUMENTATION
.PP 
.SS void ACE_DEV_IO::dump (void) const
.PP
Dump the state of an object.
.PP
Reimplemented from \fBACE_DEV\fR.
.SS int ACE_DEV_IO::get_local_addr (\fBACE_DEV_Addr\fR &) const
.PP
Return the local endpoint address.
.PP
.SS int ACE_DEV_IO::get_remote_addr (\fBACE_DEV_Addr\fR &) const
.PP
Return the address of the remotely connected peer (if there is one).
.PP
.SS \fBssize_t\fR ACE_DEV_IO::recv (void * buf, size_t n, \fBACE_OVERLAPPED\fR * overlapped) const
.PP
Recv <n> bytes via Win32 ReadFile using overlapped I/O.
.PP
.SS \fBssize_t\fR ACE_DEV_IO::recv (size_t n, ...) const
.PP
This is an interface to readv, that doesn't use the struct \fBiovec\fR explicitly. The ... can be passed as an arbitrary number of (char *ptr, int len) tuples. However, the count N is the *total* number of trailing arguments, *not* a couple of the number of tuple pairs! 
.SS \fBssize_t\fR ACE_DEV_IO::recv (\fBiovec\fR iov[], size_t n) const
.PP
Recv iovecs via <readv>.
.PP
.SS \fBssize_t\fR ACE_DEV_IO::recv (void * buf, size_t n) const
.PP
Recv upto <n> bytes in <buf>.
.PP
.SS \fBssize_t\fR ACE_DEV_IO::recv_n (void * buf, size_t n) const
.PP
Recv n bytes, keep trying until n are received.
.PP
.SS \fBssize_t\fR ACE_DEV_IO::send (const void * buf, size_t n, \fBACE_OVERLAPPED\fR * overlapped) const
.PP
Send <n> bytes via Win32 WriteFile using overlapped I/O.
.PP
.SS \fBssize_t\fR ACE_DEV_IO::send (size_t n, ...) const
.PP
Send N char *ptrs and int lengths. Note that the char *'s precede the ints (basically, an varargs version of writev). The count N is the *total* number of trailing arguments, *not* a couple of the number of tuple pairs! 
.SS \fBssize_t\fR ACE_DEV_IO::send (const \fBiovec\fR iov[], size_t n) const
.PP
Send iovecs via <writev>.
.PP
.SS \fBssize_t\fR ACE_DEV_IO::send (const void * buf, size_t n) const
.PP
send upto <n> bytes in <buf>.
.PP
.SS \fBssize_t\fR ACE_DEV_IO::send_n (const void * buf, size_t n) const
.PP
Send n bytes, keep trying until n are sent.
.PP
.SH FRIENDS AND RELATED FUNCTION DOCUMENTATION
.PP 
.SS class ACE_DEV_Connector\fC [friend]\fR
.PP
.SH MEMBER DATA DOCUMENTATION
.PP 
.SS ACE_DEV_IO::ACE_ALLOC_HOOK_DECLARE
.PP
Declare the dynamic allocation hooks.
.PP
Reimplemented from \fBACE_DEV\fR.
.SS \fBACE_DEV_Addr\fR ACE_DEV_IO::addr_\fC [private]\fR
.PP
Address of device we are connected to.
.PP


.SH AUTHOR
.PP 
Generated automatically by Doxygen for ACE from the source code.