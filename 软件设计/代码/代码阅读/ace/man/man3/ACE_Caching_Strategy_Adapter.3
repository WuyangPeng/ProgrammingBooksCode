.TH ACE_Caching_Strategy_Adapter 3 "5 Oct 2001" "ACE" \" -*- nroff -*-
.ad l
.nh
.SH NAME
ACE_Caching_Strategy_Adapter \- This class follows the Adaptor pattern and is used to provide External Polymorphism by deriving from \fBACE_Caching_Strategy\fR. 
.SH SYNOPSIS
.br
.PP
\fC#include <Caching_Strategies_T.h>\fR
.PP
Inherits \fBACE_Caching_Strategy< ATTRIBUTES,CACHING_UTILITY >\fR.
.PP
.SS Public Methods

.in +1c
.ti -1c
.RI "\fBACE_Caching_Strategy_Adapter\fR (IMPLEMENTATION *implementation = 0, int delete_implementation = 0)"
.br
.RI "\fIConstructor.\fR"
.ti -1c
.RI "\fB~ACE_Caching_Strategy_Adapter\fR (void)"
.br
.RI "\fIDestructor.\fR"
.ti -1c
.RI "ATTRIBUTES \fBattributes\fR (void)"
.br
.RI "\fIAccessor method for the timer attributes.\fR"
.ti -1c
.RI "double \fBpurge_percent\fR (void)"
.br
.ti -1c
.RI "void \fBpurge_percent\fR (double percentage)"
.br
.ti -1c
.RI "int \fBnotify_bind\fR (int result, const ATTRIBUTES &attr)"
.br
.RI "\fIThis method acts as a notification about the CONTAINERs bind method call.\fR"
.ti -1c
.RI "int \fBnotify_find\fR (int result, ATTRIBUTES &attr)"
.br
.RI "\fIThis method acts as a notification about the CONTAINERs find method call.\fR"
.ti -1c
.RI "int \fBnotify_unbind\fR (int result, const ATTRIBUTES &attr)"
.br
.RI "\fIThis method acts as a notification about the CONTAINERs unbind method call.\fR"
.ti -1c
.RI "int \fBnotify_trybind\fR (int result, ATTRIBUTES &attr)"
.br
.RI "\fIThis method acts as a notification about the CONTAINERs trybind method call.\fR"
.ti -1c
.RI "int \fBnotify_rebind\fR (int result, const ATTRIBUTES &attr)"
.br
.RI "\fIThis method acts as a notification about the CONTAINERs rebind method call.\fR"
.ti -1c
.RI "IMPLEMENTATION& \fBimplementation\fR (void)"
.br
.RI "\fIAccessor to the implementation.\fR"
.ti -1c
.RI "CACHING_UTILITY& \fBcaching_utility\fR (void)"
.br
.RI "\fIPurge the cache.\fR"
.ti -1c
.RI "void \fBdump\fR (void) const"
.br
.RI "\fIDumps the state of the object.\fR"
.in -1c
.SS Private Attributes

.in +1c
.ti -1c
.RI "IMPLEMENTATION* \fBimplementation_\fR"
.br
.RI "\fIImplementation class.\fR"
.ti -1c
.RI "int \fBdelete_implementation_\fR"
.br
.RI "\fIDo we need to delete the implementation?\fR"
.in -1c
.SH DETAILED DESCRIPTION
.PP 

.SS template<class ATTRIBUTES, class CACHING_UTILITY, class IMPLEMENTATION>  template class ACE_Caching_Strategy_Adapter
This class follows the Adaptor pattern and is used to provide External Polymorphism by deriving from \fBACE_Caching_Strategy\fR.
.PP
.PP
 This class simply delegates all requests to the IMPLEMNETATION object within. This class should be passed in place of the the abstract base \fBACE_Caching_Strategy\fR class as part of the External Polymorphism pattern. 
.PP
.SH CONSTRUCTOR & DESTRUCTOR DOCUMENTATION
.PP 
.SS template<classATTRIBUTES, classCACHING_UTILITY, classIMPLEMENTATION> ACE_Caching_Strategy_Adapter<ATTRIBUTES, CACHING_UTILITY, IMPLEMENTATION>::ACE_Caching_Strategy_Adapter<ATTRIBUTES, CACHING_UTILITY, IMPLEMENTATION> (IMPLEMENTATION * implementation = 0, int delete_implementation = 0)
.PP
Constructor.
.PP
.SS template<classATTRIBUTES, classCACHING_UTILITY, classIMPLEMENTATION> ACE_Caching_Strategy_Adapter<ATTRIBUTES, CACHING_UTILITY, IMPLEMENTATION>::~ACE_Caching_Strategy_Adapter<ATTRIBUTES, CACHING_UTILITY, IMPLEMENTATION> (void)
.PP
Destructor.
.PP
.SH MEMBER FUNCTION DOCUMENTATION
.PP 
.SS template<classATTRIBUTES, classCACHING_UTILITY, classIMPLEMENTATION> ATTRIBUTES ACE_Caching_Strategy_Adapter<ATTRIBUTES, CACHING_UTILITY, IMPLEMENTATION>::attributes (void)\fC [virtual]\fR
.PP
Accessor method for the timer attributes.
.PP
Reimplemented from \fBACE_Caching_Strategy\fR.
.SS template<classATTRIBUTES, classCACHING_UTILITY, classIMPLEMENTATION> CACHING_UTILITY & ACE_Caching_Strategy_Adapter<ATTRIBUTES, CACHING_UTILITY, IMPLEMENTATION>::caching_utility (void)\fC [virtual]\fR
.PP
Purge the cache.
.PP
Reimplemented from \fBACE_Caching_Strategy\fR.
.SS template<classATTRIBUTES, classCACHING_UTILITY, classIMPLEMENTATION> void ACE_Caching_Strategy_Adapter<ATTRIBUTES, CACHING_UTILITY, IMPLEMENTATION>::dump (void) const\fC [virtual]\fR
.PP
Dumps the state of the object.
.PP
Reimplemented from \fBACE_Caching_Strategy\fR.
.SS template<classATTRIBUTES, classCACHING_UTILITY, classIMPLEMENTATION> IMPLEMENTATION & ACE_Caching_Strategy_Adapter<ATTRIBUTES, CACHING_UTILITY, IMPLEMENTATION>::implementation (void)
.PP
Accessor to the implementation.
.PP
.SS template<classATTRIBUTES, classCACHING_UTILITY, classIMPLEMENTATION> int ACE_Caching_Strategy_Adapter<ATTRIBUTES, CACHING_UTILITY, IMPLEMENTATION>::notify_bind (int result, const ATTRIBUTES & attr)\fC [virtual]\fR
.PP
This method acts as a notification about the CONTAINERs bind method call.
.PP
Reimplemented from \fBACE_Caching_Strategy\fR.
.SS template<classATTRIBUTES, classCACHING_UTILITY, classIMPLEMENTATION> int ACE_Caching_Strategy_Adapter<ATTRIBUTES, CACHING_UTILITY, IMPLEMENTATION>::notify_find (int result, ATTRIBUTES & attr)\fC [virtual]\fR
.PP
This method acts as a notification about the CONTAINERs find method call.
.PP
Reimplemented from \fBACE_Caching_Strategy\fR.
.SS template<classATTRIBUTES, classCACHING_UTILITY, classIMPLEMENTATION> int ACE_Caching_Strategy_Adapter<ATTRIBUTES, CACHING_UTILITY, IMPLEMENTATION>::notify_rebind (int result, const ATTRIBUTES & attr)\fC [virtual]\fR
.PP
This method acts as a notification about the CONTAINERs rebind method call.
.PP
Reimplemented from \fBACE_Caching_Strategy\fR.
.SS template<classATTRIBUTES, classCACHING_UTILITY, classIMPLEMENTATION> int ACE_Caching_Strategy_Adapter<ATTRIBUTES, CACHING_UTILITY, IMPLEMENTATION>::notify_trybind (int result, ATTRIBUTES & attr)\fC [virtual]\fR
.PP
This method acts as a notification about the CONTAINERs trybind method call.
.PP
Reimplemented from \fBACE_Caching_Strategy\fR.
.SS template<classATTRIBUTES, classCACHING_UTILITY, classIMPLEMENTATION> int ACE_Caching_Strategy_Adapter<ATTRIBUTES, CACHING_UTILITY, IMPLEMENTATION>::notify_unbind (int result, const ATTRIBUTES & attr)\fC [virtual]\fR
.PP
This method acts as a notification about the CONTAINERs unbind method call.
.PP
Reimplemented from \fBACE_Caching_Strategy\fR.
.SS template<classATTRIBUTES, classCACHING_UTILITY, classIMPLEMENTATION> void ACE_Caching_Strategy_Adapter<ATTRIBUTES, CACHING_UTILITY, IMPLEMENTATION>::purge_percent (double percentage)\fC [virtual]\fR
.PP
Reimplemented from \fBACE_Caching_Strategy\fR.
.SS template<classATTRIBUTES, classCACHING_UTILITY, classIMPLEMENTATION> double ACE_Caching_Strategy_Adapter<ATTRIBUTES, CACHING_UTILITY, IMPLEMENTATION>::purge_percent (void)\fC [virtual]\fR
.PP
Reimplemented from \fBACE_Caching_Strategy\fR.
.SH MEMBER DATA DOCUMENTATION
.PP 
.SS template<classATTRIBUTES, classCACHING_UTILITY, classIMPLEMENTATION> int ACE_Caching_Strategy_Adapter<ATTRIBUTES, CACHING_UTILITY, IMPLEMENTATION>::delete_implementation_\fC [private]\fR
.PP
Do we need to delete the implementation?
.PP
.SS template<classATTRIBUTES, classCACHING_UTILITY, classIMPLEMENTATION> IMPLEMENTATION * ACE_Caching_Strategy_Adapter<ATTRIBUTES, CACHING_UTILITY, IMPLEMENTATION>::implementation_\fC [private]\fR
.PP
Implementation class.
.PP


.SH AUTHOR
.PP 
Generated automatically by Doxygen for ACE from the source code.