.TH ACE_NS_String 3 "5 Oct 2001" "ACE" \" -*- nroff -*-
.ad l
.nh
.SH NAME
ACE_NS_String \- This class and \fBACE_NS_Internal\fR are used as Adapters to work with the Map_Manager. 
.SH SYNOPSIS
.br
.PP
\fC#include <Local_Name_Space.h>\fR
.PP
.SS Public Methods

.in +1c
.ti -1c
.RI "\fBACE_NS_String\fR (void)"
.br
.RI "\fIDefault "no-op" constructor.\fR"
.ti -1c
.RI "\fBACE_NS_String\fR (\fBACE_USHORT16\fR *dst, const \fBACE_USHORT16\fR *src, size_t len)"
.br
.RI "\fIInitialization method.\fR"
.ti -1c
.RI "\fBACE_NS_String\fR (const \fBACE_WString\fR &)"
.br
.RI "\fIConverts an \fBACE_WString\fR to an ACE_NS_String;.\fR"
.ti -1c
.RI "\fB~ACE_NS_String\fR (void)"
.br
.RI "\fIDestructor.\fR"
.ti -1c
.RI "\fBoperator ACE_WString\fR () const"
.br
.RI "\fIConverts an ACE_NS_String to fresh copy of an \fBACE_WString\fR;.\fR"
.ti -1c
.RI "char* \fBchar_rep\fR (void) const"
.br
.RI "\fIReturn the ASCII character representation.\fR"
.ti -1c
.RI "int \fBstrstr\fR (const ACE_NS_String &) const"
.br
.RI "\fIMatches on substrings.\fR"
.ti -1c
.RI "int \fBoperator==\fR (const ACE_NS_String &) const"
.br
.RI "\fICompare an ACE_NS_String.\fR"
.ti -1c
.RI "int \fBoperator!=\fR (const ACE_NS_String &) const"
.br
.RI "\fICompare an ACE_NS_String.\fR"
.ti -1c
.RI "size_t \fBlen\fR (void) const"
.br
.RI "\fIReturns length of the string.\fR"
.ti -1c
.RI "\fBACE_USHORT16\fR* \fBfast_rep\fR (void) const"
.br
.RI "\fIReturns the underlying representation.\fR"
.ti -1c
.RI "size_t \fBhash\fR (void) const"
.br
.RI "\fIReturns a hash value for this string.\fR"
.in -1c
.SS Private Attributes

.in +1c
.ti -1c
.RI "size_t \fBlen_\fR"
.br
.RI "\fILength of the string.\fR"
.ti -1c
.RI "\fBACE_USHORT16\fR* \fBrep_\fR"
.br
.RI "\fIThis actually points into shared/persistent memory.\fR"
.ti -1c
.RI "int \fBdelete_rep_\fR"
.br
.RI "\fIShould rep_ be deleted when destructed (only used for WString conversions).\fR"
.in -1c
.SH DETAILED DESCRIPTION
.PP 
This class and \fBACE_NS_Internal\fR are used as Adapters to work with the Map_Manager.
.PP
.PP
 In order to work correctly, this class must be able to convert back and forth with . Note that this class must not have a destructor since otherwise we'll have problems... 
.PP
.SH CONSTRUCTOR & DESTRUCTOR DOCUMENTATION
.PP 
.SS ACE_NS_String::ACE_NS_String (void)
.PP
Default "no-op" constructor.
.PP
.SS ACE_NS_String::ACE_NS_String (\fBACE_USHORT16\fR * dst, const \fBACE_USHORT16\fR * src, size_t len)
.PP
Initialization method.
.PP
.SS ACE_NS_String::ACE_NS_String (const \fBACE_WString\fR &)
.PP
Converts an \fBACE_WString\fR to an ACE_NS_String;.
.PP
.SS ACE_NS_String::~ACE_NS_String (void)
.PP
Destructor.
.PP
.SH MEMBER FUNCTION DOCUMENTATION
.PP 
.SS char * ACE_NS_String::char_rep (void) const
.PP
Return the ASCII character representation.
.PP
.SS \fBACE_USHORT16\fR * ACE_NS_String::fast_rep (void) const
.PP
Returns the underlying representation.
.PP
.SS size_t ACE_NS_String::hash (void) const
.PP
Returns a hash value for this string.
.PP
.SS size_t ACE_NS_String::len (void) const
.PP
Returns length of the string.
.PP
.SS ACE_NS_String::operator \fBACE_WString\fR () const
.PP
Converts an ACE_NS_String to fresh copy of an \fBACE_WString\fR;.
.PP
.SS int ACE_NS_String::operator!= (const ACE_NS_String &) const
.PP
Compare an ACE_NS_String.
.PP
.SS int ACE_NS_String::operator== (const ACE_NS_String &) const
.PP
Compare an ACE_NS_String.
.PP
.SS int ACE_NS_String::strstr (const ACE_NS_String &) const
.PP
Matches on substrings.
.PP
.SH MEMBER DATA DOCUMENTATION
.PP 
.SS int ACE_NS_String::delete_rep_\fC [private]\fR
.PP
Should rep_ be deleted when destructed (only used for WString conversions).
.PP
.SS size_t ACE_NS_String::len_\fC [private]\fR
.PP
Length of the string.
.PP
.SS \fBACE_USHORT16\fR * ACE_NS_String::rep_\fC [private]\fR
.PP
This actually points into shared/persistent memory.
.PP


.SH AUTHOR
.PP 
Generated automatically by Doxygen for ACE from the source code.