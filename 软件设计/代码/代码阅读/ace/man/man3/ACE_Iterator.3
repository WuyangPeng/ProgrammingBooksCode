.TH ACE_Iterator 3 "5 Oct 2001" "ACE" \" -*- nroff -*-
.ad l
.nh
.SH NAME
ACE_Iterator \- Defines the iterator interface. 
.SH SYNOPSIS
.br
.PP
\fC#include <Map_T.h>\fR
.PP
.SS Public Types

.in +1c
.ti -1c
.RI "typedef T \fBvalue_type\fR"
.br
.ti -1c
.RI "typedef \fBACE_Iterator_Impl\fR<T> \fBimplementation\fR"
.br
.in -1c
.SS Public Methods

.in +1c
.ti -1c
.RI "\fBACE_Iterator\fR (\fBACE_Iterator_Impl\fR<T> *impl)"
.br
.RI "\fIConstructor.\fR"
.ti -1c
.RI "\fBACE_Iterator\fR (const ACE_Iterator<T> &rhs)"
.br
.RI "\fICopy constructor.\fR"
.ti -1c
.RI "\fB~ACE_Iterator\fR (void)"
.br
.RI "\fIDestructor.\fR"
.ti -1c
.RI "ACE_Iterator<T>& \fBoperator=\fR (const ACE_Iterator<T> &rhs)"
.br
.RI "\fIAssignment operator.\fR"
.ti -1c
.RI "int \fBoperator==\fR (const ACE_Iterator<T> &rhs) const"
.br
.RI "\fIComparison operators.\fR"
.ti -1c
.RI "int \fBoperator!=\fR (const ACE_Iterator<T> &rhs) const"
.br
.ti -1c
.RI "T \fBoperator *\fR () const"
.br
.RI "\fIDereference operator.\fR"
.ti -1c
.RI "ACE_Iterator<T>& \fBoperator++\fR (void)"
.br
.RI "\fIPrefix advance.\fR"
.ti -1c
.RI "ACE_Iterator<T> \fBoperator++\fR (int)"
.br
.RI "\fIPostfix advance.\fR"
.ti -1c
.RI "ACE_Iterator<T>& \fBoperator--\fR (void)"
.br
.RI "\fIPrefix reverse.\fR"
.ti -1c
.RI "ACE_Iterator<T> \fBoperator--\fR (int)"
.br
.RI "\fIPostfix reverse.\fR"
.ti -1c
.RI "\fBACE_Iterator_Impl\fR<T>& \fBimpl\fR (void)"
.br
.RI "\fIAccessor to implementation object.\fR"
.in -1c
.SS Protected Attributes

.in +1c
.ti -1c
.RI "\fBACE_Iterator_Impl\fR<T>* \fBimplementation_\fR"
.br
.RI "\fIImplementation pointer.\fR"
.in -1c
.SH DETAILED DESCRIPTION
.PP 

.SS template<class T>  template class ACE_Iterator
Defines the iterator interface.
.PP
.PP
 Implementation to be provided by forwarding. 
.PP
.SH MEMBER TYPEDEF DOCUMENTATION
.PP 
.SS template<classT> typedef \fBACE_Iterator_Impl\fR<T> ACE_Iterator<T>::implementation
.PP
.SS template<classT> typedef T ACE_Iterator<T>::value_type
.PP
.SH CONSTRUCTOR & DESTRUCTOR DOCUMENTATION
.PP 
.SS template<classT> ACE_Iterator<T>::ACE_Iterator<T> (\fBACE_Iterator_Impl\fR< T >* impl)
.PP
Constructor.
.PP
.SS template<classT> ACE_Iterator<T>::ACE_Iterator<T> (const ACE_Iterator< T >& rhs)
.PP
Copy constructor.
.PP
.SS template<classT> ACE_Iterator<T>::~ACE_Iterator<T> (void)
.PP
Destructor.
.PP
.SH MEMBER FUNCTION DOCUMENTATION
.PP 
.SS template<classT> \fBACE_Iterator_Impl\fR< T >& ACE_Iterator<T>::impl (void)
.PP
Accessor to implementation object.
.PP
.SS template<classT> T ACE_Iterator<T>::operator * () const
.PP
Dereference operator.
.PP
.SS template<classT> int ACE_Iterator<T>::operator!= (const ACE_Iterator< T >& rhs) const
.PP
.SS template<classT> ACE_Iterator< T > ACE_Iterator<T>::operator++ (int)
.PP
Postfix advance.
.PP
.SS template<classT> ACE_Iterator< T >& ACE_Iterator<T>::operator++ (void)
.PP
Prefix advance.
.PP
.SS template<classT> ACE_Iterator< T > ACE_Iterator<T>::operator-- (int)
.PP
Postfix reverse.
.PP
.SS template<classT> ACE_Iterator< T >& ACE_Iterator<T>::operator-- (void)
.PP
Prefix reverse.
.PP
.SS template<classT> ACE_Iterator< T >& ACE_Iterator<T>::operator= (const ACE_Iterator< T >& rhs)
.PP
Assignment operator.
.PP
.SS template<classT> int ACE_Iterator<T>::operator== (const ACE_Iterator< T >& rhs) const
.PP
Comparison operators.
.PP
.SH MEMBER DATA DOCUMENTATION
.PP 
.SS template<classT> \fBACE_Iterator_Impl\fR< T >* ACE_Iterator<T>::implementation_\fC [protected]\fR
.PP
Implementation pointer.
.PP


.SH AUTHOR
.PP 
Generated automatically by Doxygen for ACE from the source code.