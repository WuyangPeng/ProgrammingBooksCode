.TH ACE_POSIX_AIOCB_Asynch_Transmit_File 3 "5 Oct 2001" "ACE" \" -*- nroff -*-
.ad l
.nh
.SH NAME
ACE_POSIX_AIOCB_Asynch_Transmit_File \- Implementation for transmit_file will make use of POSIX_AIOCB_Asynch_Transmit_Handler. 
.SH SYNOPSIS
.br
.PP
\fC#include <POSIX_Asynch_IO.h>\fR
.PP
Inherits \fBACE_Asynch_Transmit_File_Impl\fR, and \fBACE_POSIX_AIOCB_Asynch_Operation\fR.
.PP
.SS Public Methods

.in +1c
.ti -1c
.RI "\fBACE_POSIX_AIOCB_Asynch_Transmit_File\fR (\fBACE_POSIX_AIOCB_Proactor\fR *posix_aiocb_proactor)"
.br
.RI "\fIConstructor.\fR"
.ti -1c
.RI "int \fBtransmit_file\fR (ACE_HANDLE file, \fBACE_Asynch_Transmit_File::Header_And_Trailer\fR *header_and_trailer, u_long bytes_to_write, u_long offset, u_long offset_high, u_long bytes_per_send, u_long flags, const void *act, int priority, int signal_number = 0)"
.br
.ti -1c
.RI "virtual \fB~ACE_POSIX_AIOCB_Asynch_Transmit_File\fR (void)"
.br
.RI "\fIDestructor.\fR"
.ti -1c
.RI "int \fBopen\fR (\fBACE_Handler\fR &handler, ACE_HANDLE handle, const void *completion_key, \fBACE_Proactor\fR *proactor = 0)"
.br
.ti -1c
.RI "int \fBcancel\fR (void)"
.br
.RI "\fINot implemented. Returns 0.\fR"
.ti -1c
.RI "\fBACE_Proactor\fR* \fBproactor\fR (void) const"
.br
.RI "\fIReturn the underlying proactor.\fR"
.in -1c
.SH DETAILED DESCRIPTION
.PP 
Implementation for transmit_file will make use of POSIX_AIOCB_Asynch_Transmit_Handler.
.PP
.SH CONSTRUCTOR & DESTRUCTOR DOCUMENTATION
.PP 
.SS ACE_POSIX_AIOCB_Asynch_Transmit_File::ACE_POSIX_AIOCB_Asynch_Transmit_File (\fBACE_POSIX_AIOCB_Proactor\fR * posix_aiocb_proactor)
.PP
Constructor.
.PP
.SS ACE_POSIX_AIOCB_Asynch_Transmit_File::~ACE_POSIX_AIOCB_Asynch_Transmit_File (void)\fC [virtual]\fR
.PP
Destructor.
.PP
.SH MEMBER FUNCTION DOCUMENTATION
.PP 
.SS int ACE_POSIX_AIOCB_Asynch_Transmit_File::cancel (void)
.PP
Not implemented. Returns 0.
.PP
@ 
.PP
Reimplemented from \fBACE_POSIX_Asynch_Operation\fR.
.SS int ACE_POSIX_AIOCB_Asynch_Transmit_File::open (\fBACE_Handler\fR & handler, ACE_HANDLE handle, const void * completion_key, \fBACE_Proactor\fR * proactor = 0)
.PP
Initializes the factory with information which will be used with each asynchronous call. If (<handle> == ACE_INVALID_HANDLE),  will be called on the <handler> to get the correct handle. 
.PP
Reimplemented from \fBACE_POSIX_Asynch_Operation\fR.
.SS \fBACE_Proactor\fR * ACE_POSIX_AIOCB_Asynch_Transmit_File::proactor (void) const
.PP
Return the underlying proactor.
.PP
Reimplemented from \fBACE_POSIX_Asynch_Operation\fR.
.SS int ACE_POSIX_AIOCB_Asynch_Transmit_File::transmit_file (ACE_HANDLE file, \fBACE_Asynch_Transmit_File::Header_And_Trailer\fR * header_and_trailer, u_long bytes_to_write, u_long offset, u_long offset_high, u_long bytes_per_send, u_long flags, const void * act, int priority, int signal_number = 0)
.PP
This starts off an asynchronous transmit file. The <file> is a handle to an open file. <header_and_trailer> is a pointer to a data structure that contains pointers to data to send before and after the file data is sent. Set this parameter to 0 if you only want to transmit the file data. Upto <bytes_to_write> will be written to the <socket>. If you want to send the entire file, let <bytes_to_write> = 0. <bytes_per_send> is the size of each block of data sent per send operation. Please read the POSIX documentation on what the flags should be. 

.SH AUTHOR
.PP 
Generated automatically by Doxygen for ACE from the source code.