.TH ACE_Thread_Semaphore 3 "5 Oct 2001" "ACE" \" -*- nroff -*-
.ad l
.nh
.SH NAME
ACE_Thread_Semaphore \- Wrapper for Dijkstra style general semaphores that work only within one process. 
.SH SYNOPSIS
.br
.PP
\fC#include <Synch.h>\fR
.PP
Inherits \fBACE_Semaphore\fR.
.PP
.SS Public Methods

.in +1c
.ti -1c
.RI "\fBACE_Thread_Semaphore\fR (u_int count = 1, const \fBACE_TCHAR\fR *name = 0, void * = 0, int max = 0x7FFFFFFF)"
.br
.RI "\fIInitialize the semaphore, with an initial value of <count>, maximum value of <max>, and unlocked by default.\fR"
.ti -1c
.RI "\fB~ACE_Thread_Semaphore\fR (void)"
.br
.RI "\fIDefault dtor.\fR"
.ti -1c
.RI "void \fBdump\fR (void) const"
.br
.RI "\fIDump the state of an object.\fR"
.in -1c
.SS Public Attributes

.in +1c
.ti -1c
.RI "\fBACE_ALLOC_HOOK_DECLARE\fR"
.br
.RI "\fIDeclare the dynamic allocation hooks.\fR"
.in -1c
.SH DETAILED DESCRIPTION
.PP 
Wrapper for Dijkstra style general semaphores that work only within one process.
.PP
.SH CONSTRUCTOR & DESTRUCTOR DOCUMENTATION
.PP 
.SS ACE_Thread_Semaphore::ACE_Thread_Semaphore (u_int count = 1, const \fBACE_TCHAR\fR * name = 0, void * = 0, int max = 0x7FFFFFFF)
.PP
Initialize the semaphore, with an initial value of <count>, maximum value of <max>, and unlocked by default.
.PP
.SS ACE_Thread_Semaphore::~ACE_Thread_Semaphore (void)
.PP
Default dtor.
.PP
.SH MEMBER FUNCTION DOCUMENTATION
.PP 
.SS void ACE_Thread_Semaphore::dump (void) const
.PP
Dump the state of an object.
.PP
Reimplemented from \fBACE_Semaphore\fR.
.SH MEMBER DATA DOCUMENTATION
.PP 
.SS ACE_Thread_Semaphore::ACE_ALLOC_HOOK_DECLARE
.PP
Declare the dynamic allocation hooks.
.PP
Reimplemented from \fBACE_Semaphore\fR.

.SH AUTHOR
.PP 
Generated automatically by Doxygen for ACE from the source code.