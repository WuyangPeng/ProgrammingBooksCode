.TH ACE_IOStream 3 "5 Oct 2001" "ACE" \" -*- nroff -*-
.ad l
.nh
.SH NAME
ACE_IOStream \- A template adapter for creating an \fBiostream\fR-like object using an \fBACE\fR IPC Stream for the actual I/O. Iostreams use an underlying \fBstreambuf\fR object for the IO interface. The \fBiostream\fR class and derivatives provide you with a host of convenient operators that access the \fBstreambuf\fR. 
.SH SYNOPSIS
.br
.PP
\fC#include <IOStream_T.h>\fR
.PP
Inherits \fBiostream\fR, and \fBSTREAM\fR.
.PP
.SS Public Methods

.in +1c
.ti -1c
.RI "\fBACE_IOStream\fR (\fBSTREAM\fR &stream, u_int streambuf_size = ACE_STREAMBUF_SIZE)"
.br
.ti -1c
.RI "\fBACE_IOStream\fR (u_int streambuf_size = ACE_STREAMBUF_SIZE)"
.br
.ti -1c
.RI "virtual \fB~ACE_IOStream\fR (void)"
.br
.RI "\fIWe have to get rid of the <streambuf_> ourselves since we gave it to the <\fBiostream\fR> base class;.\fR"
.ti -1c
.RI "virtual int \fBclose\fR (void)"
.br
.RI "\fIThe only ambituity in the multiple inheritance is the <close> function.\fR"
.ti -1c
.RI "int \fBeof\fR (void) const"
.br
.ti -1c
.RI "\fBGETPUT_FUNC_SET\fR (ACE_IOStream<\fBSTREAM\fR>) virtual int ipfx0 (void)"
.br
.ti -1c
.RI "virtual int \fBipfx1\fR (void)"
.br
.ti -1c
.RI "virtual int \fBipfx\fR (int need = 0)"
.br
.ti -1c
.RI "virtual void \fBisfx\fR (void)"
.br
.ti -1c
.RI "virtual int \fBopfx\fR (void)"
.br
.ti -1c
.RI "virtual void \fBosfx\fR (void)"
.br
.ti -1c
.RI "ACE_IOStream<\fBSTREAM\fR>& \fBoperator>>\fR (\fBACE_Time_Value\fR *&tv)"
.br
.RI "\fIAllow the programmer to provide a timeout for read operations. Give it a pointer to NULL to block forever.\fR"
.in -1c
.SS Protected Attributes

.in +1c
.ti -1c
.RI "\fBACE_Streambuf_T\fR<\fBSTREAM\fR>* \fBstreambuf_\fR"
.br
.RI "\fIThis is where all of the action takes place. The streambuf_ is the interface to the underlying \fBSTREAM\fR.\fR"
.in -1c
.SS Private Methods

.in +1c
.ti -1c
.RI "\fBssize_t\fR \fBsend\fR (...)"
.br
.ti -1c
.RI "\fBssize_t\fR \fBrecv\fR (...)"
.br
.ti -1c
.RI "\fBssize_t\fR \fBsend_n\fR (...)"
.br
.ti -1c
.RI "\fBssize_t\fR \fBrecv_n\fR (...)"
.br
.in -1c
.SH DETAILED DESCRIPTION
.PP 

.SS template<class STREAM>  template class ACE_IOStream
A template adapter for creating an \fBiostream\fR-like object using an \fBACE\fR IPC Stream for the actual I/O. Iostreams use an underlying \fBstreambuf\fR object for the IO interface. The \fBiostream\fR class and derivatives provide you with a host of convenient operators that access the \fBstreambuf\fR.
.PP
.PP
 We inherit all characteristics of \fBiostream\fR and your <\fBSTREAM\fR> class. When you create a new class from this template, you can use it anywhere you would have used your original <\fBSTREAM\fR> class. To create an \fBiostream\fR for your favorite \fBACE\fR IPC class (e.g., ), feed that class to this template's <\fBSTREAM\fR> parameter, e.g., typedef \fBACE_Svc_Handler\fR Service_Handler; Because the operators in the \fBiostream\fR class are not virtual, you cannot easily provide overloads in your custom ACE_IOStream classes. To make these things work correctly, you need to overload ALL operators of the ACE_IOStream you create. I've attempted to do that here to make things easier for you but there are no guarantees. In the iostream.cpp file is an example of why it is necessary to overload all of the get/put operators when you want to customize only one or two. 
.PP
.SH CONSTRUCTOR & DESTRUCTOR DOCUMENTATION
.PP 
.SS template<classSTREAM> ACE_IOStream<\fBSTREAM\fR>::ACE_IOStream<\fBSTREAM\fR> (\fBSTREAM\fR & stream, u_int streambuf_size = ACE_STREAMBUF_SIZE)
.PP
.SS template<classSTREAM> ACE_IOStream<\fBSTREAM\fR>::ACE_IOStream<\fBSTREAM\fR> (u_int streambuf_size = ACE_STREAMBUF_SIZE)
.PP
The default constructor. This will initiailze your \fBSTREAM\fR and then setup the \fBiostream\fR baseclass to use a custom \fBstreambuf\fR based on \fBSTREAM\fR. 
.SS template<classSTREAM> ACE_IOStream<\fBSTREAM\fR>::~ACE_IOStream<\fBSTREAM\fR> (void)\fC [virtual]\fR
.PP
We have to get rid of the <streambuf_> ourselves since we gave it to the <\fBiostream\fR> base class;.
.PP
.SH MEMBER FUNCTION DOCUMENTATION
.PP 
.SS template<classSTREAM> ACE_IOStream<\fBSTREAM\fR>::GETPUT_FUNC_SET (ACE_IOStream< \fBSTREAM\fR >)\fC [inline]\fR
.PP
.SS template<classSTREAM> int ACE_IOStream<\fBSTREAM\fR>::close (void)\fC [virtual]\fR
.PP
The only ambituity in the multiple inheritance is the <close> function.
.PP
.SS template<classSTREAM> int ACE_IOStream<\fBSTREAM\fR>::eof (void) const
.PP
Returns 1 if we're at the end of the <\fBSTREAM\fR>, i.e., if the connection has closed down or an error has occurred, else 0. Under the covers, <eof> calls the \fBstreambuf\fR's <timeout> function which will reset the timeout flag. As as result, you should save the return of <eof> and check it instead of calling <eof> successively. 
.SS template<classSTREAM> int ACE_IOStream<\fBSTREAM\fR>::ipfx (int need = 0)\fC [inline, virtual]\fR
.PP
.SS template<classSTREAM> int ACE_IOStream<\fBSTREAM\fR>::ipfx1 (void)\fC [inline, virtual]\fR
.PP
.SS template<classSTREAM> void ACE_IOStream<\fBSTREAM\fR>::isfx (void)\fC [inline, virtual]\fR
.PP
.SS template<classSTREAM> ACE_IOStream< \fBSTREAM\fR >& ACE_IOStream<\fBSTREAM\fR>::operator>> (\fBACE_Time_Value\fR *& tv)
.PP
Allow the programmer to provide a timeout for read operations. Give it a pointer to NULL to block forever.
.PP
.SS template<classSTREAM> int ACE_IOStream<\fBSTREAM\fR>::opfx (void)\fC [inline, virtual]\fR
.PP
.SS template<classSTREAM> void ACE_IOStream<\fBSTREAM\fR>::osfx (void)\fC [inline, virtual]\fR
.PP
.SS template<classSTREAM> \fBssize_t\fR ACE_IOStream<\fBSTREAM\fR>::recv (...)\fC [private]\fR
.PP
.SS template<classSTREAM> \fBssize_t\fR ACE_IOStream<\fBSTREAM\fR>::recv_n (...)\fC [private]\fR
.PP
.SS template<classSTREAM> \fBssize_t\fR ACE_IOStream<\fBSTREAM\fR>::send (...)\fC [private]\fR
.PP
.SS template<classSTREAM> \fBssize_t\fR ACE_IOStream<\fBSTREAM\fR>::send_n (...)\fC [private]\fR
.PP
.SH MEMBER DATA DOCUMENTATION
.PP 
.SS template<classSTREAM> \fBACE_Streambuf_T\fR< \fBSTREAM\fR >* ACE_IOStream<\fBSTREAM\fR>::streambuf_\fC [protected]\fR
.PP
This is where all of the action takes place. The streambuf_ is the interface to the underlying \fBSTREAM\fR.
.PP


.SH AUTHOR
.PP 
Generated automatically by Doxygen for ACE from the source code.