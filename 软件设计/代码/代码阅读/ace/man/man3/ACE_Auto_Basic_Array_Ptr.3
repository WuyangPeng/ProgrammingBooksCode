.TH ACE_Auto_Basic_Array_Ptr 3 "5 Oct 2001" "ACE" \" -*- nroff -*-
.ad l
.nh
.SH NAME
ACE_Auto_Basic_Array_Ptr \- Implements an extension to the draft C++ standard \fBauto_ptr\fR abstraction. This class allows one to work on non-object (basic) types that must be treated as an array, e.g., deallocated via "delete [] foo". 
.SH SYNOPSIS
.br
.PP
\fC#include <Auto_Ptr.h>\fR
.PP
Inherited by \fBACE_Auto_Array_Ptr\fR.
.PP
.SS Public Methods

.in +1c
.ti -1c
.RI "ACE_EXPLICIT \fBACE_Auto_Basic_Array_Ptr\fR (X *p = 0)"
.br
.ti -1c
.RI "\fBACE_Auto_Basic_Array_Ptr\fR (ACE_Auto_Basic_Array_Ptr<X> &ap)"
.br
.ti -1c
.RI "ACE_Auto_Basic_Array_Ptr<X>& \fBoperator=\fR (ACE_Auto_Basic_Array_Ptr<X> &rhs)"
.br
.ti -1c
.RI "\fB~ACE_Auto_Basic_Array_Ptr\fR (void)"
.br
.ti -1c
.RI "X& \fBoperator *\fR () const"
.br
.ti -1c
.RI "X& \fBoperator[]\fR (int i) const"
.br
.ti -1c
.RI "X* \fBget\fR (void) const"
.br
.ti -1c
.RI "X* \fBrelease\fR (void)"
.br
.ti -1c
.RI "void \fBreset\fR (X *p = 0)"
.br
.ti -1c
.RI "void \fBdump\fR (void) const"
.br
.RI "\fIDump the state of an object.\fR"
.in -1c
.SS Public Attributes

.in +1c
.ti -1c
.RI "\fBACE_ALLOC_HOOK_DECLARE\fR"
.br
.RI "\fIDeclare the dynamic allocation hooks.\fR"
.in -1c
.SS Protected Attributes

.in +1c
.ti -1c
.RI "X* \fBp_\fR"
.br
.in -1c
.SH DETAILED DESCRIPTION
.PP 

.SS template<class X>  template class ACE_Auto_Basic_Array_Ptr
Implements an extension to the draft C++ standard \fBauto_ptr\fR abstraction. This class allows one to work on non-object (basic) types that must be treated as an array, e.g., deallocated via "delete [] foo".
.PP
.SH CONSTRUCTOR & DESTRUCTOR DOCUMENTATION
.PP 
.SS template<classX> ACE_EXPLICIT ACE_Auto_Basic_Array_Ptr<X>::ACE_Auto_Basic_Array_Ptr<X> (X * p = 0)\fC [inline]\fR
.PP
.SS template<classX> ACE_Auto_Basic_Array_Ptr<X>::ACE_Auto_Basic_Array_Ptr<X> (ACE_Auto_Basic_Array_Ptr< X >& ap)
.PP
.SS template<classX> ACE_Auto_Basic_Array_Ptr<X>::~ACE_Auto_Basic_Array_Ptr<X> (void)
.PP
.SH MEMBER FUNCTION DOCUMENTATION
.PP 
.SS template<classX> void ACE_Auto_Basic_Array_Ptr<X>::dump (void) const
.PP
Dump the state of an object.
.PP
.SS template<classX> X* ACE_Auto_Basic_Array_Ptr<X>::get (void) const
.PP
.SS template<classX> X& ACE_Auto_Basic_Array_Ptr<X>::operator * () const
.PP
.SS template<classX> ACE_Auto_Basic_Array_Ptr<X>& ACE_Auto_Basic_Array_Ptr<X>::operator= (ACE_Auto_Basic_Array_Ptr< X >& rhs)
.PP
.SS template<classX> X& ACE_Auto_Basic_Array_Ptr<X>::operator[] (int i) const
.PP
.SS template<classX> X* ACE_Auto_Basic_Array_Ptr<X>::release (void)
.PP
.SS template<classX> void ACE_Auto_Basic_Array_Ptr<X>::reset (X * p = 0)
.PP
.SH MEMBER DATA DOCUMENTATION
.PP 
.SS template<classX> ACE_Auto_Basic_Array_Ptr<X>::ACE_ALLOC_HOOK_DECLARE
.PP
Declare the dynamic allocation hooks.
.PP
.SS template<classX> X * ACE_Auto_Basic_Array_Ptr<X>::p_\fC [protected]\fR
.PP


.SH AUTHOR
.PP 
Generated automatically by Doxygen for ACE from the source code.