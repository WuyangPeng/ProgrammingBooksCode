/**
*Copyright (c) 2000-2001, Jim Crafton
*All rights reserved.
*Redistribution and use in source and binary forms, with or without
*modification, are permitted provided that the following conditions
*are met:
*	Redistributions of source code must retain the above copyright
*	notice, this list of conditions and the following disclaimer.
*
*	Redistributions in binary form must reproduce the above copyright
*	notice, this list of conditions and the following disclaimer in 
*	the documentation and/or other materials provided with the distribution.
*
*THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" 
*AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
*LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
*A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS
*OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
*EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
*PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
*PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
*LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
*NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS 
*SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*
*NB: This software will not save the world.
*/

/* Generated by Together */
#include "ApplicationKit.h"

#include "CommonFileBrowse.h"

using namespace VCF;

CommonFileBrowse::CommonFileBrowse()
{
	m_peer = NULL;
	UIToolkit* toolkit = UIToolkit::getDefaultUIToolkit();
	if ( NULL == toolkit ){
		//throw exception !!
	}
	m_peer = toolkit->createCommonFolderBrowseDialogPeer( NULL );
	if ( NULL == m_peer ){
		//throw exception
	}
}

CommonFileBrowse::~CommonFileBrowse()
{
	if ( NULL != m_peer ){
		delete m_peer;
	}

	m_peer = NULL;
}

bool CommonFileBrowse::execute()
{
	return m_peer->execute();
}

void CommonFileBrowse::setDirectory( const String & directory )
{
	m_peer->setDirectory( directory );
}

String CommonFileBrowse::getDirectory()
{
	return m_peer->getDirectory();
}

void CommonFileBrowse::setTitle( const String& title )
{
	m_peer->setTitle( title );
}