/**
*Copyright (c) 2000-2001, Jim Crafton
*All rights reserved.
*Redistribution and use in source and binary forms, with or without
*modification, are permitted provided that the following conditions
*are met:
*	Redistributions of source code must retain the above copyright
*	notice, this list of conditions and the following disclaimer.
*
*	Redistributions in binary form must reproduce the above copyright
*	notice, this list of conditions and the following disclaimer in 
*	the documentation and/or other materials provided with the distribution.
*
*THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" 
*AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
*LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
*A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS
*OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
*EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
*PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
*PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
*LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
*NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS 
*SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*
*NB: This software will not save the world.
*/

/* Generated by Together */
#include "ApplicationKit.h"


using namespace VCF;

KeyboardEvent::KeyboardEvent( Object* source ):
	Event( source )
{
	this->init();
}

KeyboardEvent::KeyboardEvent( Object* source, const unsigned long& eventType, 
							 const unsigned long& repeatCount, const unsigned long& keyMask,
							 const VCFChar& keyValue,
							 const ulong32& virtKeyValue ):
	Event( source, eventType )
{
	this->init();
	this->m_keyMask = keyMask;
	this->m_repeatCount = repeatCount;
	this->m_keyValue = keyValue;
	this->m_virtualKeyCode = virtKeyValue;
}

void KeyboardEvent::init()
{
	this->m_keyMask = 0;
	this->m_keyValue = 0;
	this->m_repeatCount = 0;
}

unsigned long KeyboardEvent::getKeyMask()
{
	return this->m_keyMask;
}

VCF::VCFChar KeyboardEvent::getKeyValue()
{		
	return this->m_keyValue;
}

bool KeyboardEvent::hasShiftKey()
{
	return ( KEY_SHIFT & this->m_keyMask ) != 0;
}

bool KeyboardEvent::hasAltKey()
{
	return ( KEY_ALT & this->m_keyMask ) != 0;
}

bool KeyboardEvent::hasControlKey()
{
	return ( KEY_CTRL & this->m_keyMask ) != 0;
}

ulong32 KeyboardEvent::getVirtualCode()
{
	return this->m_virtualKeyCode;
}