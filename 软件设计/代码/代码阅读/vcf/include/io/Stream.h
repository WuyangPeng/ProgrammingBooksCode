/**
*Copyright (c) 2000-2001, Jim Crafton
*All rights reserved.
*Redistribution and use in source and binary forms, with or without
*modification, are permitted provided that the following conditions
*are met:
*	Redistributions of source code must retain the above copyright
*	notice, this list of conditions and the following disclaimer.
*
*	Redistributions in binary form must reproduce the above copyright
*	notice, this list of conditions and the following disclaimer in 
*	the documentation and/or other materials provided with the distribution.
*
*THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" 
*AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
*LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
*A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS
*OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
*EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
*PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
*PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
*LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
*NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS 
*SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*
*NB: This software will not save the world.
*/

/* Generated by Together */

#ifndef STREAM_H
#define STREAM_H


namespace VCF{

/**
*seek types
*/
enum SeekType{
	SEEK_FROM_START=0,
	SEEK_FROM_RELATIVE,
	SEEK_FROM_END
};

/**
*file acess
*/
enum FileStreamAccessType{
	FS_DONT_CARE = 0, //same as read/write for now
	FS_READ,
	FS_WRITE,
	FS_READ_WRITE
};

/**
*forward declared, see Persistable.h
*/
class Persistable; 

/**
*forward declared, see FileStream.h
*/
class FileStream;
/**
*Stream interface defines a core set of funcationality for streams 
*in the Visual Component Framework derived Streams should support "stream chaining", 
*the ability of the stream constructor to support an incoming stream from 
*someother stream object. For example:
*	<p><pre>
*		MyStream s = new MyStream( new MemStream( new GZIPStream( SomeBigDataObject ) ) );
*	</pre></p>
*	assuming SomeBigDataObject supports Persistable, then the object is read into the
*	GZIPStream and compressed, the compressed bytes are sent to the Memory stream, and
*	then this is sent to MyStream.
*
*Streams are meant as alternative to the C++ streams, though in some 
*cases they may extend the standard C++ stream library. 
*
*@author Jim Crafton
*@version 1.0
*/
class FRAMEWORK_API Stream {
public: 
    
    /*
	Stream(Stream * incomingChainedStream){
		
	};
	*/

	virtual ~Stream(){};

	virtual void seek(const unsigned long& offset, const SeekType& offsetFrom)=0;

	/**
	*returns the size of the stream. The size represents the 
	*number of bytes that have been <b>written</b>, or <b>read</b> to/from the stream
	*/
    virtual unsigned long getSize()=0;

	/**
	*returns a pointer to the buffer that holds the stream memory
	*/
	virtual char* getBuffer() = 0;
};

/**
*InputStream, basic interface describing the requirements to 
*support streaming data into a stream. Support for the basic 
*primitive types is done through the extraction operator( >> ),
*as well as providing support for the Persistable interface,
*and reading in an arbitrary chunk of memory
*/
class FRAMEWORK_API InputStream : public Stream /*,public std::istream */{
public:
	virtual ~InputStream(){};

	virtual void read( char* bytesToRead, unsigned long sizeOfBytes )=0;

	virtual void read( Persistable* persistableObject );

	virtual void read( short& val );
	
	virtual void read( long& val );

	virtual void read( int& val );

	virtual void read( bool& val );

	virtual void read( char& val );

	virtual void read( float& val );

	virtual void read( double& val );

	virtual void read( String& val );

	InputStream& operator>>( short& val );	

	InputStream& operator>>( long& val );

	InputStream& operator>>( int& val );

	InputStream& operator>>( bool& val );

	InputStream& operator>>( char& val );

	InputStream& operator>>( float& val );

	InputStream& operator>>( double& val );	

	InputStream& operator>>( String& val );

	InputStream& operator>>( Persistable* val );		
};

/**
*OutputStream, basic interface describing the requirements to 
*support streaming data into a stream. Support for the basic 
*primitive types is done through the insertion operator( << ),
*as well as providing support for the Persistable interface,
*and writing out an arbitrary chunk of memory
*/
class FRAMEWORK_API OutputStream : public Stream /*, public std::ostream */{
public:
	virtual ~OutputStream(){};

	virtual void write( char* bytesToWrite, unsigned long sizeOfBytes )=0;

	virtual void write( Persistable* persistableObject );
	
	virtual void write( const short& val );
	
	virtual void write( const long& val );

	virtual void write( const int& val );

	virtual void write( const bool& val );

	virtual void write( const char& val );

	virtual void write( const float& val );

	virtual void write( const double& val );

	virtual void write( const String& val );

	OutputStream& operator<<( const short& val );

	OutputStream& operator<<( const long& val );

	OutputStream& operator<<( const int& val );

	OutputStream& operator<<( const bool& val );

	OutputStream& operator<<( const char& val );

	OutputStream& operator<<( const float& val );

	OutputStream& operator<<( const double& val );

	OutputStream& operator<<( const String& val );

	OutputStream& operator<<( Persistable* val );
};



};
#endif //STREAM_HREAM_H