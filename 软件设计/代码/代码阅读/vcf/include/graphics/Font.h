/**
*Copyright (c) 2000-2001, Jim Crafton
*All rights reserved.
*Redistribution and use in source and binary forms, with or without
*modification, are permitted provided that the following conditions
*are met:
*	Redistributions of source code must retain the above copyright
*	notice, this list of conditions and the following disclaimer.
*
*	Redistributions in binary form must reproduce the above copyright
*	notice, this list of conditions and the following disclaimer in 
*	the documentation and/or other materials provided with the distribution.
*
*THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" 
*AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
*LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
*A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS
*OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
*EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
*PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
*PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
*LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
*NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS 
*SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*
*NB: This software will not save the world.
*/

/* Generated by Together */


#ifndef FONT_H
#define FONT_H



namespace VCF {

#define DEFAULT_FONT_PT_SIZE	8
#define DEFAULT_FONT_NAME		"Arial"

class FontPeer;

class GRAPHICSKIT_API Font : public Object {

public:    
    Font();

	Font( const String& fontName );

	Font( const String& fontName, const double& pointSize );

	virtual ~Font();

	bool isTrueType();

	/**
	*returns the Color the Font will be rendered in
	*/
	Color* getColor();

	/**
	*sets the Color to render the Font in
	*/
    void setColor( Color* color );

	/**
	*return the point size of the Font. One point is 1/72 of an inch
	*( or 0.0352552 cm for our more civilized friends !), so to figure 
	*out the pixels involved, find out the Pixels per Inch and then apply
	*the following formula
	*<code>
	* (PointSize / 72) * PPI
	*</code>
	*where PPI represents the Pixels Per Inch
	*/
    double getPointSize();

	/**
	*sets the point size of the Font
	*/
	void setPointSize( const double pointSize );

	double getPixelSize();

	void setPixelSize( const double pixelSize );

    void setBold( const bool& bold );    

    bool getBold();

    bool getItalic();

    void setItalic( const bool& italic );

    bool getUnderlined();

    void setUnderlined( const bool& underlined );

    bool getStrikeOut();

    void setStrikeOut( const bool& strikeout );

    double getShear();

    void setShear(const double& shear );

    double getAngle();

    void setAngle( const double& angle );

	String getName();

	void setName( const String& name );

    GlyphCollection* getGlyphCollection( const String& text );

	FontPeer* getFontPeer();

	virtual void copy( Object* source );

private:
	FontPeer* m_Peer;
};

};

#endif //FONT_H