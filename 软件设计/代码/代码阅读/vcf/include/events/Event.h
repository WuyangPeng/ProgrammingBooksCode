/**
*Copyright (c) 2000-2001, Jim Crafton
*All rights reserved.
*Redistribution and use in source and binary forms, with or without
*modification, are permitted provided that the following conditions
*are met:
*	Redistributions of source code must retain the above copyright
*	notice, this list of conditions and the following disclaimer.
*
*	Redistributions in binary form must reproduce the above copyright
*	notice, this list of conditions and the following disclaimer in 
*	the documentation and/or other materials provided with the distribution.
*
*THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" 
*AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
*LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
*A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS
*OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
*EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
*PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
*PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
*LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
*NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS 
*SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*
*NB: This software will not save the world.
*/

/* Generated by Together */

#ifndef EVENT_H
#define EVENT_H

#include <time.h>


namespace VCF{

#define CUSTOM_EVENT_TYPES	500


/**
*The Event class is root object for events in the Framework. Events are defined as any action that is generated
*in response to some change in the system. Moving the mouse, typing on the keyboard, etc are all example of Window
*System events that are generated by the User, but events can also be generated by an objects change in state.
*For example, a text model can fire events if the state of it's text has changed.
*
*@version 1.0
*@author Jim Crafton
*/
class FRAMEWORK_API Event : public Object {

public:    

    Event( Object * source);
	Event( Object* source, const unsigned long& eventType );
	
	void init();
	
	/**
	*shows whether or not the event has been consumed.
	*primarily used by the Listener list implementation
	*/
	bool m_consumed;

	virtual void consume() { m_consumed = true; }

	bool getConsumed() {        
        return m_consumed;
    }

	void setConsumed( const bool& isConsumed ){
		m_consumed = isConsumed;
	}

	bool isConsumed() { 
		return m_consumed; 
	}

	/**
	*retrieves the events source, in other words, who actually caused the
	*event to be generated
	*/
    Object* getSource();

	/**
	*gets the type of event. Some events may not put anything useful here, but events
	*associated with Listeners that have multiple methods (like MouseListener) will
	*definitely store a flag here. See the specific event class for the exact event types
	*the event types can be set to
	*/
    unsigned long getType();

	void setType( const unsigned long& type );

	/**
	*gets the time the event was created.  
	*/
    time_t getTime();
	
	/*
	*sets the user data. User data is simply a place to store any sort of user specific info
	*that the programmer wants to attach to the event object. Only used by the specific application,
	*the Framework ignores this.
	*/
	void setUserData( void* userData );

	void* getUserData();

private:
    Object* m_source;
	void* m_userData;
    unsigned long m_eventType;
    time_t m_time;
};

};
#endif //EVENT_H