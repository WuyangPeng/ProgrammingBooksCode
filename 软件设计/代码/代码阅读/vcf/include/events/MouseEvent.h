/**
*Copyright (c) 2000-2001, Jim Crafton
*All rights reserved.
*Redistribution and use in source and binary forms, with or without
*modification, are permitted provided that the following conditions
*are met:
*	Redistributions of source code must retain the above copyright
*	notice, this list of conditions and the following disclaimer.
*
*	Redistributions in binary form must reproduce the above copyright
*	notice, this list of conditions and the following disclaimer in 
*	the documentation and/or other materials provided with the distribution.
*
*THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" 
*AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
*LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
*A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS
*OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
*EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
*PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
*PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
*LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
*NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS 
*SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*
*NB: This software will not save the world.
*/

/* Generated by Together */

#ifndef MOUSEEVENT_H
#define MOUSEEVENT_H


namespace VCF{

#define MOUSE_CONST						500

#define MOUSE_EVENT_DOWN				CUSTOM_EVENT_TYPES + MOUSE_CONST + 1
#define MOUSE_EVENT_MOVE				CUSTOM_EVENT_TYPES + MOUSE_CONST + 2
#define MOUSE_EVENT_UP					CUSTOM_EVENT_TYPES + MOUSE_CONST + 3
#define MOUSE_EVENT_CLICK				CUSTOM_EVENT_TYPES + MOUSE_CONST + 4
#define MOUSE_EVENT_DBLCLICK			CUSTOM_EVENT_TYPES + MOUSE_CONST + 5



class APPKIT_API MouseEvent : public Event {
public:
	MouseEvent( Object* source );

	MouseEvent( Object* source, const unsigned long& eventType );
	
	MouseEvent( Object* source, const unsigned long& eventType, const unsigned long& buttonMask, 
		        const unsigned long& keyMask, Point* point );	

	virtual ~MouseEvent(){};
	
	void init();

	/**
	*returns the point for this mouse event
	*/
    Point* getPoint();

	void setPoint( Point* point );

    unsigned long getKeyMask();

    unsigned long getButtonMask();

	bool hasLeftButton();
	bool hasMiddleButton();
	bool hasRightButton();

	bool hasShiftKey();
	bool hasAltKey();
	bool hasControlKey();

private:
    unsigned long m_buttonMask;
    unsigned long m_keyMask;
    Point m_point;
};

};
#endif //MOUSEEVENT_H