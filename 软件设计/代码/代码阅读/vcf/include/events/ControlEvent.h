/**
*Visual Control Framework for C++
*
*Copyright © 2000 Jim Crafton
*
*This program is free software; you can redistribute it and/or
*modify it under the terms of the GNU General Public License
*as published by the Free Software Foundation; either version 2
*of the License, or (at your option) any later version.
*
*This program is distributed in the hope that it will be useful,
*but WITHOUT ANY WARRANTY; without even the implied warranty of
*MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
*GNU General Public License for more details.
*
*You should have received a copy of the GNU General Public License
*along with this program; if not, write to the Free Software
*Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
*
*
*Contact Jim Crafton at ddiego@one.net for more information about the 
*Visual Control Framework
*/ 
// ControlEvent.h

#ifndef _CONTROLEVENT_H__
#define _CONTROLEVENT_H__


namespace VCF {


#define CONTROL_EVENT_SIZED					CUSTOM_EVENT_TYPES + 401
#define CONTROL_EVENT_POSITIONED			CUSTOM_EVENT_TYPES + 402
#define CONTROL_EVENT_PARENT_CHANGED		CUSTOM_EVENT_TYPES + 405

class Control;

/**
*ControlEvent are events generated by changes made to the control.
*Currently there are 3 types, one for controls being resized, one for a 
*control's position being changed, and one for the control's parent being
*changed. 
*
*@version 1.0
*@author Jim Crafton
*/
class APPKIT_API ControlEvent : public Event  {
public:
	ControlEvent( Object* source );

	ControlEvent( Object* source, const ulong32& eventType );

	/**
	*use this constructor for creating COMPONENT_EVENT_SIZED events
	*/
	ControlEvent( Object* source, const Size& newSize ):
		Event( source, CONTROL_EVENT_SIZED ){
		init();
		m_newSize = newSize;
	};
	
	/**
	*use this constructor for creating COMPONENT_EVENT_POSITIONED events
	*/
	ControlEvent( Object* source, const Point& newPosition ):
		Event( source, CONTROL_EVENT_POSITIONED ){
		init();
		m_newPosition = newPosition;
	};

	/**
	*use this constructor for creating COMPONENT_EVENT_PARENT_CHANGED events
	*/
	ControlEvent( Object* source, Control* newParent ):
		Event( source, CONTROL_EVENT_PARENT_CHANGED ){
		init();
		m_newParent = newParent;
	};

	virtual ~ControlEvent();

	void init();

	/**
	*returns the new size of the component
	*/
	Size getNewSize(){
		return 	m_newSize;
	};

	/**
	*returns the new position of the component
	*/
	Point getNewPosition(){
		return 	m_newPosition;
	};

	/**
	*returns the new parent
	*/
	Control* getNewParent(){
		return 	m_newParent;
	};
private:
	Size m_newSize;
	Point m_newPosition;
	Control* m_newParent;
};

};

#endif //_CONTROLEVENT_H__
