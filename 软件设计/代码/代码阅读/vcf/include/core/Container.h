/**
*Copyright (c) 2000-2001, Jim Crafton
*All rights reserved.
*Redistribution and use in source and binary forms, with or without
*modification, are permitted provided that the following conditions
*are met:
*	Redistributions of source code must retain the above copyright
*	notice, this list of conditions and the following disclaimer.
*
*	Redistributions in binary form must reproduce the above copyright
*	notice, this list of conditions and the following disclaimer in 
*	the documentation and/or other materials provided with the distribution.
*
*THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" 
*AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
*LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
*A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS
*OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
*EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
*PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
*PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
*LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
*NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS 
*SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*
*NB: This software will not save the world.
*/

/* Generated by Together */


#ifndef CONTAINER_H
#define CONTAINER_H



namespace VCF{

class Control;

class ControlEvent;

class MouseEvent;

class GraphicsContext;

class MouseHandler;

class Rect;


/** @interface */
class APPKIT_API Container {

public:
	virtual ~Container(){};
    
	virtual void add( Control * child ) = 0;
    
	virtual void add( Control * child, const AlignmentType& alignment ) = 0;	
	
	virtual void remove( Control* child ) = 0;

	virtual Enumerator<Control*>* getChildren() = 0;

	virtual unsigned long getChildCount() = 0;	

	virtual Control* findControl( const String& controlName ) = 0;

	virtual void resizeChildren() = 0;
};


/**
*Basic implementation of a container
*handles basic alignment,layout of child components
*/
class APPKIT_API AbstractContainer : public Container, public EnumeratorContainer<std::vector<Control*>, Control*>{
public:	
	
	/**
	*nested inner class to handle implementation of resizing events
	*/
	class ContainerResizeHandler : public Object {
	public: 
		ContainerResizeHandler( AbstractContainer* container );
		
		virtual ~ContainerResizeHandler(){}; 

		void containerResized( ControlEvent* event ); 
	private:
		AbstractContainer* m_container;
	};
	
	class ContainerMouseEventHandler : public Object {
	public:
		ContainerMouseEventHandler( AbstractContainer* container ){
			m_container = container;
		}; 
		
		virtual ~ContainerMouseEventHandler(){}; 
		
		void onMouseEvent( MouseEvent* event ); 
	
	private:
		AbstractContainer* m_container;
	};


	AbstractContainer();
	
	virtual ~AbstractContainer();	

	void init();

	virtual void add( Control * child );

    virtual void add( Control * child, const AlignmentType& alignment );

	virtual void remove( Control* child );

	virtual void resizeChildren();

	void setContainer( Control* container );

	Control* getContainer();

	void paintChildren( GraphicsContext* context );

	virtual Enumerator<Control*>* getChildren();

	virtual unsigned long getChildCount();

	virtual Control* findControl( const String& controlName );
protected:
	std::vector<Control*> m_controls;	
	Control* m_container;
	ControlEventHandler<ContainerResizeHandler>* m_controlHandler;	
	MouseEventHandler<ContainerMouseEventHandler>* m_mouseHandler;

	ContainerResizeHandler* m_constainerResizeEventHandler;
	ContainerMouseEventHandler* m_containerMouseEventHandler;

	void resizeChildrenUsingBounds( Rect* bounds );

	bool insertBefore( Control* c1, Control* c2, const AlignmentType& alignment );
	void doPosition( Control* component, const AlignmentType& alignment, Rect* rect );
	void doAlign( const AlignmentType& alignment, Rect* rect );
	bool alignWork();
	void doAnchors( Rect* bounds );
};

};
#endif //CONTAINER_H