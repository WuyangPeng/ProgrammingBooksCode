/**
*Copyright (c) 2000-2001, Jim Crafton
*All rights reserved.
*Redistribution and use in source and binary forms, with or without
*modification, are permitted provided that the following conditions
*are met:
*	Redistributions of source code must retain the above copyright
*	notice, this list of conditions and the following disclaimer.
*
*	Redistributions in binary form must reproduce the above copyright
*	notice, this list of conditions and the following disclaimer in 
*	the documentation and/or other materials provided with the distribution.
*
*THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" 
*AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
*LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
*A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS
*OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
*EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
*PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
*PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
*LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
*NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS 
*SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*
*NB: This software will not save the world.
*/

/* Generated by Together */

#ifndef VIEW_H
#define VIEW_H


namespace VCF{

class GraphicsContext;

class Control;

class Controller;

class Model;

/** @interface */
class APPKIT_API View {
public:
	virtual ~View(){};

    virtual Model* getViewModel() = 0;

	virtual void setViewModel( Model* viewModel ) = 0;
	
    virtual Controller* getViewController() = 0;

	virtual void setViewController( Controller* viewController ) = 0;

	virtual Control* getViewControl() = 0;

	virtual void setViewControl( Control* viewControl ) = 0;

	virtual void paintView( GraphicsContext* context ) = 0;
	
	/**
	*updates the view. If the updatedModel is NULL,
	*this signifies the model is detaching itself
	*from the view, and the view should clean up it's 
	*display appropriately
	*/
	virtual void updateView( Model* updatedModel ) = 0;
};


/**
*Basic implementation of a view
*/
class AbstractView : public View {
public:
	AbstractView( Control* viewControl=NULL){
		m_viewControl = viewControl;
		m_viewModel = NULL;
		m_viewController = NULL;
	}

	virtual ~AbstractView(){};

	virtual Model* getViewModel(){
		return m_viewModel;
	}

	virtual void setViewModel( Model* viewModel ){
		m_viewModel = viewModel;
	}
	
    virtual Controller* getViewController(){
		return m_viewController;
	}

	virtual void setViewController( Controller* viewController ){
		m_viewController = viewController;
	}

	virtual Control* getViewControl(){
		return m_viewControl;
	}

	virtual void setViewControl( Control* viewControl ){
		m_viewControl = viewControl;
	}

	virtual void paintView( GraphicsContext* context ){};

	virtual void updateView( Model* updatedModel ) {};
protected:
	Model* m_viewModel;
	Controller* m_viewController;
	Control* m_viewControl;

};



};
#endif //VIEW_H