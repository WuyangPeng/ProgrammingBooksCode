/**
*Copyright (c) 2000-2001, Jim Crafton
*All rights reserved.
*Redistribution and use in source and binary forms, with or without
*modification, are permitted provided that the following conditions
*are met:
*	Redistributions of source code must retain the above copyright
*	notice, this list of conditions and the following disclaimer.
*
*	Redistributions in binary form must reproduce the above copyright
*	notice, this list of conditions and the following disclaimer in 
*	the documentation and/or other materials provided with the distribution.
*
*THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" 
*AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
*LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
*A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS
*OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
*EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
*PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
*PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
*LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
*NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS 
*SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*
*NB: This software will not save the world.
*/

/* Generated by Together */

#ifndef TREECONTROL_H
#define TREECONTROL_H



namespace VCF{

class TreeModel;

class TreePeer;

class ImageList;

class TreeModelEvent;

class TreeModelHandler;

class ModelEvent;

#define TREECONTROL_CLASSID			"ED88C09C-26AB-11d4-B539-00C04F0196DA"		
class APPKIT_API TreeControl : public VCF::Control {
public:
	BEGIN_CLASSINFO(TreeControl, "VCF::TreeControl", "VCF::Control", TREECONTROL_CLASSID )
	OBJECT_PROPERTY( TreeModel, "treeModel", TreeControl::getTreeModel, TreeControl::setTreeModel );
	END_CLASSINFO(TreeControl)

	TreeControl();
	
	virtual ~TreeControl();

	double getItemIndent();

    void setItemIndent( const double& indent );

    void setTreeModel(TreeModel * model);
    
	TreeModel* getTreeModel();

    ImageList* getImageList();

	ImageList* getStateImageList();
	
    void setImageList( ImageList* imageList );

	void setStateImageList( ImageList* imageList );

	virtual void paint( GraphicsContext * context );

	void init();

	void onTreeRootNodeChanged( TreeModelEvent* event );

	void onTreeNodeAdded( TreeModelEvent* event );

	void onTreeNodeDeleted( TreeModelEvent* event );

	void onModelEmptied( ModelEvent* event );

	TreeItem* findItem( Point* pt );
protected:
	TreeItem* hitTestForItem( Point* pt, TreeItem* item );

	void onTreeItemPaint( ItemEvent* event );
private:    
    TreePeer * m_treePeer;
    ImageList* m_imageList;
	ImageList* m_stateImageList;
	TreeModel* m_treeModel;	
};

};

#endif //TREECONTROL_H