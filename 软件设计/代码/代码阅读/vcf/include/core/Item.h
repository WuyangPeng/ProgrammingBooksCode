/**
*Copyright (c) 2000-2001, Jim Crafton
*All rights reserved.
*Redistribution and use in source and binary forms, with or without
*modification, are permitted provided that the following conditions
*are met:
*	Redistributions of source code must retain the above copyright
*	notice, this list of conditions and the following disclaimer.
*
*	Redistributions in binary form must reproduce the above copyright
*	notice, this list of conditions and the following disclaimer in 
*	the documentation and/or other materials provided with the distribution.
*
*THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" 
*AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
*LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
*A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS
*OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
*EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
*PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
*PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
*LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
*NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS 
*SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*
*NB: This software will not save the world.
*/

/* Generated by Together */

#ifndef ITEM_H
#define ITEM_H


namespace VCF{



class ItemListener;

class Image;

class Model;

class ItemEvent;

class Rect;

class Point;

class GraphicsContext;

class Control;

/** @interface */
	
#define ITEM_CLASSID		"ED88C0AA-26AB-11d4-B539-00C04F0196DA"
class APPKIT_API Item : public ObjectWithEvents {
public:  
	BEGIN_ABSTRACT_CLASSINFO(Item, "VCF::Item", "VCF::Object", ITEM_CLASSID)	
	EVENT("VCF::ItemEventHandler", "VCF::ItemEvent", "ItemPaint" );
	EVENT("VCF::ItemEventHandler", "VCF::ItemEvent", "ItemChanged" );
	EVENT("VCF::ItemEventHandler", "VCF::ItemEvent", "ItemSelected" );
	EVENT("VCF::ItemEventHandler", "VCF::ItemEvent", "ItemAdded" );
	EVENT("VCF::ItemEventHandler", "VCF::ItemEvent", "ItemDeleted" );
	END_CLASSINFO(Item)

	Item(){
		
	};

	virtual ~Item(){};

    virtual bool containsPoint( Point * pt ) = 0;

	/**
	*returns the Bounds for the Item or NULL if not
	*applicable
	*/
	virtual Rect* getBounds() = 0;

	virtual void addItemPaintHandler( EventHandler* handler ) = 0;

	virtual void addItemChangedHandler( EventHandler* handler ) = 0;

	virtual void addItemSelectedHandler( EventHandler* handler ) = 0;

	virtual void addItemAddedHandler( EventHandler* handler ) = 0;

	virtual void addItemDeletedHandler( EventHandler* handler ) = 0;
    
	virtual void removeItemPaintHandler( EventHandler* handler ) = 0;

	virtual void removeItemChangedHandler( EventHandler* handler ) = 0;

	virtual void removeItemSelectedHandler( EventHandler* handler ) = 0;

	virtual void removeItemAddedHandler( EventHandler* handler ) = 0;

	virtual void removeItemDeletedHandler( EventHandler* handler ) = 0;

	virtual Image* getImage() = 0;

    virtual ulong32 getIndex() = 0;

	virtual ulong32 getImageIndex() = 0;

	virtual void setImageIndex( const ulong32& imageIndex ) = 0;

	virtual void setIndex( const unsigned long& index ) = 0;

    virtual void* getData() = 0;

	virtual void setData( void* data ) = 0;	

	virtual Model* getModel() = 0;

	virtual void setModel( Model* model ) = 0;

	/**
	*indicates whether the item can paint itself.
	*In general this is often false, but when true,
	*the control that contains the item should 
	*call the item's paint() method whenever the item
	*needs repainting.
	*/
	virtual bool canPaint() = 0;
	
	virtual void paint( GraphicsContext* context, Rect* paintRect ) = 0;
	
	virtual bool isSelected() = 0;

	virtual void setSelected( const bool& selected ) = 0;

	/**
	*all items may have a control that "owns" them.
	*so in a ListControl, the ListItem::getControl() would 
	*return the ListControl that contained the model that
	*held the ListItem's
	*/
	virtual Control* getControl() = 0;

	virtual void setControl( Control* control ) = 0;
};

};
#endif //ITEM_H