/**
*Copyright (c) 2000-2001, Jim Crafton
*All rights reserved.
*Redistribution and use in source and binary forms, with or without
*modification, are permitted provided that the following conditions
*are met:
*	Redistributions of source code must retain the above copyright
*	notice, this list of conditions and the following disclaimer.
*
*	Redistributions in binary form must reproduce the above copyright
*	notice, this list of conditions and the following disclaimer in 
*	the documentation and/or other materials provided with the distribution.
*
*THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" 
*AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
*LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
*A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS
*OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
*EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
*PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
*PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
*LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
*NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS 
*SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*
*NB: This software will not save the world.
*/

/* Generated by Together */

#ifndef COMPONENT_H
#define COMPONENT_H


namespace VCF{

class Rect;

class InvalidPeer;

class Color;


class Border;

#define COMPONENT_CLASSID		"ED88C09B-26AB-11d4-B539-00C04F0196DA"

enum ComponentState {
	CS_UNKNOWN=0,
	CS_LOADING,
	CS_READING,
	CS_WRITING,
	CS_CREATED,
	CS_DESIGNING,
	CS_NORMAL,
	CS_DESTROYING
};


/**
 *The base class for all widgets in the Visual Component Framework.
 *Components are not actual widgets. They are the base class for 
 *any object that wants to be manipulated within the IDE
 */
class APPKIT_API Component : public ObjectWithEvents, public Persistable{
public:
	
	BEGIN_ABSTRACT_CLASSINFO(Component, "VCF::Component", "VCF::Object", COMPONENT_CLASSID)			
	PROPERTY( long, "tag", Component::getTag, Component::setTag, PROP_LONG );
	PROPERTY( String, "name", Component::getName, Component::setName, PROP_STRING );		
	EVENT("VCF::ComponentEventHandler", "VCF::ComponentEvent", "ComponentCreated" );
	EVENT("VCF::ComponentEventHandler", "VCF::ComponentEvent", "ComponentDeleted" );
	END_CLASSINFO(Component);

	Component();	

	virtual ~Component();

	/**
	*This macro declares a std::vector<> of ComponentListener listeners
	*/
	EVENT_HANDLER_LIST(ComponentCreated);	
	ADD_EVENT(ComponentCreated)
	REMOVE_EVENT(ComponentCreated)
	FIRE_EVENT(ComponentCreated,ComponentEvent)

	EVENT_HANDLER_LIST(ComponentDeleted);
	ADD_EVENT(ComponentDeleted)
	REMOVE_EVENT(ComponentDeleted)
	FIRE_EVENT(ComponentDeleted,ComponentEvent)	    

    virtual String getName();

    virtual void setName( const String& name );           

    virtual void saveToStream( OutputStream * stream );

    virtual void loadFromStream( InputStream * stream );

    virtual void beforeDestroy( ComponentEvent* event );

	virtual void afterCreate( ComponentEvent* event ) = 0;
	
	virtual String toString();

	void processComponentEvent( ComponentEvent* componentEvent );

	ComponentState getComponentState();

	void setComponentState( const ComponentState& componentState );

	virtual void addComponent( Component* component );

	virtual void removeComponent( Component* component );

	virtual Enumerator<Component*>* getComponents();

	virtual unsigned long getComponentCount();

	Component* Component::findComponent( const String& componentName );

	bool bindVariable( Component** variablePtr, const String& variableName );

	/**
	*returns the Component's tag value. A Tag is borrowed from the 
	*NeXTStep idea of tags. A unique number is automatically associated
	*with the component when it is created, but can be changed by the programmer.
	*The following info is lifted directly from the NeXTSTEP docs.
	*Tags are integers that you use in your code to identify objects. 
	*They offer a convenient alternative to such methods of object identification 
	*as fetching an object's title.  (What if the object't title changes while the 
	*application is running, or the object has no title?)
	*@return long the tag value of the Component
	*/
	long getTag() {
		return m_tag;
	}

	/**
	*Sets the tag value
	*@param long - represents the new value of the component's tag will be set to.
	*/
	void setTag( const long& tag ) {
		m_tag = tag;
	}
	/**
	*registers a component in the system component map. The map is organized into 
	a series of keys called categories, with 1 or more entries in each category.
	The UIToolkit registers the default ApplicationKit components, and other developers may
	use this to extend the list with theor own components.
	*/
	static bool registerComponent( const String& componentClassName, const String& category );

	static Enumerator<Class*>* getComponentClassesForCategory( const String& category );

	static Enumerator<String>* getRegisteredComponentCategories();

	static void initComponentRegistrar();

	static void clearRegistedComponents();

protected:
	ComponentState m_componentState;	
private:
    String m_name;
	long m_tag;
	std::vector<Component*> m_components;
	EnumeratorContainer<std::vector<Component*>, Component*> m_componentContainer;
	/**
	*a map of component classes to categorys
	*/
	
	static std::map<String,std::vector<Class*>*>* registeredComponentMap;
	static std::vector<String>* registeredCategory;
	static EnumeratorContainer<std::vector<String>,String>* registeredCategoryContainer;
	static EnumeratorContainer<std::vector<Class*>,Class*>* registeredCompContainer;
	
};	




class APPKIT_API ComponentDTD : public Object {
public:
	ComponentDTD(){};

	virtual ~ComponentDTD(){};
	
	virtual String toString();
};

};

#endif //COMPONENT_H