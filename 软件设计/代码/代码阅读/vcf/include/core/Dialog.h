/**
*Copyright (c) 2000-2001, Jim Crafton
*All rights reserved.
*Redistribution and use in source and binary forms, with or without
*modification, are permitted provided that the following conditions
*are met:
*	Redistributions of source code must retain the above copyright
*	notice, this list of conditions and the following disclaimer.
*
*	Redistributions in binary form must reproduce the above copyright
*	notice, this list of conditions and the following disclaimer in 
*	the documentation and/or other materials provided with the distribution.
*
*THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" 
*AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
*LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
*A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS
*OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
*EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
*PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
*PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
*LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
*NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS 
*SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*
*NB: This software will not save the world.
*/

/* Generated by Together */


#ifndef DIALOG_H
#define DIALOG_H


namespace VCF{

class DialogPeer;

#define DIALOG_CLASSID		"ED88C09A-26AB-11d4-B539-00C04F0196DA"

enum MessageStyle {
	MS_DEFAULT = 0,
	MS_ERROR,
	MS_INFO,
	MS_WARNING
};

enum ModalReturnType {
	MRT_NONE = 0,
	MRT_OK,
	MRT_CANCEL,
	MRT_YES,
	MRT_NO
};

/**
 * A frame with a close button, and optionally a help and system button as well. The caption is the standard height. 
 */
class APPKIT_API Dialog : public Frame {
public:

	BEGIN_CLASSINFO(Dialog, "VCF::Dialog", "VCF::Frame", DIALOG_CLASSID )		
	END_CLASSINFO(Dialog)

	Dialog( Frame* owner=NULL );

	//Dialog( Frame* owner );

	virtual ~Dialog();

	virtual void setCaption( const String& caption );    

	virtual void paint(GraphicsContext * context);

	/**
	*overridden to take into account client bounds
	**/
	virtual void resizeChildren();

	virtual Rect* getClientBounds();

	virtual void setClientBounds( Rect* bounds );
	
	virtual ModalReturnType showModal();

	virtual void show();

	virtual void close();

	static void showMessage( const String& message, const String& caption="" );

	static ModalReturnType showMessage( const String& message, const MessageStyle& messageStyle, const String& caption="" ); 

	virtual void setFrameStyle( const FrameStyleType& frameStyle );
private:    
    DialogPeer * m_dialogPeer;
	Frame* m_owner;
};

};

#endif //DIALOG_H