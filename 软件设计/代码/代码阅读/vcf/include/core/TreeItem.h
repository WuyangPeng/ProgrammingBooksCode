/**
*Copyright (c) 2000-2001, Jim Crafton
*All rights reserved.
*Redistribution and use in source and binary forms, with or without
*modification, are permitted provided that the following conditions
*are met:
*	Redistributions of source code must retain the above copyright
*	notice, this list of conditions and the following disclaimer.
*
*	Redistributions in binary form must reproduce the above copyright
*	notice, this list of conditions and the following disclaimer in 
*	the documentation and/or other materials provided with the distribution.
*
*THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" 
*AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
*LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
*A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS
*OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
*EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
*PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
*PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
*LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
*NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS 
*SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*
*NB: This software will not save the world.
*/

/* Generated by Together */


#ifndef TREEITEM_H
#define TREEITEM_H


namespace VCF{

class Color;

/** @interface */

#define TREEITEM_CLASSID		"3126B223-2819-11d4-B53A-00C04F0196DA"

class APPKIT_API TreeItem : public Item {
public:    

	BEGIN_ABSTRACT_CLASSINFO(TreeItem, "VCF::TreeItem", "VCF::Item", TREEITEM_CLASSID)
	OBJECT_COLLECTION_PROPERTY(TreeItem*, "children", TreeItem::getChildren, 
	               TreeItem::addChild, TreeItem::insertChild, TreeItem::deleteChild, TreeItem::deleteChild )
	PROPERTY( String, "name", TreeItem::getCaption, TreeItem::setCaption, PROP_STRING )
	END_CLASSINFO(TreeItem)

	TreeItem(){
		
	};

	virtual ~TreeItem(){};

    virtual Color* getTextColor() = 0;

    virtual void setTextColor(Color* color) = 0;

    virtual void setTextBold(const bool& bold) = 0;

    virtual bool getTextBold() = 0;

    virtual bool isLeaf() = 0;

	virtual bool isRoot() = 0;

	virtual bool isExpanded() = 0;

	virtual void expand( const bool& isExpanded ) = 0;

    virtual TreeItem* getParent() = 0;
	
	virtual void setParent( TreeItem* parent ) = 0;

    virtual TreeItem* getNextChildNodeItem() = 0;

    virtual TreeItem* getPrevChildNodeItem() = 0;

    virtual String getCaption() = 0;

	virtual ulong32 getLevel() = 0;

	virtual void setCaption( const String& caption ) = 0;

	virtual Enumerator<TreeItem*>* getChildren() = 0;

	virtual void addChild( TreeItem* child ) = 0;

	virtual void insertChild( const unsigned long& index, TreeItem* child ) = 0;
	
	virtual void deleteChild( TreeItem* child ) = 0;

	virtual void deleteChild( const unsigned long& index ) = 0;

	virtual void clearChildren() = 0;

	virtual ulong32 getSelectedImageIndex() = 0;

	virtual void setSelectedImageIndex( const ulong32& selectedImageIndex ) = 0;

	virtual ulong32 getExpandedImageIndex() = 0;

	virtual void setExpandedImageIndex( const ulong32& expandedImageIndex ) = 0;
};

};
#endif //TREEITEM_HEM_H