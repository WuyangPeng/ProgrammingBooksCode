<?xml version="1.0"?>

<project default="build" basedir=".">

  <!--
    Give user a chance to override without editing this file
    (and without typing -D each time he compiles it)
  -->
  <property file=".ant.properties"/>
  <property file="${user.home}/.ant.properties"/>

  <!--
    these are here only for those who use jikes compiler. For other
    developers this part makes no difference.
  -->
  <property name="build.compiler.emacs" value="on"/>
  <property name="build.compiler.warnings" value="true"/>
  <property name="build.compiler.pedantic" value="false"/>
  <property name="build.compiler.depend" value="true"/>
  <property name="build.compiler.fulldepend" value="true"/>

  <!-- =================================================================== -->
  <!-- Initialization target                                               -->
  <!-- =================================================================== -->
  <target name="init">
    <tstamp/>

    <!-- Define at least fullname, name, and description. They will be
    placed in webapp/WEB-INF/web.xml -->
    <property name="fullname" value="Schecoon"/>
    <property name="description" value="Schecoon"/>
    <property name="name"     value="schecoon"/>
    <property name="version"  value="${DSTAMP}"/>
    <property name="short.version" value="${DSTAMP}"/>
    <property name="release"  value="1st"/>
    <property name="year"     value="2001-2002"/>

    <echo message="------------------- ${fullname} ${version} [${year}] ----------------"/>

    <property name="debug"          value="on"/>
    <property name="optimize"       value="off"/>
    <property name="deprecation"    value="off"/>
    <property name="build.compiler" value="classic"/>
    <property name="target.vm"      value="1.2"/>

    <property name="src.dir"      value="./src"/>
    <property name="lib.dir"      value="./lib"/>
    <property name="bin.dir"      value="./bin"/>
    <property name="webapp.dir"   value="./webapp"/>
    <property name="scheme.dir"     value="./scheme"/>
    <property name="emacs.dir"     value="./emacs"/>
    <property name="root.dir"     value="../../.."/>

    <property name="build.root"     value="./build"/>
    <property name="build.dir"      value="${build.root}"/>
    <property name="build.dest"     value="${build.dir}/webapp/WEB-INF/classes"/>
    <property name="build.docs"     value="${build.dir}/docs"/>
    <property name="build.war"      value="${build.dir}/webapp"/>
    <property name="build.javadocs" value="${build.dir}/javadocs"/>

    <property name="dist.root"   value="./dist"/>
    <property name="dist.dir"    value="${dist.root}/${name}-${version}"/>
    <property name="dist.target" value="${dist.root}"/>

    <!-- 
    The location of tools.jar, relative to the JAVA_HOME home. 
    -->
    <property name="tools.jar" value="${java.home}/lib/tools.jar"/>

    <filter token="name"    value="${fullname}"/>
    <filter token="year"    value="${year}"/>
    <filter token="version" value="${version}"/>
    <filter token="date"    value="${TODAY}"/>
    <filter token="log"     value="true"/>
    <filter token="verbose" value="true"/>

    <path id="classpath">
      <pathelement location="${build.dest}"/>
      <fileset dir="./lib">
        <include name="*.jar"/>
      </fileset>
      <fileset dir="${root.dir}/lib/core">
        <include name="*.jar"/>
      </fileset>
      <fileset dir="${root.dir}/lib/optional">
        <include name="*.jar"/>
      </fileset>
      <pathelement location="${root.dir}/${build.root}/cocoon/classes"/>
    </path>

  </target>

  <!-- Add filters for loading database information from
       database.properties file
  -->
  <!-- =================================================================== -->
  <!-- Prepares the build directory                                        -->
  <!-- =================================================================== -->
  <target name="prepare" depends="init">
    <mkdir dir="${build.dir}"/>
    <mkdir dir="${build.dest}"/>
    <mkdir dir="${build.war}"/>
  </target>

  <!-- =================================================================== -->
  <!-- Compiles the source directory                                       -->
  <!-- =================================================================== -->
  <target name="compile" depends="prepare"
          description="Compiles the source code">
    <javac srcdir="${src.dir}"
           destdir="${build.dest}"
           debug="${debug}"
           optimize="${optimize}"
           deprecation="${deprecation}"
           target="${target.vm}">
      <classpath refid="classpath"/>
    </javac>
  </target>

  <!-- =================================================================== -->
  <!-- Copies the DTD directory from the parent                            -->
  <!-- =================================================================== -->
  <target name="dtd" depends="init">
    <mkdir dir="${webapp.dir}/docs/dtd"/>
    <copy todir="${webapp.dir}/docs/dtd" filtering="off">
      <fileset dir="../../webapp/tutorial/docs/dtd"/>
    </copy>
  </target>

  <!-- =================================================================== -->
  <!-- Prepares the webapp directories                                     -->
  <!-- =================================================================== -->
  <target name="prepare-webapp" depends="prepare, dtd">
    <copy todir="${build.war}" filtering="off">
      <fileset dir="${webapp.dir}" excludes="**/*.in"/>
    </copy>

    <mkdir dir="${build.war}/stylesheets"/>
    <copy todir="${build.war}/stylesheets" filtering="off">
      <fileset dir="../../documentation/stylesheets"/>
    </copy>
  </target>

  <!-- =================================================================== -->
  <!-- Prepares the libraries for the war package                          -->
  <!-- =================================================================== -->
  <target name="prepare-webapp-libs" depends="prepare">
    <copy todir="${build.war}/WEB-INF/lib">
      <fileset dir="${lib.dir}">
        <include name="*.jar"/>
      </fileset>
      <fileset dir="${root.dir}/lib/core">
        <include name="*.jar"/>
      </fileset>
      <fileset dir="${root.dir}/lib/optional">
        <include name="*.jar"/>
      </fileset>
      <fileset dir="${root.dir}/build/cocoon">
        <include name="cocoon.jar"/>
      </fileset>
    </copy>
  </target>

  <!-- =================================================================== -->
  <!-- Generate the heap from the Scheme files                             -->
  <!-- =================================================================== -->
  <target name="prepare-heap" depends="init, prepare">
    <java classname="sisc.boot.GenerateHeap">
      <classpath refid="classpath"/>
      <arg value="-in"/>
      <arg value="${basedir}/${lib.dir}/sisc.heap"/>
      <arg value="-out"/>
      <arg value="${basedir}/${build.war}/${name}.heap"/>
      <arg value="-files"/>
      <arg value="${basedir}/${scheme.dir}/sxml.scm"/>
      <arg value="${basedir}/${scheme.dir}/utils.scm"/>
      <arg value="${basedir}/${scheme.dir}/functions.scm"/>
      <arg value="${basedir}/${scheme.dir}/sitemap.scm"/>
    </java>
  </target>

  <!-- =================================================================== -->
  <!-- Creates the jar file                                                -->
  <!-- =================================================================== -->
  <target name="package" depends="compile"
	  description="Generates the jar package">
    <jar jarfile="${build.dir}/${name}.jar">
      <fileset dir="${build.dest}" includes="org/**"/>
    </jar>
  </target>

  <!-- =================================================================== -->
  <!-- Setup the script files                                              -->
  <!-- =================================================================== -->
  <target name="scripts">
    <copy todir="${emacs.dir}">
      <fileset dir="${emacs.dir}">
        <include name="*.in"/>
      </fileset>
      <filterset>
        <filter token="top" value="${basedir}"/>
      </filterset>
      <mapper type="glob" from="*.in" to="*"/>
    </copy>
    <chmod perm="a+x">
      <fileset dir="${emacs.dir}" includes="sisc-servlet"/>
    </chmod>
  </target>

  <!-- =================================================================== -->
  <!-- Prepares everything to be run in place                              -->
  <!-- =================================================================== -->
  <target name="build" depends="prepare-webapp, prepare-webapp-libs,
	                        compile, prepare-heap, package, scripts"
	  description="Prepares everything to be run in place"/>

  <!-- =================================================================== -->
  <!-- Creates the war file                                                -->
  <!-- =================================================================== -->
  <target name="webapp" depends="build, package"
	  description="Generates the war package">
    <jar jarfile="${build.dir}/${name}.war" basedir="${build.war}" includes="**"/>
  </target>

  <!-- =================================================================== -->
  <!-- Set a variable if javadoc is already up-to-date.                    -->
  <!-- =================================================================== -->
  <target name="javadocs_check">
    <uptodate property="javadocs.notrequired" targetfile="${build.javadocs}/packages.html" >
      <srcfiles dir= "${build.src}" includes="**/*.java"/>
    </uptodate>
  </target>

  <!-- =================================================================== -->
  <!-- If javadoc is already up-to-date, print a message saying so.        -->
  <!-- =================================================================== -->
  <target name="javadocs_done" if="javadocs.notrequired">
    <echo message="-------------------------------------------------------------"/>
    <echo message="Not rebuilding Javadocs, as they are up-to-date:"/>
    <echo message="  ${build.javadocs}/packages.html is more recent than"/>
    <echo message="  ${build.src}/**/*.java"/>
    <echo message="-------------------------------------------------------------"/>
  </target>

  <!-- =================================================================== -->
  <!-- Creates the API documentation                                       -->
  <!-- =================================================================== -->
  <target name="javadocs" depends="javadocs_check, javadocs_done"
      unless="javadocs.notrequired"
      description="Generates the API documentation">
    <mkdir dir="${build.javadocs}"/>
    <javadoc packagenames="${packages}"
             sourcepath="${build.src}"
             destdir="${build.javadocs}"
             author="true"
             version="true"
             use="false"
             noindex="true"
             windowtitle="${name} API"
             doctitle="${name}"
             bottom="Copyright &#169; ${year} Apache Software Foundation. All Rights Reserved."
             stylesheetfile="${resource.dir}/javadoc.css">
      <classpath refid="classpath"/>
    </javadoc>
  </target>

  <!-- =================================================================== -->
  <!-- Clean targets                                                       -->
  <!-- =================================================================== -->
  <target name="clean" depends="init" description="* Cleans the build directories">
    <delete dir="${build.dir}"/>
    <delete dir="${webapp.dir}/docs/dtd"/>
    <delete>
      <fileset dir="${emacs.dir}" includes="sisc-servlet.bat"/>
      <fileset dir="${emacs.dir}" includes="sisc-servlet"/>
    </delete>
  </target>

  <target name="distclean" depends="clean" description="* Cleans everything to the original state">
    <delete dir="${build.root}"/>
    <delete dir="${dist.root}"/>
  </target>

</project>

<!-- End of file -->
