<!-- ===========================================================================


                       * =========================== *
                       |  Apache Cocoon Build System |
                       * =========================== *

                                     by

                     Stefano Mazzocchi <stefano@apache.org>
                     Carsten Ziegeler <cziegeler@apache.org>


Installing the build tools
==========================

The Cocoon build system is based on Apache Ant, which is a Java building tool
originally developed for the Tomcat project but now used in many other
Apache projects and extended by many developers.

Ant is a little but very handy tool that uses a build file written in XML
(this file) as building instructions. For more information refer to
"http://jakarta.apache.org/ant/".

To make things easier for you, the Cocoon distribution contains a precompiled
version of Ant and the build scripts take care of running it.

The only thing that you have to make sure, is the "JAVA_HOME" environment
property should be set to match the JVM you want to use.

That's all you have to do to be ready to go.


Building instructions
=====================

Ok, let's build the baby. First, make sure your current working directory is
where this very file is located. Then type

  ./build.sh (unix)
  .\build.bat (win32)

if everything is right and all the required packages are visible, this action
will generate a file called "cocoon.jar" in the "./build/cocoon" directory.
Note, that if you do further development, compilation time is reduced since
Ant is able of detecting which files have changed and to recompile them at need.

Also, you'll note that reusing a single JVM instance for each task, increases
tremendously the performance of the whole build system, compared to other
tools (i.e. make or shell scripts) where a new JVM is started for each task.


Building on another directory
=============================

Sometimes you might want to build on an external directory to keep the
distribution clean: no worries, this is just an environment property away.
Suppose you want to use the "../build" directory instead, you simply tipe

 [unix]  ./build.sh  -Dbuild.root=../build
 [win32] .\build.bat -Dbuild.root=..\build

By using the -Dxxx=yyy argument, you are setting environments in the JVM: Ant
is designed to give higher priority to system environments to allow you to
modify _any_ <property> that you can find in the building instructions below,
so it's just a matter of understanding what property you want to change
and you don't have to touch this file (which you shouldn't need to do).


Build targets
=============

The build system is not only responsible of compiling Cocoon into a jar file,
but is also responsible for creating the HTML documentation, javadocs,
distributions and web site. In fact, the file you have here is _exactly_ what
is used by cocoon maintainers to take care of everything in the Cocoon
project, no less and no more.

To know more about the available targets take a look at this file, which is
pretty self-explanatory or type

 [unix]  ./build.sh  -projecthelp
 [win32] .\build.bat -projecthelp

and concentrate on the target descriptions that start with a star '*': these
are the one you should call, the others are internal targets that are called
by the main ones.

Build Dependencies
==================
Some components are optional and require special jar files to be compiled
and added to the web application. Some if these jars are already included
in the distribution while others not.
For each optional package which is not available, a warning is
printed. If you don't like these warnings, specify the property "omit.opt.warnings"
(build -Domit.opt.warnings).


                              Happy hacking from the Apache Cocoon Dev Team :)

============================================================================ -->

<project default="all" basedir="." name="Apache Cocoon">

  <!--
    Give user a chance to override without editing this file
    (and without typing -D each time he compiles it)
  -->
  <property file=".ant.properties"/>
  <property file="${user.home}/.ant.properties"/>

  <!--
    these are here only for those who use jikes compiler. For other
    developers this part makes no difference.
  -->
  <property name="build.compiler.emacs" value="on"/>
  <!-- property name="build.compiler.warnings" value="true"/ -->
  <property name="build.compiler.pedantic" value="false"/>
  <property name="build.compiler.depend" value="true"/>
  <property name="build.compiler.fulldepend" value="true"/>

  <!-- =================================================================== -->
  <!-- Indentify Classpath                                                 -->
  <!-- =================================================================== -->
  <path id="classpath">
    <fileset dir="./lib/core">
      <include name="*.jar"/>
    </fileset>
    <fileset dir="./lib/optional">
      <include name="*.jar"/>
    </fileset>
  </path>

  <path id="scratchpad.classpath">
    <fileset dir="./lib/core">
      <include name="*.jar"/>
    </fileset>
    <fileset dir="./lib/optional">
      <include name="*.jar"/>
    </fileset>
    <fileset dir="./src/scratchpad/lib">
      <include name="*.jar"/>
    </fileset>
    <!-- FIXME : how to build a path that references a property set in 'init' target ? -->
    <pathelement path="./build/cocoon/classes"/>
  </path>

  <!-- =================================================================== -->
  <!-- Initialization target                                               -->
  <!-- =================================================================== -->
  <target name="init">
    <tstamp/>

    <property name="fullname" value="Apache Cocoon"/>
    <property name="Name"     value="Cocoon"/>
    <property name="name"     value="cocoon"/>
    <property name="version"  value="2.0.1"/>
    <property name="short.version" value="2.0.1"/>
    <property name="year"     value="1999-2002"/>

    <echo message="--------------------------------------------------------------"/>
    <echo message="            ${fullname} ${version} [${year}]                  "/>
    <echo message="--------------------------------------------------------------"/>
    <echo message="Building with ${ant.version}"/>
    <echo message="using build file ${ant.file}"/>
    <echo message="--------------------------------------------------------------"/>

    <property name="debug"          value="on"/>
    <property name="optimize"       value="off"/>
    <property name="deprecation"    value="off"/>
    <property name="nowarn"         value="on"/>
    <property name="build.compiler" value="classic"/>
    <property name="target.vm"      value="1.2"/>

    <property name="src.dir"      value="./src"/>
    <property name="java.dir"     value="${src.dir}/java"/>
    <property name="test.dir"     value="${src.dir}/test"/>
    <property name="lib.dir"      value="./lib"/>
    <property name="tools.dir"    value="./tools"/>
    <property name="docs.dir"     value="${src.dir}/documentation/xdocs"/>
    <property name="images.dir"   value="${src.dir}/documentation/images"/>
    <property name="webapp.dir"   value="${src.dir}/webapp"/>
    <property name="resource.dir" value="${src.dir}/resources"/>
    <property name="packages"     value="org.apache.*"/>
    <property name="context.dir"  value="${src.dir}/documentation"/>

    <property name="scratchpad.dir"  value="${src.dir}/scratchpad"/>
    <property name="scratchpad.src"  value="${scratchpad.dir}/src"/>
    <property name="scratchpad.lib"  value="${scratchpad.dir}/lib"/>
    <property name="scratchpad.name" value="cocoon-scratchpad"/>

    <property name="build.root"     value="./build"/>
    <property name="build.dir"      value="${build.root}/${name}"/>
    <property name="build.src"      value="${build.dir}/src"/>
    <property name="build.test"      value="${build.dir}/test"/>
    <property name="build.dest"     value="${build.dir}/classes"/>
    <property name="build.docs"     value="${build.dir}/docs"/>
    <property name="build.xdocs"    value="${build.dir}/xdocs"/>
    <property name="build.docs.printer" value="${build.dir}/printer-docs"/>
    <property name="build.war"      value="${build.dir}/webapp"/>
    <property name="build.javadocs" value="${build.dir}/javadocs"/>
    <property name="build.context" value="${build.dir}/documentation"/>
    <property name="build.scratchpad" value="${build.dir}/scratchpad"/>
    <property name="build.scratchpad.src" value="${build.scratchpad}/src"/>
    <property name="build.scratchpad.dest" value="${build.scratchpad}/classes"/>

    <property name="dist.root"   value="./dist"/>
    <property name="dist.name" value="${name}-${version}"/>
    <property name="dist.dir"    value="${dist.root}/${dist.name}"/>
    <property name="dist.src.dir"    value="${dist.root}/source/${dist.name}"/>
    <property name="dist.bin.dir"    value="${dist.root}/bin/${dist.name}"/>
    <property name="dist.target" value="${dist.root}"/>

    <property name="site" value="../xml-site/targets/${name}"/>

    <property name="build.announce" value="${build.dir}/Announcement.xml"/>
    <property name="announce2txt" value="./documentation/stylesheets/announcement2txt.xsl"/>

    <!--
    The location of tools.jar, relative to the JAVA_HOME home.
    -->
    <property name="tools.jar" value="${java.home}/../lib/tools.jar"/>
    <available file="${tools.jar}" property="tools.jar.present"/>

    <filter token="Name"    value="${fullname}"/>
    <filter token="name"    value="${fullname}"/>
    <filter token="year"    value="${year}"/>
    <filter token="version" value="${version}"/>
    <filter token="date"    value="${TODAY}"/>
    <filter token="log"     value="true"/>
    <filter token="verbose" value="true"/>
    <filter token="install.war" value="${install.war}"/>

    <!-- Add filters for loading database information from database.properties file -->
    <property file="database.properties"/>
    <filter token="database-driver" value="${database-driver}"/>
    <filter token="database-url" value="${database-url}"/>
    <filter token="database-user" value="${database-user}"/>
    <filter token="database-password" value="${database-password}"/>

    <!-- compile the ant tasks -->
    <mkdir dir="${tools.dir}/anttasks"/>
    <javac srcdir="${tools.dir}/src" destdir="${tools.dir}/anttasks"/>

  </target>

  <!-- =================================================================== -->
  <!-- Trial builds - begin                                                -->
  <!-- =================================================================== -->

  <!-- =================================================================== -->
  <!-- Try other builds that could go into this core build                 -->
  <!-- =================================================================== -->
  <target name="try" depends="init" description="Builds to try before including in main build">
    <ant target="${try.task}" antfile="build-t.xml"/>
  </target>

  <!-- =================================================================== -->
  <!-- Installs Cocoon war file in a specified directory                   -->
  <!-- =================================================================== -->
  <target name="installwar" description="* Installs the war package in a specified directory">
    <property name="include.webapp.libs" value="true"/>
    <property name="install.war" value=""/>
    <user-input name="install.war">Please select an installation directory</user-input>
    <antcall target="install"/>
  </target>

  <!-- =================================================================== -->
  <!-- Trial builds - end                                                  -->
  <!-- =================================================================== -->

  <!-- =================================================================== -->
  <!-- Test for optional components                                        -->
  <!-- =================================================================== -->
  <target name="optional-tests" depends="init"
          description="Tests for optional classes missing to the environment">
  
    <!-- A simple task to test for a class -->
    <taskdef name="class-available" classname="ClassAvailableTask" 
        classpath="./tools/anttasks"/>

    <available property="jaxen.present" classname="org.jaxen.dom.XPath">
      <classpath refid="classpath"/>
    </available>
    <available property="ifx.driver.present" classname="com.informix.jdbc.IfxResultSet">
      <classpath refid="classpath"/>
    </available>


    <class-available classpathref="classpath" 
                    property="xmldb.present" 
                    classname="org.xmldb.api.DatabaseManager"/>

    <class-available classpathref="classpath" 
                    property="jfor.present" 
                    classname="org.jfor.jfor.converter.Converter"/>

    <class-available classpathref="classpath" 
                    property="servlet.present" 
                    classname="javax.servlet.http.HttpServlet"/>

    <class-available classpathref="classpath" 
                    property="servlet23.present" 
                    classname="javax.servlet.http.HttpServletRequestWrapper"/>

    <class-available classpathref="classpath"
                    property="bsf.present" 
                    classname="com.ibm.bsf.BSFException"/>

    <class-available classpathref="classpath"
                    property="rhino.present" 
                    classname="org.mozilla.javascript.tools.jsc.Main"/>

    <class-available classpathref="classpath"
                    property="jstyle.present" 
                    classname="jstyle.JSFormatter"/>

    <class-available classpathref="classpath"
                    property="xpath.present" 
                    classname="org.apache.xpath.XPathAPI"/>

    <class-available classpathref="classpath"
                    property="deli.present" 
                    classname="com.hp.hpl.deli.Profile"/>

    <class-available classpathref="classpath"
                    property="velocity.present" 
                    classname="org.apache.velocity.app.Velocity"/>

    <class-available classpathref="classpath"
                    property="resolver.present" 
                    classname="org.apache.xml.resolver.Resolver"/>

    <available property="ora.driver.present" 
               classname="oracle.jdbc.OracleResultSet">
          <classpath refid="classpath"/>
    </available>

    <available property="mail.present" 
               classname="javax.mail.Session">
          <classpath refid="classpath"/>
    </available>

    <available property="weblogic.present" 
               classname="weblogic.servlet.internal.ServletContextImpl">
          <classpath refid="classpath"/>
    </available>

    <available property="jdbc3.present" classname="java.sql.Savepoint">
      <classpath refid="classpath"/>
    </available>

    <class-available classpathref="classpath" 
                    property="php.present" 
                    classname="net.php.servlet"/>

    <class-available classpathref="classpath" 
                    property="xt.present" 
                    classname="com.jclark.xsl.sax.XMLProcessorImpl"/>

    <class-available classpathref="classpath" 
                    property="naming.present" 
                    classname="javax.naming.Context"/>

    <class-available classpathref="classpath" 
                    property="svg.present" 
                    classname="org.apache.batik.transcoder.Transcoder"/>

    <class-available classpathref="classpath" 
                    property="fop.present" 
                    classname="org.apache.fop.apps.Driver"/>

    <class-available classpathref="classpath" 
                    property="tidy.present" 
                    classname="org.w3c.tidy.Tidy"/>

    <class-available classpathref="classpath" 
                    property="maybeupload.present" 
                    classname="uk.co.weft.maybeupload.MaybeUploadRequestWrapper"/>

    <class-available classpathref="classpath" 
                    property="lucene.present" 
                    classname="org.apache.lucene.search.Searcher"/>

    <class-available classpathref="classpath" 
                    property="hsqldb.present" 
                    classname="org.hsqldb.Server"/>
  </target>
  
  <target name="prepare-jdbc" depends="filter-jdbc,nofilter-jdbc"/>

  <target name="filter-jdbc" unless="jdbc3.present">
    <filter token="JDBC3_START" value="/*"/>
    <filter token="JDBC3_END" value="*/"/>
  </target>

  <target name="nofilter-jdbc" if="jdbc3.present">
    <filter token="JDBC3_START" value=""/>
    <filter token="JDBC3_END" value=""/>
  </target>

  <!-- =================================================================== -->
  <!-- Macro for optional warnings                                         -->
  <!-- =================================================================== -->
  <target name="op-warning" description="General waring target (used by other targets)" unless="omit.opt.warnings">              
    <echo>**********************************************</echo>
    <echo>*</echo>
    <echo>*  Classes of the optional package ${thing} are not </echo>
    <echo>*  available. ${fullname} builds without them.</echo>
    <echo>*</echo>
    <echo>*  ${message}</echo>
    <echo>*</echo>
    <echo>*  Recovery:</echo>
    <echo>*  ${recovery}</echo>
    <echo>*</echo>    
    <echo>***********************************************</echo>
    <echo/>
  </target>
  
  <!-- =================================================================== -->
  <!-- Warnings                                                            -->
  <!-- =================================================================== -->
  <target name="bsf-warn" unless="bsf.present" depends="optional-tests"
      description="Outputs a warning if com.ibm.bsf.* classes are missing during compilation">
    <antcall target="op-warning">
      <param name="thing" value="BSF"/>
      <param name="recovery" 
        value="Get the BSF package and place the jar in the lib/optional dir"/>
      <param name="message"
             value="BSF is required for the script action."/>
    </antcall>
  </target>  
  <target name="jfor-warn" unless="jfor.present" depends="optional-tests"
      description="Outputs a warning if org.jfor.jfor.* classes are missing during compilation">
    <antcall target="op-warning">
      <param name="thing" value="JFOR"/>
      <param name="recovery" 
        value="Get the JFOR package from http://www.jfor.org/ and place the jar in the lib/optional dir"/>
      <param name="message"
             value="JFOR is required for the fo2rtf serializer."/>
    </antcall>
  </target>  
  <target name="xmldb-warn" unless="xmldb.present" depends="optional-tests"
      description="Outputs a warning if org.xmldb.api.* classes are missing during compilation">
    <antcall target="op-warning">
      <param name="thing" value="XMLDB"/>
      <param name="recovery" 
        value="Get the xmldb package from http://www.xmldb.org/xapi/ and place the xmldb-api jar in the lib/optional dir"/>
      <param name="message"
             value="XMLDB is required for the xmldb and xmldbcollection generator."/>
    </antcall>
  </target>  
  <target name="xt-warn" unless="xt.present" depends="optional-tests"
      description="Outputs a warning if com.jclark.xsl.* classes are missing during compilation">
    <antcall target="op-warning">
      <param name="thing" value="XT"/>
      <param name="recovery" 
        value="Get the xt package from http://www.jclark.com/xml/xt.html and place xt.jar in the lib/optional dir"/>
      <param name="message"
             value="XT is required for the xt transformer."/>
    </antcall>
  </target>  
  <target name="php-warn" unless="php.present" depends="optional-tests"
      description="Outputs a warning if net.php.* classes are missing during compilation">
    <antcall target="op-warning">
      <param name="thing" value="PHP"/>
      <param name="recovery" 
        value="Get the PHP servlet (phpsrvlt.jar) and place the jar in the lib/optional dir"/>
      <param name="message"
             value="PHP is required for the php generator."/>
    </antcall>
  </target>  
  <target name="naming-warn" unless="naming.present" depends="optional-tests"
      description="Outputs a warning if javax.naming.* classes are missing during compilation">
    <antcall target="op-warning">
      <param name="thing" value="JNDI"/>
      <param name="recovery" 
        value="Get the jndi.jar from Sun and place the jar in the lib/optional dir"/>
      <param name="message"
             value="JNDI is required for the ldap generator and the parentcm generator."/>
    </antcall>
  </target>  
  <target name="svg-warn" unless="svg.present" depends="optional-tests" 
      description="Outputs a warning if org.apache.batik.* classes are missing during compilation">
    <antcall target="op-warning">
      <param name="thing" value="Batik"/>
      <param name="recovery" 
        value="Get Batik from http://xml.apache.org/batik and place the jar in the lib/optional dir"/>
      <param name="message"
             value="Batik is required for the svg serializers."/>
    </antcall>
  </target>  
  <target name="fop-warn" unless="fop.present" depends="optional-tests"
      description="Outputs a warning if org.apache.fop.* classes are missing during compilation">
    <antcall target="op-warning">
      <param name="thing" value="FOP"/>
      <param name="recovery" 
        value="Get FOP from http://xml.apache.org/fop and place the jar in the lib/optional dir"/>
      <param name="message"
             value="FOP is required for the fo2pdf, fo2ps and fo2pcl serializer."/>
    </antcall>
  </target>  
  <target name="tidy-warn" unless="tidy.present" depends="optional-tests" 
      description="Outputs a warning if org.w3c.tidy.* classes are missing during compilation">
    <antcall target="op-warning">
      <param name="thing" value="JTidy"/>
      <param name="recovery" 
        value="Get JTidy from http://sourceforge.net/projects/jtidy/ and place the jar in the lib/optional dir"/>
      <param name="message"
             value="JTidy is required for the html generator."/>
    </antcall>
  </target>  
  <target name="maybeupload-warn" unless="maybeupload.present" depends="optional-tests"
      description="Outputs a warning if uk.co.weft.maybeupload.* classes are missing during compilation">
    <antcall target="op-warning">
      <param name="thing" value="MaybeUpload"/>
      <param name="recovery" 
        value="Get MaybeUpload from http://www.weft.co.uk/library/maybeupload/ and place the jar in the lib/optional dir"/>
      <param name="message"
             value="MaybeUpload simplifies the handling of uploaded files."/>
    </antcall>
  </target>  
  <target name="lucene-warn" unless="lucene.present" depends="optional-tests"
      description="Outputs a warning if org.apache.lucene.* classes are missing during compilation">
    <antcall target="op-warning">
      <param name="thing" value="Lucene"/>
      <param name="recovery" 
        value="Get Lucene from http://jakarta.apache.org/lucene/ and place the jar in the lib/optional dir"/>
      <param name="message"
             value="Lucene is required for the Cocoon searches."/>
    </antcall>
  </target>
  <target name="deli-warn" unless="deli.present" depends="optional-tests"
      description="Outputs a warning if com.hp.hpl.deli.* classes are missing during compilation">
    <antcall target="op-warning">
      <param name="thing" value="Deli"/>
      <param name="recovery" 
        value="Get Deli and place the jar in the lib/optional dir"/>
      <param name="message"
             value="Deli is required for ..."/>
    </antcall>
  </target>
  <target name="velocity-warn" unless="velocity.present" depends="optional-tests"
      description="Outputs a warning if org.apache.velocity.* classes are missing during compilation">
    <antcall target="op-warning">
      <param name="thing" value="Velocity"/>
      <param name="recovery" 
        value="Get Velocity from http://jakarta.apache.org and place the jar in the lib/optional dir"/>
      <param name="message"
             value="Velocity is required for the velocity generator."/>
    </antcall>
  </target>
  <target name="hsqldb-warn" unless="hsqldb.present" depends="optional-tests"
      description="Outputs a warning if org.hsqldb.* classes are missing during compilation">
    <antcall target="op-warning">
      <param name="thing" value="hsqldb"/>
      <param name="recovery" 
        value="Get hsqldb and place the jar in the lib/optional dir"/>
      <param name="message"
             value="hsqldb is required for the sql examples."/>
    </antcall>
  </target>
  <target name="resolver-warn" unless="resolver.present" depends="optional-tests"
      description="Outputs a warning if org.apache.xml.resolver.* classes are missing during compilation">
    <antcall target="op-warning">
      <param name="thing" value="Resolver"/>
      <param name="recovery" 
        value="Get the resolver package from xml-commons and place the jar in the lib/optional dir"/>
      <param name="message"
             value="The resolver allows entity resolving."/>
    </antcall>
  </target>
  
  <!-- =================================================================== -->
  <!-- Print out warnings for optional components                          -->
  <!-- =================================================================== -->
  <target name="optional-warnings" 
          depends="bsf-warn, jfor-warn, xmldb-warn, xt-warn, php-warn, naming-warn, svg-warn, fop-warn, tidy-warn, maybeupload-warn, lucene-warn, deli-warn, velocity-warn, hsqldb-warn, resolver-warn" 
      description="Outputs warnings if some optional jars are missing from the environment">
  </target>


  <!-- =================================================================== -->
  <!-- Prepares the build directory                                        -->
  <!-- =================================================================== -->
  <target name="prepare" depends="init, optional-tests, optional-warnings">
    <mkdir dir="${build.dir}"/>
  </target>

  <!-- =================================================================== -->
  <!-- Prepares the source code                                            -->
  <!-- =================================================================== -->
  <target name="prepare-src-main" depends="prepare,generate-java-code,prepare-jdbc">
    <mkdir dir="${build.src}"/>
    <mkdir dir="${build.dest}"/>
    <copy todir="${build.src}" filtering="on">
      <fileset dir="${java.dir}">
        <exclude name="**/JSP*.java"               unless="servlet.present"/>
        <exclude name="**/Jsp*.java"               unless="servlet.present"/>
        <exclude name="**/servlet.sitemap"         unless="servlet.present"/>
        <exclude name="**/components/deli/DeliImpl.java" unless="servlet.present"/>
        <exclude name="**/servlet/*.java"          unless="servlet.present"/>
        <exclude name="**/environment/http/*.java" unless="servlet.present"/>
        <exclude name="**/generation/StreamGenerator.java" unless="servlet.present"/>

        <exclude name="**/ScriptAction.java"      unless="bsf.present"/>
        <exclude name="**/ScriptGenerator.java"   unless="bsf.present"/>
        <exclude name="**/bsf.sitemap"            unless="bsf.present"/>

        <exclude name="**/components/deli/DeliImpl.java" unless="deli.present"/>
        <exclude name="**/deli.xconf"                    unless="deli.present"/>

        <exclude name="**/HTMLGenerator.java"  unless="tidy.present"/>
        <exclude name="**/tidy.sitemap"        unless="tidy.present"/>

        <exclude name="**/VelocityGenerator.java"  unless="velocity.present"/>
        <exclude name="**/velocity.sitemap"        unless="velocity.present"/>

        <exclude name="**/SVG*.java"                                   unless="svg.present"/>
        <exclude name="**/svg.sitemap"                                 unless="svg.present"/>
        <exclude name="**/components/transcoder/**.java"               unless="svg.present"/>
        <exclude name="**/components/url/Parsed**ProtocolHandler.java" unless="svg.present"/>

        <exclude name="**/FOP*"                unless="fop.present"/>
        <exclude name="**/renderer/*"          unless="fop.present"/>
        <exclude name="**/fop.sitemap"         unless="fop.present"/>

        <exclude name="**/XT*.java"            unless="xt.present"/>
        <exclude name="**/xt.sitemap"          unless="xt.present"/>

        <exclude name="**/Javascript*"         unless="rhino.present"/>

        <exclude name="**/components/resolver/ResolverImpl.java" unless="resolver.present"/>
        <exclude name="**/resolver.xconf"                        unless="resolver.present"/>

        <exclude name="**/Jstyle*"             unless="jstyle.present"/>
        
        <exclude name="**/Php*"                unless="php.present"/>
        <exclude name="**/php.sitemap"         unless="php.present"/>

        <exclude name="**/Ora*.java"           unless="ora.driver.present"/>

        <exclude name="**/Ifx*.java"           unless="ifx.driver.present"/>

        <exclude name="**/Sendmail*.java"      unless="mail.present"/>

        <exclude name="**/LDAPTransformer*.java"   unless="naming.present"/>
        <exclude name="**/samples/parentcm/*.java" unless="naming.present"/>
        <exclude name="**/naming.sitemap"          unless="naming.present"/>

        <exclude name="**/JSPEngineImplWLS.java"    unless="weblogic.present"/>

        <exclude name="**/XMLDB*.java"         unless="xmldb.present"/>
        <exclude name="**/xmldb.sitemap"       unless="xmldb.present"/>

        <exclude name="**/RTFSerializer.java"  unless="jfor.present"/>
        <exclude name="**/jfor.sitemap"        unless="jfor.present"/>

        <exclude name="**/xpath/XPathProcessorImpl*" unless="xpath.present"/>

        <exclude name="**/Jaxen*"                    unless="jaxen.present"/>

        <exclude name="**/components/hsqldb/ServerImpl.java" unless="hsqldb.present"/>
        <exclude name="**/hsqldb.xconf"                      unless="hsqldb.present"/>

        <exclude name="**/components/search/*"             unless="lucene.present"/>
        <exclude name="**/generation/SearchGenerator.java" unless="lucene.present"/>
        <exclude name="**/lucene.xconf"                    unless="lucene.present"/>

        <exclude name="**/http/RequestWrapper*.java"/>
        <exclude name="**/browser/*.x*"/>
      </fileset>
    </copy>

    <mkdir dir="${build.scratchpad.src}"/>
    <mkdir dir="${build.scratchpad.dest}"/>
    <copy todir="${build.scratchpad.src}" filtering="on">
      <fileset dir="${scratchpad.src}">
        <exclude name="**/Ifx*.java" unless="ifx.driver.present"/>

        <exclude name="**/XMLDB*.java" unless="xmldb.present"/>
      </fileset>
    </copy>
  </target>

  <!-- =================================================================== -->
  <!-- Prepares the servlet 2.3 source code if maybeupload is present      -->
  <!-- =================================================================== -->
  <target name="prepare-src-23-maybeupload" if="servlet23.present, maybeupload.present">
    <copy file="${java.dir}/org/apache/cocoon/environment/http/RequestWrapperMaybeUpload23.java"
        tofile="${build.src}/org/apache/cocoon/environment/http/RequestWrapper.java"
        filtering="on"
        overwrite="true"/>
  </target>

  <!-- =================================================================== -->
  <!-- Prepares the servlet 2.3 source code                                -->
  <!-- =================================================================== -->
  <target name="prepare-src-23" if="servlet23.present" unless="maybeupload.present">
    <copy file="${java.dir}/org/apache/cocoon/environment/http/RequestWrapper23.java"
        tofile="${build.src}/org/apache/cocoon/environment/http/RequestWrapper.java"
        filtering="on"
        overwrite="true"/>
  </target>

  <!-- =================================================================== -->
  <!-- Prepares the servlet 2.2 source code if maybeupload is present      -->
  <!-- =================================================================== -->
  <target name="prepare-src-22-maybeupload" unless="servlet23.present" if="maybeupload.present">
    <copy file="${java.dir}/org/apache/cocoon/environment/http/RequestWrapperMaybeUpload22.java"
        tofile="${build.src}/org/apache/cocoon/environment/http/RequestWrapper.java"
        filtering="on"
        overwrite="true"/>
  </target>

  <!-- =================================================================== -->
  <!-- Prepares the servlet 2.2 source code                                -->
  <!-- =================================================================== -->
  <target name="prepare-src-22" unless="servlet23.present, maybeupload.present">
    <copy file="${java.dir}/org/apache/cocoon/environment/http/RequestWrapper22.java"
        tofile="${build.src}/org/apache/cocoon/environment/http/RequestWrapper.java"
        filtering="on"/>
  </target>

  <!-- =================================================================== -->
  <!-- Prepares the servlet source                                         -->
  <!-- =================================================================== -->
  <target name="prepare-src-servlet" depends="prepare-src-main" if="servlet.present">
    <antcall target="prepare-src-22"/>
    <antcall target="prepare-src-22-maybeupload"/>
    <antcall target="prepare-src-23"/>
    <antcall target="prepare-src-23-maybeupload"/>
  </target>

  <!-- =================================================================== -->
  <!-- Prepares the source code                                            -->
  <!-- =================================================================== -->
  <target name="prepare-src" depends="prepare-src-servlet"/>

  <!-- =================================================================== -->
  <!-- Set a variable if the generated java code is already up-to-date.    -->
  <!-- =================================================================== -->
  <target name="generate-java-code-check" depends="init">
    <uptodate property="generate-java-code.notrequired"
        targetfile="${build.src}/org/apache/cocoon/components/browser/BrowserImpl.java" >
      <srcfiles dir="${java.dir}/org/apache/cocoon/components/browser"
          includes="BrowserImpl.xml,BrowserImpl.xsl"/>
    </uptodate>
  </target>

  <!-- =================================================================== -->
  <!-- Generate the Java code from XML using XSLT                          -->
  <!-- =================================================================== -->
  <target name="generate-java-code" depends="generate-java-code-check"
          unless="generate-java-code.notrequired">
    <style basedir="${java.dir}/org/apache/cocoon/components/browser"
           destdir="${build.src}/org/apache/cocoon/components/browser"
           includes="BrowserImpl.xml"
           extension=".java"
           style="${java.dir}/org/apache/cocoon/components/browser/BrowserImpl.xsl"/>
  </target>


  <!-- =================================================================== -->
  <!-- Compiles the source directory                                       -->
  <!-- =================================================================== -->
  <target name="compile" depends="prepare-src"
          description="Compiles the source code">
    <copy todir="${build.dest}">
      <fileset dir="${build.src}">
        <include name="**/Manifest.mf"/>
        <include name="**/*.xsl"/>
        <include name="**/*.roles"/>
        <include name="**/*.xconf"/>
        <include name="META-INF/**"/>
      </fileset>
    </copy>

    <echo message="Compiling with Java ${ant.java.version}, debug ${debug}, optimize ${optimize}, deprecation ${deprecation}"/>

    <javac srcdir="${build.src}"
           destdir="${build.dest}"
           debug="${debug}"
           optimize="${optimize}"
           deprecation="${deprecation}"
           target="${target.vm}"
           nowarn="${nowarn}">
      <classpath refid="classpath"/>
    </javac>

    <copy todir="${build.scratchpad.dest}">
      <fileset dir="${build.scratchpad.src}">
        <include name="**/Manifest.mf"/>
        <include name="**/*.xsl"/>
        <include name="**/*.roles"/>
        <include name="**/*.xconf"/>
        <include name="META-INF/**"/>
      </fileset>
    </copy>

    <javac srcdir="${build.scratchpad.src}"
           destdir="${build.scratchpad.dest}"
           debug="${debug}"
           optimize="${optimize}"
           deprecation="${deprecation}"
           target="${target.vm}">
      <classpath refid="scratchpad.classpath"/>
    </javac>
  </target>

  <!-- =================================================================== -->
  <!-- Creates the jar file                                                -->
  <!-- =================================================================== -->
  <target name="all" depends="package" description="Default target"/>

  <target name="package" depends="compile" description="Generates the jar package">
    <jar jarfile="${build.dir}/${name}.jar" manifest="${build.src}/Manifest.mf">
      <fileset dir="${build.dest}">
        <include name="org/**"/>
        <include name="META-INF/**"/>
        <exclude name="org/apache/cocoon/samples/**"/>
      </fileset>
    </jar>

    <jar jarfile="${build.dir}/${scratchpad.name}.jar">
      <fileset dir="${build.scratchpad.dest}">
        <include name="org/**"/>
      </fileset>
    </jar>
  </target>


  <!-- =================================================================== -->
  <!-- Prepares the docs                                                   -->
  <!-- =================================================================== -->
  <target name="prepare-docs" depends="init">

    <mkdir dir="${build.context}"/>
    <mkdir dir="${build.context}/images"/>
    <mkdir dir="${build.docs}"/>
    <mkdir dir="${build.dir}/work"/>

    <!-- make filtered copy of XML docs -->
    <copy todir="${build.context}" filtering="on">
      <fileset dir="${context.dir}">
        <exclude name="images/**"/>
      </fileset>
    </copy>

    <!-- Add changes and todo -->
    <copy file="changes.xml" tofile="${build.context}/xdocs/changes.xml" filtering="on"/>
    <copy file="todo.xml"    tofile="${build.context}/xdocs/todo.xml" filtering="on"/>
    <replace file="${build.context}/xdocs/changes.xml" token="src/documentation/xdocs/dtd/" value="dtd/"/>
    <replace file="${build.context}/xdocs/todo.xml"    token="src/documentation/xdocs/dtd/" value="dtd/"/>

    <!-- Copy images -->
    <copy todir="${build.context}/images" filtering="off">
      <fileset dir="${context.dir}/images"/>
    </copy>

    <!-- Copy entity catalog and entities -->
    <copy todir="${build.context}/resources/entities" filtering="on">
      <fileset dir="${webapp.dir}/resources/entities"/>
    </copy>
    <mkdir dir="${build.context}/WEB-INF/classes"/>
    <move todir="${build.context}/WEB-INF/classes">
      <fileset dir="${build.context}/resources/entities">
        <include name="CatalogManager.properties"/>
      </fileset>
    </move>

  </target>


  <!-- =================================================================== -->
  <!-- Set a variable if the generated docs are already up-to-date.        -->
  <!-- =================================================================== -->
  <target name="docs_check" depends="init">
    <uptodate property="docs.notrequired" targetfile="${build.docs}/index.html" >
      <srcfiles dir="." includes="changes.xml,todo.xml"/>
      <srcfiles dir="${context.dir}/xdocs" includes="**/*.xml"/>
    </uptodate>
  </target>

  <!-- =================================================================== -->
  <!-- If generated  docs is already up-to-date, print a message saying so. -->
  <!-- =================================================================== -->
  <target name="docs_done" if="docs.notrequired">
    <echo message="-------------------------------------------------------------"/>
    <echo message="Not rebuilding docs, as they are up-to-date:"/>
    <echo message="  ${build.docs}/index.html is more recent than"/>
    <echo message="  todo.xml, changes.xml, ${context.dir}/xdocs/*.xml"/>
    <echo message="-------------------------------------------------------------"/>
  </target>

  <!-- =================================================================== -->
  <!-- The documentation system                                            -->
  <!-- =================================================================== -->
  <target name="docs"
          depends="package, prepare-docs, docs_check, docs_done"
          unless="docs.notrequired"
          description="* Generates the documentation">

    <java classname="org.apache.cocoon.Main" fork="true" dir="${build.context}" failonerror="true">
      <arg value="-c."/>
      <arg value="-d../docs"/>
      <arg value="-w../work"/>
      <arg value="-l../work/cocoon.log"/>
      <arg value="-uINFO"/>
      <arg value="index.html"/>
      <classpath>
        <path refid="classpath"/>
        <fileset dir="${build.dir}">
          <include name="*.jar"/>
        </fileset>
        <pathelement location="${tools.jar}"/>
        <pathelement location="${build.context}/WEB-INF/classes"/>
      </classpath>
    </java>

  </target>

  <!-- =================================================================== -->
  <!-- Copies the webapp directories                                       -->
  <!-- =================================================================== -->
  <target name="copy-webapp" depends="prepare-docs, prepare, compile">
    <mkdir dir="${build.war}"/>

    <mkdir dir="${build.war}/WEB-INF/classes"/>
    <copy todir="${build.war}/WEB-INF/classes" filtering="off">
      <fileset dir="${build.dest}" includes="org/apache/cocoon/samples/**"/>
      <fileset dir="${build.src}" includes="org/apache/cocoon/samples/**"/>
    </copy>

    <copy todir="${build.war}" filtering="on">
      <fileset dir="${webapp.dir}">
        <exclude name="**/*.gif"/>
        <exclude name="**/*.jpg"/>
        <exclude name="**/*.png"/>
        <exclude name="**/i18n/**"/>
        <exclude name="**/db/*"/>
      </fileset>
    </copy>

    <copy todir="${build.war}" filtering="off">
      <fileset dir="${webapp.dir}">
        <include name="**/*.gif"/>
        <include name="**/*.jpg"/>
        <include name="**/*.png"/>
        <include name="**/i18n/**"/>
        <include name="**/db/*"/>
      </fileset>
    </copy>

    <!-- copy the documentation, it's already prepared in the build context dir -->
    <mkdir dir="${build.war}/documentation"/>
    <copy todir="${build.war}/documentation" filtering="off">
      <fileset dir="${build.context}"/>
    </copy>

    <!-- correct the image references -->
    <replace dir="${build.war}/documentation/svg" token="context://images" value="context://documentation/images"/>

  </target>

  <!-- =================================================================== -->
  <!-- Prepares the webapp directories                                     -->
  <!-- =================================================================== -->
  <target name="prepare-webapp" depends="copy-webapp">
      <!-- A task to change the sitemap. It is used to add optional components -->
      <taskdef name="sitemap-tool" classname="SitemapToolTask" 
          classpath="${tools.dir}/anttasks"/>
      <!-- A task to change the xconf. It is used to add optional components -->
      <taskdef name="xconf-tool" classname="XConfToolTask" 
          classpath="${tools.dir}/anttasks"/>

      <!-- Invoke the SitemapToolTask to add optional entries -->
      <sitemap-tool directory="${build.src}"
                   extension="sitemap"
                   sitemap="${build.war}/sitemap.xmap"/>

      <!-- Invoke the XConfTool to add optional entries -->
      <xconf-tool directory="${build.src}"
                 extension="xconf"
                 configuration="${build.war}/cocoon.xconf"/>
  </target>

  <!-- =================================================================== -->
  <!-- Prepares the libraries for the war package                          -->
  <!-- =================================================================== -->
  <target name="prepare-xsp" depends="package" if="compile.xsp">
    <java classname="org.apache.cocoon.Main" fork="yes" failonerror="true">
      <arg line="-x -w ${build.war}/WEB-INF/classes -c webapp" />
      <classpath>
        <fileset dir="lib/core">
          <include name="**/*.jar"/>
        </fileset>
        <pathelement location="${build.dir}/${name}.jar"/>
        <pathelement location="${tools.jar}"/>
      </classpath>
    </java>
  </target>

  <!-- =================================================================== -->
  <!-- Prepares the libraries for the war package                          -->
  <!-- =================================================================== -->
  <target name="prepare-webapp-libs" depends="package,prepare-tools-lib" if="include.webapp.libs">
    <copy todir="${build.war}/WEB-INF/lib">
      <fileset dir="${lib.dir}/core">
        <include name="*.jar"/>
        <exclude name="servlet*.jar"/>
      </fileset>
    </copy>
    <copy todir="${build.war}/WEB-INF/lib">
      <fileset dir="${lib.dir}/optional">
        <include name="*.jar"/>
        <exclude name="servlet*.jar"/>
      </fileset>
    </copy>

    <mkdir dir="${build.war}/WEB-INF/classes"/>

    <move todir="${build.war}/WEB-INF/classes">
      <fileset dir="${build.war}/resources/entities">
        <include name="CatalogManager.properties"/>
      </fileset>
    </move>

    <copy file="${build.dir}/${name}.jar" tofile="${build.war}/WEB-INF/lib/${name}-${version}.jar"/>
  </target>

  <!-- =================================================================== -->
  <!-- Prepares the scratchpad libraries for the war package               -->
  <!-- =================================================================== -->
  <target name="prepare-scratchpad-libs" depends="prepare-webapp-libs" if="include.scratchpad.libs">
    <copy todir="${build.war}/WEB-INF/lib">
      <fileset dir="${scratchpad.lib}">
        <include name="*.jar"/>
        <exclude name="servlet*.jar"/>
      </fileset>
    </copy>

    <copy file="${build.dir}/${scratchpad.name}.jar" tofile="${build.war}/WEB-INF/lib/${scratchpad.name}.jar"/>
  </target>

  <!-- =================================================================== -->
  <!-- Copies the tools.jar to javac.jar in web-inf/lib                    -->
  <!-- =================================================================== -->
  <target name="prepare-tools-lib" depends="package" if="tools.jar.present">
    <!-- NOTE: java.home is normally set by the JVM to the /jre directory -->
    <copy file="${tools.jar}" tofile="${build.war}/WEB-INF/lib/javac.jar"/>
  </target>

  <!-- =================================================================== -->
  <!-- Creates the war file                                                -->
  <!-- =================================================================== -->
  <target name="webapp" depends="prepare-webapp, prepare-webapp-libs, prepare-scratchpad-libs, prepare-xsp" description="* Generates the war package">
    <jar jarfile="${build.dir}/${name}.war" basedir="${build.war}" includes="**"/>
  </target>

  <!-- =================================================================== -->
  <!-- Creates a local webapp directly useable as a servlet context        -->
  <!-- =================================================================== -->
  <target name="webapp-local" depends="prepare-webapp, prepare-webapp-libs"
      description="Generates a local webapp directory usable as servlet context for quicker turn around">
    <delete file="${build.war}/WEB-INF/lib/${name}-${version}.jar"/>
    <copy todir="${build.war}/WEB-INF/classes">
      <fileset dir="${build.dest}"/>
      <fileset dir="${build.scratchpad.dest}"/>
    </copy>
  </target>

  <!-- =================================================================== -->
  <!-- Removes existing uncompressed webapp                                -->
  <!-- =================================================================== -->
  <target name="remove-webapp" if="remove.webapp" description="Removes existing uncompressed webapp" depends="init">
    <delete dir="${install.war}/${name}"/>
  </target>

  <!-- =================================================================== -->
  <!-- Installs Cocoon file                                                -->
  <!-- =================================================================== -->
  <target name="install" depends="package, webapp, remove-webapp" if="install.war" description="* Installs the war package">
    <copy file="${build.dir}/${name}.war" tofile="${install.war}/${name}.war"/>
  </target>

  <!-- =================================================================== -->
  <!-- Set a variable if the generated printer docs are already up-to-date. -->
  <!-- =================================================================== -->
  <target name="printer-docs_check" depends="init">
    <uptodate property="printer-docs.notrequired" targetfile="${build.docs.printer}/index.html" >
      <srcfiles dir="." includes="changes.xml,todo.xml"/>
      <srcfiles dir="${docs.dir}" includes="**/*.xml"/>
    </uptodate>
  </target>

  <!-- =================================================================== -->
  <!-- If generated printer docs is already up-to-date, print a message saying so. -->
  <!-- =================================================================== -->
  <target name="printer-docs_done" if="printer-docs.notrequired">
    <echo message="-------------------------------------------------------------"/>
    <echo message="Not rebuilding printer docs, as they are up-to-date:"/>
    <echo message="  ${build.docs.printer}/index.html is more recent than"/>
    <echo message="  todo.xml, changes.xml, ${docs.dir}/*.xml"/>
    <echo message="-------------------------------------------------------------"/>
  </target>

  <!-- =================================================================== -->
  <!-- Create the announcements                                            -->
  <!-- =================================================================== -->
  <target name="announcement" depends="prepare" description="* Creates the announcement for new releases">

    <copy file="announcement.xml" tofile="${build.announce}" filtering="on"/>

    <style basedir="${build.dir}" destdir="./" style="${announce2txt}"
           includes="Announcement.xml" extension=".txt"/>

  </target>

  <!-- =================================================================== -->
  <!-- Prepares the printer-docs                                           -->
  <!-- =================================================================== -->
  <target name="prepare-printer-docs" depends="prepare-docs">

    <mkdir dir="${build.dir}/printer_documentation"/>

    <!-- copy prepared docs -->
    <copy todir="${build.dir}/printer_documentation" filtering="off">
      <fileset dir="${build.context}">
      </fileset>
    </copy>

    <!-- copy printer skin -->
    <copy todir="${build.dir}/printer_documentation/stylesheets" filtering="off" overwrite="yes">
      <fileset dir="${build.context}/stylesheets/printer_skin">
      </fileset>
    </copy>

  </target>


  <!-- =================================================================== -->
  <!-- Generate printer-friendly HTML docs                                 -->
  <!-- =================================================================== -->
  <target name="printer-docs" depends="package, prepare-printer-docs, printer-docs_check, printer-docs_done"
      unless="printer-docs.notrequired"
      description="* Generates printer-friendly documentation">
    <mkdir dir="${build.docs.printer}"/>

    <java classname="org.apache.cocoon.Main" fork="true" dir="${build.dir}/printer_documentation" failonerror="true">
      <arg value="-c."/>
      <arg value="-d../printer-docs"/>
      <arg value="-w../work-printer"/>
      <arg value="-l../work-printer/cocoon.log"/>
      <arg value="-uINFO"/>
      <arg value="index.html"/>
      <classpath>
        <path refid="classpath"/>
        <fileset dir="${build.dir}">
          <include name="*.jar"/>
        </fileset>
        <pathelement location="${tools.jar}"/>
        <pathelement location="${build.context}/WEB-INF/classes"/>
      </classpath>
    </java>
  </target>

  <!-- =================================================================== -->
  <!-- Creates the web site                                                -->
  <!-- =================================================================== -->
  <target name="site" depends="docs, javadocs"
      description="Generates the web site (for site maintainers only)">
    <mkdir dir="${site}"/>
    <copy todir="${site}" filtering="off">
      <fileset dir="${build.docs}">
      </fileset>
    </copy>
    <copy todir="${site}/apidocs" filtering="off">
      <fileset dir="${build.javadocs}"/>
    </copy>
  </target>

  <!-- =================================================================== -->
  <!-- Set a variable if javadoc is already up-to-date.                    -->
  <!-- =================================================================== -->
  <target name="javadocs_check">
    <uptodate property="javadocs.notrequired" targetfile="${build.javadocs}/packages.html" >
      <srcfiles dir= "${build.src}" includes="**/*.java"/>
    </uptodate>
  </target>

  <!-- =================================================================== -->
  <!-- If javadoc is already up-to-date, print a message saying so.        -->
  <!-- =================================================================== -->
  <target name="javadocs_done" if="javadocs.notrequired">
    <echo message="-------------------------------------------------------------"/>
    <echo message="Not rebuilding Javadocs, as they are up-to-date:"/>
    <echo message="  ${build.javadocs}/packages.html is more recent than"/>
    <echo message="  ${build.src}/**/*.java"/>
    <echo message="-------------------------------------------------------------"/>
  </target>

  <!-- =================================================================== -->
  <!-- Creates the API documentation                                       -->
  <!-- =================================================================== -->
  <target name="javadocs" depends="prepare-src, javadocs_check, javadocs_done"
      unless="javadocs.notrequired"
      description="* Generates the API documentation">
    <mkdir dir="${build.javadocs}"/>
    <javadoc packagenames="${packages}"
             sourcepath="${build.src}"
             destdir="${build.javadocs}"
             author="true"
             version="true"
             use="false"
             noindex="true"
             windowtitle="${Name} API"
             doctitle="${Name}"
             bottom="Copyright &#169; ${year} Apache Software Foundation. All Rights Reserved."
             stylesheetfile="${resource.dir}/javadoc.css">
      <classpath refid="classpath"/>
    </javadoc>
  </target>

  <!-- =================================================================== -->
  <!-- Creates the source distribution                                     -->
  <!-- =================================================================== -->
  <target name="dist-src" depends="docs, javadocs" 
          description="Prepares the source distribution">
    <!-- Simply copy all and add the html docs -->
    <mkdir dir="${dist.root}"/>
    <mkdir dir="${dist.src.dir}"/>
    <mkdir dir="${dist.src.dir}/bin"/>
    <mkdir dir="${dist.src.dir}/lib"/>
    <mkdir dir="${dist.src.dir}/src"/>
    <mkdir dir="${dist.src.dir}/src/java"/>
    <mkdir dir="${dist.src.dir}/src/documentation"/>
    <mkdir dir="${dist.src.dir}/src/resources"/>
    <mkdir dir="${dist.src.dir}/src/scratchpad"/>
    <mkdir dir="${dist.src.dir}/src/webapp"/>
    <mkdir dir="${dist.src.dir}/docs"/>
    <mkdir dir="${dist.src.dir}/docs/apidocs"/>
    <mkdir dir="${dist.src.dir}/tools"/>

    <copy todir="${dist.src.dir}/tools">
      <fileset dir="${tools.dir}">
        <exclude name="anttasks/**"/> 
        <exclude name="lib/xalan*"/> 
        <exclude name="lib/xerces*"/> 
        <exclude name="lib/jtidy*"/> 
        <exclude name="lib/xml-apis*"/> 
      </fileset>
    </copy>

    <copy todir="${dist.src.dir}/src/documentation">
      <fileset dir="${build.context}"/>
    </copy>

    <copy todir="${dist.src.dir}/lib">
      <fileset dir="${lib.dir}"/>
    </copy>

    <copy todir="${dist.src.dir}/src/resources" filtering="on">
      <fileset dir="${resource.dir}">
        <exclude name="**/*.gif"/>
        <exclude name="**/*.jpg"/>
        <exclude name="**/*.png"/>
     </fileset>
    </copy>

    <copy todir="${dist.src.dir}/src/resources" filtering="off">
      <fileset dir="${resource.dir}">
        <include name="**/*.gif"/>
        <include name="**/*.jpg"/>
        <include name="**/*.png"/>
     </fileset>
    </copy>

    <copy todir="${dist.src.dir}/src/java" filtering="on">
      <fileset dir="${java.dir}"/>
    </copy>

    <copy todir="${dist.src.dir}/src/scratchpad" filtering="off">
      <fileset dir="${scratchpad.dir}"/>
    </copy>
    
    <copy todir="${dist.src.dir}/src/webapp" filtering="on">
      <fileset dir="${webapp.dir}">
        <exclude name="**/*.gif"/>
        <exclude name="**/*.jpg"/>
        <exclude name="**/*.png"/>
     </fileset>
    </copy>

    <copy todir="${dist.src.dir}/src/webapp" filtering="off">
      <fileset dir="${webapp.dir}">
        <include name="**/*.gif"/>
        <include name="**/*.jpg"/>
        <include name="**/*.png"/>
     </fileset>
    </copy>

    <!-- Fix for web.xml, cocoon.xconf and sitemap.xmap -->
    <copy file="${webapp.dir}/cocoon.xconf" tofile="${dist.src.dir}/src/webapp/cocoon.xconf" filtering="off" overwrite="yes"/>
    <copy file="${webapp.dir}/sitemap.xmap" tofile="${dist.src.dir}/src/webapp/sitemap.xmap" filtering="off" overwrite="yes"/>
    <copy file="${webapp.dir}/WEB-INF/web.xml" tofile="${dist.src.dir}/src/webapp/WEB-INF/web.xml" filtering="off" overwrite="yes"/>

    <copy todir="${dist.src.dir}/docs">
      <fileset dir="${build.docs}"/>
    </copy>
    <copy todir="${dist.src.dir}/docs/apidocs">
      <fileset dir="${build.javadocs}"/>
    </copy>

    <copy todir="${dist.src.dir}">
      <fileset dir="${docs.dir}">
        <include name="changes.xml, todo.xml"/>
      </fileset>
    </copy>

    <copy todir="${dist.src.dir}" filtering="on">
     <fileset dir=".">
      <include name="README"/>
      <include name="legal/*"/>
      <include name="WARNING"/>
      <include name="*.bat"/>
      <include name="*.sh"/>
      <include name="KEYS"/>
      <include name="*.xml"/>
      <include name="*.properties"/>
     </fileset>
    </copy>
    <copy file="INSTALL.src" tofile="${dist.src.dir}/INSTALL" filtering="on"/>

    <chmod perm="+x" file="${dist.src.dir}/run.sh"/>
    <chmod perm="+x" file="${dist.src.dir}/build.sh"/>
    <chmod perm="+x" file="${dist.src.dir}/tools/bin/antRun"/>
    <fixcrlf srcdir="${dist.src.dir}" includes="**.sh"        eol="lf"/>
    <fixcrlf srcdir="${dist.src.dir}" includes="antRun"       eol="lf"/>
    <fixcrlf srcdir="${dist.src.dir}" includes="**.bat"      eol="crlf"/>
  </target>

  <!-- =================================================================== -->
  <!-- Packages the source distribution as .zip                            -->
  <!-- =================================================================== -->
  <target name="dist-src-zip" depends="dist-src" 
          description="Generates the source distribution as a .zip file">
    <zip zipfile="${dist.target}/${dist.name}-src.zip"
         basedir="${dist.root}/source"/>
  </target>

  <!-- =================================================================== -->
  <!-- Packages the source distribution with .tar.gzip                     -->
  <!-- =================================================================== -->
  <target name="dist-src-tgz" depends="dist-src" 
          description="Generates the source distribution as a .tar.gz file">
    <tar tarfile="${dist.target}/${dist.name}-src.tar"
         basedir="${dist.root}/source"
         longfile="gnu"/>
    <gzip zipfile="${dist.target}/${dist.name}-src.tar.gz"
          src="${dist.target}/${dist.name}-src.tar"/>
  </target>

  <!-- =================================================================== -->
  <!-- Creates the source distribution                                     -->
  <!-- =================================================================== -->
  <target name="dist-bin" depends="package, webapp, docs, javadocs" 
          description="Prepares the binary distribution">
    <!-- Copy webapp and the html docs -->
    <mkdir dir="${dist.root}"/>
    <mkdir dir="${dist.bin.dir}"/>
    <mkdir dir="${dist.bin.dir}/webapp"/>
    <mkdir dir="${dist.bin.dir}/docs"/>
    <mkdir dir="${dist.bin.dir}/docs/apidocs"/>

    <copy todir="${dist.bin.dir}/webapp">
        <fileset dir="${build.war}"/>
    </copy>

    <!-- And now the jars -->
    <copy todir="${dist.bin.dir}/webapp/WEB-INF/lib">
      <fileset dir="${lib.dir}/core">
        <include name="*.jar"/>
        <exclude name="servlet*.jar"/>
      </fileset>
    </copy>
    <copy todir="${dist.bin.dir}/webapp/WEB-INF/lib">
      <fileset dir="${lib.dir}/optional">
        <include name="*.jar"/>
        <exclude name="servlet*.jar"/>
      </fileset>
    </copy>
    <mkdir dir="${dist.bin.dir}/webapp/WEB-INF/classes"/>

    <move todir="${dist.bin.dir}/webapp/WEB-INF/classes">
      <fileset dir="${dist.bin.dir}/webapp/resources/entities">
        <include name="CatalogManager.properties"/>
      </fileset>
    </move>

    <copy file="${build.dir}/${name}.jar" tofile="${dist.bin.dir}/webapp/WEB-INF/lib/${name}-${version}.jar"/>

    <copy todir="${dist.bin.dir}/docs">
      <fileset dir="${build.docs}"/>
    </copy>
    <copy todir="${dist.bin.dir}/docs/apidocs">
      <fileset dir="${build.javadocs}"/>
    </copy>

    <copy todir="${dist.bin.dir}">
      <fileset dir="${docs.dir}">
        <include name="changes.xml, todo.xml"/>
      </fileset>
    </copy>

    <copy todir="${dist.bin.dir}" filtering="on">
     <fileset dir=".">
      <include name="README"/>
      <include name="legal/*"/>
      <include name="WARNING"/>
      <include name="KEYS"/>
     </fileset>
    </copy>
    <copy file="INSTALL.bin" tofile="${dist.bin.dir}/INSTALL" filtering="on"/>

    <!-- Build the war file -->
    <jar jarfile="${dist.bin.dir}/${name}.war" basedir="${dist.bin.dir}/webapp" includes="**"/>

    <!-- Delete the webapp directory -->
    <delete dir="${dist.bin.dir}/webapp"/>
  </target>

  <!-- =================================================================== -->
  <!-- Packages the binary distribution as .zip                            -->
  <!-- =================================================================== -->
  <target name="dist-bin-zip" depends="dist-bin" 
          description="Generates the binary distribution as a .zip file">
    <zip zipfile="${dist.target}/${dist.name}-bin.zip"
         basedir="${dist.root}/bin"/>
  </target>

  <!-- =================================================================== -->
  <!-- Packages the binary distribution with .tar.gzip                     -->
  <!-- =================================================================== -->
  <target name="dist-bin-tgz" depends="dist-bin" 
          description="Generates the binary distribution as a .tar.gz file">
    <tar tarfile="${dist.target}/${dist.name}-bin.tar"
         basedir="${dist.root}/bin"
         longfile="gnu"/>
    <gzip zipfile="${dist.target}/${dist.name}-bin.tar.gz"
          src="${dist.target}/${dist.name}-bin.tar"/>
  </target>

  <!-- =================================================================== -->
  <!-- Build all distributions                                             -->
  <!-- =================================================================== -->
  <target name="dist-info" depends="init">
    <echo>**********************************************</echo>
    <echo>*</echo>
    <echo>*  Build all distributions:</echo> 
    <echo>*  - source distribution for windows/unix.</echo>
    <echo>*  - binary distribution for windows/unix.</echo>
    <echo>*</echo>        
    <echo>*  This may take a while...</echo>        
    <echo>*</echo>        
    <echo>***********************************************</echo>
    <echo/>
  </target>

  <!-- =================================================================== -->
  <!-- Build all distributions                                             -->
  <!-- =================================================================== -->
  <target name="dist"
          depends="dist-info, dist-bin-tgz, dist-bin-zip, dist-src-tgz, dist-src-zip"
          description="* Generates all distributions (source/binary)">
  </target>

  <!-- =================================================================== -->
  <!-- Clean targets                                                       -->
  <!-- =================================================================== -->
  <target name="clean" depends="init" description="* Cleans the build directories">
    <delete dir="${build.dir}"/>
  </target>

  <target name="distclean" depends="clean" description="* Cleans everything to the original state">
    <delete dir="${build.root}"/>
    <delete file="${dist.target}/${Name}-${version}.tar.gz"/>
    <delete file="${dist.target}/${Name}-${version}.tar"/>
    <delete file="${dist.target}/${Name}-${version}.zip"/>
    <delete file="${dist.target}/${Name}-${version}-src.tar.gz"/>
    <delete file="${dist.target}/${Name}-${version}-src.tar"/>
    <delete file="${dist.target}/${Name}-${version}-src.zip"/>
    <delete file="${dist.target}/${Name}-${version}-bin.tar.gz"/>
    <delete file="${dist.target}/${Name}-${version}-bin.tar"/>
    <delete file="${dist.target}/${Name}-${version}-bin.zip"/>
    <delete dir="${dist.root}"/>
  </target>

  <!-- =================================================================== -->
  <!-- Test targets                                                       -->
  <!-- =================================================================== -->
  <target name="test" depends="compile" description="Perform jUnit tests">
    <mkdir dir="${build.test}"/>
    <!-- Copy test files to build test dir -->
    <copy todir="${build.test}" filtering="on">
      <fileset dir="${test.dir}"/>
    </copy>
    <!-- Compile tests -->
    <javac srcdir="${build.test}"
            destdir="${build.test}"
            debug="${debug}"
            optimize="${optimize}"
            deprecation="${deprecation}"
            target="${target.vm}">
      <classpath refid="classpath"/>
      <classpath>
        <pathelement path="${build.dest}" />
      </classpath>
    </javac>
    <junit printsummary="yes" haltonfailure="no" fork="yes">
      <classpath>
        <pathelement location="${build.test}" />
        <pathelement location="${build.dest}" />
        <pathelement path="${java.class.path}" />
      </classpath>
      <classpath refid="classpath"/>
      <formatter type="plain" usefile="no" />
      <batchtest>
        <fileset dir="${build.test}">
          <include name="**/test/*TestCase.class"/>
          <include name="**/*Test.class" />
          <exclude name="**/AllTest.class" />
          <exclude name="**/*$$*Test.class" />
        </fileset>
      </batchtest>
    </junit>
  </target>

  <!-- =================================================================== -->
  <!-- Fix line endings in src                                             -->
  <!-- =================================================================== -->
  <target name="fixsrclf" depends="init" description="Fix lf in src directory (internal use only!)">
          <fixcrlf srcdir="${java.dir}" includes="**/*.java"       eol="lf"/>
  </target>
  
</project>

<!-- End of file -->
