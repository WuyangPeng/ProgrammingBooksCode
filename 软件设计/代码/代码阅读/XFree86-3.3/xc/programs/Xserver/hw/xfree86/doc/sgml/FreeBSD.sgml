<!DOCTYPE linuxdoc PUBLIC "-//XFree86//DTD linuxdoc//EN">

<article>
<title> README for XFree86 on FreeBSD
<author>Rich Murphey, David Dawes
<date>16 May 1997

<toc>
 
<sect>What and Where is XFree86?

<p>
XFree86 is a port of X11R6.3 that supports several versions of
Intel-based Unix.  It is derived from X386 1.2, which was the X server
distributed with X11R5.  This release consists of many new features
and performance improvements as well as many bug fixes.

For further details about this beta release, please refer to the
<htmlurl name="Release Notes" url="RELNOTES.html">.

<!--
The release
is available as source patches against the X Consortium X11R6.1 code, as
well as binary distributions for many architectures.
-->

See the <htmlurl url="COPYRIGHT.html" name="Copyright Notice">.

<!--
The sources for XFree86 are available by anonymous ftp from:

<htmlurl name="ftp://ftp.XFree86.org/pub/XFree86/current"
url="ftp://ftp.XFree86.org/pub/XFree86/current">
-->

Binaries for XFree86 on FreeBSD 2.1.x, 2.2.x and 3.0-current are available from:

<htmlurl name="ftp://ftp.XFree86.org/pub/XFree86/beta/"
url="ftp://ftp.XFree86.org/pub/XFree86/beta/">
<p>
<!--
<htmlurl name="ftp://XFree86.cdrom.com/pub/XFree86/beta"
url="ftp://XFree86.cdrom.com/pub/XFree86/beta">
-->

Send email to <em/Rich-Murphey@Rice.edu/ or <em/XFree86@XFree86.org/
if you have comments or suggestions about this file and we'll revise
it.


<sect>Installing the Binaries
<p>
If you want to save space, first select which archives you want to
unpack.  If you can't decide what to pick and you have 52Mb of disk
space, it's safe to unpack everything.

At a minimum you need to unpack the 'required' <tt/X33*.tgz/
archives plus at least one server that matches your vga card.  You'll
need 13Mb for the minimum required run-time binaries only.

<descrip>
<tag/Required:/

<descrip>
<tag/X33bin.tgz/
     all the executable X client applications and shared libs

<tag/X33fnts.tgz/
     the misc, 75 dpi and PEX fonts

<tag/X33lib.tgz/
     data files needed at runtime
</descrip>

<tag/Required unless you have already customized your configuration files:

<descrip>
<tag/X33cfg.tgz/
     customizable xinit and xdm runtime configuration files
</descrip>

<tag/Choose at least one server:/

<descrip>
<tag/X338514.tgz/
     8-bit color for IBM 8514 and true compatibles.

<tag/X33AGX.tgz/
     8 and 16-bit color for AGX and XGA boards.

<tag/X33I128.tgz/
     8 and 16-bit color for I128 boards.

<tag/X33Ma32.tgz/
     8 and 16-bit color for ATI Mach32 boards.

<tag/X33Ma64.tgz/
     8, 16 and 32-bit color for ATI Mach64 boards.

<tag/X33Ma8.tgz/
     8-bit color for ATI Mach8 boards.

<tag/X33Mono.tgz/
     1-bit monochrome for VGA, Super-VGA, Hercules, and others.

<tag/X33P9K.tgz/
     8, 16, and 32-bit color for Weitek P9000 boards (Diamond Viper).

<tag/X33S3.tgz/
     8, 16 and 32-bit color for S3 boards.

<tag/X33S3V.tgz/
     8 and 16-bit color for S3 ViRGE boards.

<tag/X33SVGA.tgz/
     &gt;=8-bit color for Super-VGA cards.

<tag/X33VG16.tgz/
     4-bit color for VGA and Super-VGA cards

<tag/X33W32.tgz/
     8-bit Color for ET4000/W32, /W32i, /W32p and ET6000 cards.

<tag/X339GAN.tgz/
     8-bit color for PC98 GA-98NB/WAP boards

<tag/X339480.tgz/
     8-bit color for PC98 PEGC

<tag/X339NKV.tgz/
     8-bit color for PC98 NEC-CIRRUS/EPSON NKV/NKV2 boards

<tag/X339WBS.tgz/
     8-bit color for PC98 WAB-S boards

<tag/X339WEP.tgz/
     8-bit color for PC98 WAB-EP boards

<tag/X339WSN.tgz/
     8-bit color for PC98 WSN-A2F boards

<tag/X339EGC.tgz/
     4-bit color for PC98 EGC

<tag/X339TGU.tgz/
     8 and 16-bit color for PC98 Trident Cyber9320/9680 boards

<tag/X339NS3.tgz/
     8 and 16-bit color for PC98 NEC S3 boards

<tag/X339SPW.tgz/
     8 and 16-bit color for PC98 S3 PW/PCSKB boards

<tag/X339LPW.tgz/
     8 and 16-bit color for PC98 S3 PW/LB boards

<tag/X339GA9.tgz/
     8 and 16-bit color for PC98 S3 GA-968 boards

<tag/X33nest.tgz/
     A nested server running as a client window on another display.
</descrip>

<tag/Optional:/

<descrip>

<tag/X32doc.tgz/
     READMEs

<tag/X32ps.tgz/
     READMEs in PostScript

<tag/X32html.tgz/
     READMEs in HTML

<tag/X32man.tgz/
     man pages

<tag/X32f100.tgz/
     100dpi fonts

<tag/X32fscl.tgz/
     Speedo and Type1 fonts

<tag/X32fnon.tgz/
     Japanese, Chinese and other non-english fonts

<tag/X32fcyr.tgz/
     Cyrillic fonts

<tag/X32fsrv.tgz/
     the font server and its man page

<tag/X32prog.tgz/
     config, lib*.a and *.h files needed only for compiling

<!--
<tag/X32lkit.tgz/
     (10.8Mb) X server reconfiguration kit

<tag/X32lk98.tgz/
     (14.2Mb) X server reconfiguration kit for PC98 X servers

-->
</descrip>
</descrip>

<sect1>Full Install:
<p>
<enum>
<item> You must be logged in as root to unpack the archives because
     several executables are set-user-id.  Otherwise the server may
     abort if you unpack it as an ordinary user.  You must also use a
     ``<tt/umask/'' value of <tt/022/ because the X server requires
     special permissions.
<tscreen><verb>
 % su
 # umask 022
</verb></tscreen>

<item>If you have 52Mb free in the <tt>/usr</tt> partition ``<tt>cd
     /usr</tt>'' and skip to no. 4.
     Otherwise, create a directory on another partition and sym link it into
     <tt>/usr</tt>:

<tscreen><verb>
 # cd /usr/local
 # mkdir X11R6
 # ln -s /usr/local/X11R6 /usr/X11R6
</verb></tscreen>

<item>Run the preinst.sh script
<tscreen><verb>
 # cd /usr/X11R6
 # sh preinst.sh
</verb></tscreen>

<item>Unpack everything:

     If you are using sh (as root usually does):

<tscreen><verb>
 # for i in X33*.tgz; do
 #   tar -x -z --unlink -f $i
 # done
</verb></tscreen>

     Else, if you are using csh:
<tscreen><verb>
 % foreach i (X33*.tgz)
 %   tar -x -z --unlink -f $i
 % end
</verb></tscreen>

<item>Create a symbolic link ``<tt/X/'' that points to the server
     that matches your video card.  The <em/XF86_*/ man pages list which
     vga chip sets are supported by each server.  For example, if you
     have an ET4000 based card you will use the XF86_SVGA server:

<tscreen><verb>
 # cd /usr/X11R6/bin; rm X; ln -s XF86_SVGA X
</verb></tscreen>
</enum>

<sect1>Minimal Install:
<p>
First do numbers 1, 2 and 4 above. Then unpack the required archives:

<tscreen><verb>
 # for i in bin fnts lib xicf; do
 #   tar -x -z --unlink -f  X33$i.tgz
 # done
</verb></tscreen>

Then unpack a server archive corresponding to your vga card.  The
server man pages, <tt>X11R6/man/man1/XF86_*</tt>, list the vga chip
sets supported by each server.  For example, if you have an ET4000
based card you will use the XF86_SVGA server:

<tscreen><verb>
 # tar -x -z --unlink -f X33SVGA.tgz
 # cd /usr/X11R6/bin; rm X; ln -s XF86_SVGA X
</verb></tscreen>

<sect1>After either Full or Minimal Install above:
<p>
Add /usr/X11R6/bin to the default path for sh in <tt>/etc/profile</tt>
and for csh in <tt>/etc/csh.login</tt> if they are not already there:

<tscreen><verb>
 # echo 'set path = ($path /usr/X11R6/bin)' >>/etc/csh.login
 # echo 'PATH=$PATH:/usr/X11R6/bin' >>/etc/profile
</verb></tscreen>

Or make sure all who use X put <tt>/usr/X11R6/bin</tt> in their
shell's ``path'' variable.

Next either reboot or invoke <tt/ldconfig/ as root to put the shared
libraries in <tt/ld.so/'s cache:

<tscreen><verb>
 # ldconfig /usr/lib /usr/local/lib /usr/X11R6/lib
</verb></tscreen>

If you had already configured <tt>X11R6/lib/X11/xinit/xinitrc</tt> or
<tt>X11R6/lib/X11/xdm/*</tt> omit the <tt/xinit-config/ or
<tt/xdm-config/ archive or unpack it separately and merge in your
customizations.

The <tt/fscl/ and <tt/f100/ archives are optional and
can be omitted if you are short on space.  The optional <tt/link/
archive allows you to reconfigure and customize a X server binary.
The optional <tt/prog/ archive is needed only for writing or compiling X
applications.  The optional <tt/pex/ archive contains pex clients and
libraries for building 3D graphics applications.

<quote>
<bf/NOTE:/ You don't need to uncompress the font files, but if you
uncompress them anyway you must run <tt/mkfontdir/ in the corresponding
font directory; otherwise your server will abort with the message
``<tt/could not open default font 'fixed'/''.
</quote>


<sect>Installing The Display Manager (xdm)
<p>
The display manager makes your PC look like an X terminal.  That is, it
presents you with a login screen that runs under X.

The easiest way to automatically start the display manager on boot is to
add a line in <tt>/etc/ttys</tt> to start it on one of the unoccupied
virtual terminals:

<tscreen><verb>
 ttyv4	"/usr/X11R6/bin/xdm -nodaemon" xterm	on secure
</verb></tscreen>

You should also make sure that <tt>/usr/X11R6/bin/X</tt> is a symbolic
link to the Xserver that matches your video card or edit the file
Xservers in <tt>/usr/X11R6/lib/X11/xdm</tt> to specify the pathname of
the X server.

The change to <tt>/etc/ttys</tt> won't take effect until you either
reboot or ``<tt/kill -HUP 1/'' to force initd to reread
<tt>/etc/ttys</tt>.  You can also test the display manager manually by
loging in as root on the console and typing ``<tt/xdm -nodaemon/''.

 
<sect>Configuring X for Your Hardware
<p>
The <tt/XF86Config/ file tells the X server what kind of monitor, video card
and mouse you have.  You <em/must/ create it to tell the server what
specific hardware you have.

It is strongly recommended that you use either the `XF86Setup' utility
(which requires the VGA16 server to be installed), or the `xf86config'
utility to generate an XF86Config file.

In order to protect your hardware from damage, the server no longer
will read <tt/XF86Config/ files from a user's home directory, but
requires that it be in <tt>/etc/XF86Config</tt>,
<tt>/usr/X11R6/lib/X11/XF86Config.</tt><em>hostname</em> or
<tt>/usr/X11R6/lib/X11/XF86Config</tt>.

You'll need info on your hardware:

<itemize>
<item>Your mouse type, baud rate and its <tt>/dev</tt> entry.
<item>The video card's chipset (e.g. ET4000, S3, etc).
<item>Your monitor's sync frequencies.
</itemize>

The easiest way to find which device your mouse is plugged into is to
use ``<tt/cat/'' or ``<tt/kermit/'' to look at the output of the
mouse.  Connect to it and just make sure that it generates output when
the mouse is moved or clicked:

<tscreen><verb>
 % cat < /dev/tty00
</verb></tscreen>

If you can't find the right mouse device then use ``<tt/dmesg|grep
sio/'' to get a list of devices that were detected upon booting:

<tscreen><verb>
 % dmesg|grep sio
 sio0 at 0x3f8-0x3ff irq 4 on isa
</verb></tscreen>

Then double check the <tt>/dev</tt> entries corresponding to these
devices.  Use the script <tt>/dev/MAKEDEV</tt> to create entries if
they don't already exist:

<tscreen><verb>
 % cd /dev
 % sh MAKEDEV tty00
</verb></tscreen>

If you plan to fine tune the screen size or position on your monitor you'll
need the specs for sync frequencies from your monitor's manual.

 

<sect>Running X
<p>
8mb of memory is a recommended minimum for running X.  The server,
window manager, display manager and an xterm take about 8Mb of virtual
memory themselves.  Even if their resident set size is smaller, on a
8Mb system that leaves very space for other applications such as gcc
that expect a few meg free.  The R6 X servers may work with 4Mb of
memory, but in practice compilation while running X can take 5 or 10
times as long due to constant paging.

The easiest way for new users to start X windows is to type
``<tt>startx >&amp; startx.log</tt>''.  Error messages are lost unless
you redirect them because the server takes over the screen.

To get out of X windows, type: ``<tt/exit/'' in the console xterm.
You can customize your X by creating <tt/.xinitrc/, <tt/.xserverrc/,
and <tt/.twmrc/ files in your home directory as described in the <em/xinit/
and <em/startx/ man pages.

 

<sect>Rebuilding Kernels for X
<p>

The GENERIC FreeBSD kernels support XFree86
without any modifications required.  You do not need to make any changes
to the GENERIC kernel or any kernel configuration which is a superset.

For a general description of BSD kernel configuration get <url
name="smm.02.config.ps.Z"
url="ftp://gatekeeper.dec.com/pub/BSD/manuals/smm.02.config.ps.Z">.
It is a ready-to-print postscript copy of the kernel configuration
chapter from the system maintainers manual.

If you do decide to reduce your kernel configuration file, do not
remove the two lines below (in <tt>/sys/arch/i386/conf</tt>).  They
are both required for X support:

<tscreen><verb>
 options		XSERVER			#Xserver
 options		UCONSOLE		#X Console support
</verb></tscreen>

The generic FreeBSD kernels are configured
by default with the syscons driver.  To configure your kernel similarly
it should have a line like this in <tt>/usr/src/sys/i386/conf/GENERIC</tt>:

<tscreen><verb>
 device		sc0	at isa? port "IO_KBD" tty irq 1 vector scintr
</verb></tscreen>

The number of virtual consoles can be set using the NCONS option:

<tscreen><verb>
 options		"NCONS=4"		#4 virtual consoles
</verb></tscreen>

Otherwise, the default without a line like this is 12.  You must have more
VTs than gettys as described in the end of section 3, and 4 is a reasonable
minimum.

The server supports several console drivers: pccons, syscons and pcvt.
The syscons driver is the default in FreeBSD 1.1.5 and higher.  They are
detected at runtime and no configuration of the server itself is required.

The XFree86 servers include support for the MIT-SHM extension.  The
GENERIC kernel does not support this, so if you want to make use of
this, you will need a kernel configured with SYSV shared memory
support.  To do this, add the following line to your kernel config
file:

<tscreen><verb>
 options		SYSVSHM			# System V shared memory
 options		SYSVSEM			# System V semaphores
 options		SYSVMSG			# System V message queues
</verb></tscreen>

If you are using a SoundBlaster 16 on IRQ 2 (9), then you need a patch for
sb16_dsp.c.  Otherwise a kernel configured with the SoundBlaster driver will
claim interrupt 9 doesn't exist and X server will lock up.

S3 cards and serial port COM 4 cannot be installed together on a
system because the I/O port addresses overlap.


<!--
<sect>Rebuilding XFree86
<p>

The server link kit allows you to build an X server using a minimum
amount of disk space.  Just unpack it, make the appropriate changes to
<tt/xf86site.def/, type ``<tt>./mkmf</tt>' and ``<tt/make/'' to link the
server.  See <htmlurl name=README.LinkKit url=LinkKit.html> for more info.

The source tree takes about 114Mb before compiling and an additional
100Mb after ``<tt/make World/''.  You should configure the
distribution by editing <tt/xf86site.def/ and <tt/site.def/ in
<tt>xc/config/cf</tt> before compiling.  By default, the config files
are set up to build shared libraries.

To compile the sources on FreeBSD 1.1 and later, edit
<tt>xc/config/cf/FreeBSD.cf</tt> to set the OS version parameters
correctly, and then type:

<tscreen><verb>
 make World
</verb></tscreen>
-->

<sect>Building X Clients
<p>

The easiest way to build a new client (X application) is to use
<tt/xmkmf/ if an <tt/Imakefile/ is included with it.  Type ``<tt/xmkmf -a/''
to create the Makefiles, then type ``<tt/make/''.  Whenever you install
additional man pages you should update <tt/whatis.db/ by running
``<tt>makewhatis /usr/X11R6/man</tt>''.

<bf/Note:/ Starting with XFree86 2.1 and FreeBSD 1.1, the symbol
<bf/__386BSD__/ no longer gets defined either by the compiler or via the
X config files for FreeBSD systems.  When porting clients to BSD
systems, make use of the symbol <bf/BSD/ for code which is truly
BSD-specific.  The value of the symbol can be used to distinguish
different BSD releases.  For example, code specific to the Net-2 and
later releases can use:

<tscreen>
#if (BSD >= 199103)
</tscreen>

To ensure that this symbol is correctly defined, include
<tt>&lt;sys/param.h&gt;</tt> in the source that requires it.  Note that
the symbol <bf/CSRG_BASED/ is defined for *BSD systems in XFree86 3.1.1
and later.  This should be used to protect the inclusion of
<tt>&lt;sys/param.h&gt;</tt>.

For code that really is specific to a particular i386 BSD port, use
<bf/__FreeBSD__/ for FreeBSD, <bf/__NetBSD__/ for NetBSD,
<bf/__OpenBSD__/ for OpenBSD,
<bf/__386BSD__/ for 386BSD, and <bf/__bsdi__/ for BSD/386.


<sect> Thanks
<p>
Many thanks to:
  <itemize>
<item><bf/Pace Willison/  for providing initial *BSD support.
<item><bf/Amancio Hasty/ for 386BSD kernel and S3 chipset support.
<item><bf/David Greenman, Nate Williams, Jordan Hubbard/ for FreeBSD
       kernel support.  
<item><bf/Rod Grimes/, <bf/Jordan Hubbard/ and <bf/Jack Velte/ for
       the use of Walnut Creek Cdrom's hardware. 
<item><bf/Orest Zborowski/, <bf/Simon Cooper/ and <bf/Dirk Hohndel/ for ideas from the Linux distribution.
</itemize>

<verb>
$XFree86: xc/programs/Xserver/hw/xfree86/doc/sgml/FreeBSD.sgml,v 3.25.2.1 1997/05/17 12:03:29 dawes Exp $ 





$XConsortium: FreeBSD.sgml /main/12 1996/10/28 05:43:08 kaleb $
</verb>

</article>
