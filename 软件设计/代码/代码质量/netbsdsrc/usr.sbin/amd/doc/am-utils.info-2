This is Info file am-utils.info, produced by Makeinfo version 1.68 from
the input file am-utils.texi.

START-INFO-DIR-ENTRY
* Am-utils: (am-utils).          The Amd automounter suite of utilities
END-INFO-DIR-ENTRY


File: am-utils.info,  Node: delay Option,  Next: fs Option,  Prev: Map Options,  Up: Map Options

delay Option
............

   The delay, in seconds, before an attempt will be made to mount from
the current location.  Auxiliary data, such as network address, file
handles and so on are computed regardless of this value.

   A delay can be used to implement the notion of primary and secondary
file servers.  The secondary servers would have a delay of a few
seconds, thus giving the primary servers a chance to respond first.


File: am-utils.info,  Node: fs Option,  Next: opts Option,  Prev: delay Option,  Up: Map Options

fs Option
.........

   The local mount point.  The semantics of this option vary between
filesystems.

   For NFS and UFS filesystems the value of `${fs}' is used as the
local mount point.  For other filesystem types it has other meanings
which are described in the section describing the respective filesystem
type.  It is important that this string uniquely identifies the
filesystem being mounted.  To satisfy this requirement, it should
contain the name of the host on which the filesystem is resident and the
pathname of the filesystem on the local or remote host.

   The reason for requiring the hostname is clear if replicated
filesystems are considered.  If a fileserver goes down and a
replacement filesystem is mounted then the "local" mount point "must"
be different from that of the filesystem which is hung.  Some encoding
of the filesystem name is required if more than one filesystem is to be
mounted from any given host.

   If the hostname is first in the path then all mounts from a
particular host will be gathered below a single directory.  If that
server goes down then the hung mount points are less likely to be
accidentally referenced, for example when getwd(3) traverses the
namespace to find the pathname of the current directory.

   The `fs' option defaults to `${autodir}/${rhost}${rfs}'.  In
addition, `rhost' defaults to the local host name (`${host}') and `rfs'
defaults to the value of `${path}', which is the full path of the
requested file; `/home/foo' in the example above (*note Selectors::.).
`${autodir}' defaults to `/a' but may be changed with the "-a" command
line option.  Sun's automounter defaults to `/tmp_mnt'.  Note that
there is no `/' between the `${rhost}' and `${rfs}' since `${rfs}'
begins with a `/'.


File: am-utils.info,  Node: opts Option,  Next: remopts Option,  Prev: fs Option,  Up: Map Options

opts Option
...........

   The options to pass to the mount system call.  A leading `-' is
silently ignored.  The mount options supported generally correspond to
those used by mount(8) and are listed below.  Some additional
pseudo-options are interpreted by Amd and are also listed.

   Unless specifically overridden, each of the system default mount
options applies.  Any options not recognized are ignored.  If no
options list is supplied the string `rw,defaults' is used and all the
system default mount options apply.  Options which are not applicable
for a particular operating system are silently ignored.  For example,
only 4.4 BSD is known to implement the `compress' and `spongy' options.

`acdirmax'
     Set the maximum directory attribute cache timeout to zero.

`acdirmin'
     Set the minimum directory attribute cache timeout to zero.

`acregmax'
     Set the maximum file attribute cache timeout to zero.

`acregmin'
     Set the minimum file attribute cache timeout to zero.

`actimeo'
     Set the overall attribute cache timeout to zero.

`auto'
`ignore'
     Ignore this mount by df(1).

`cache'
     Allow data to be cached from a remote server for this mount.

`compress'
     Use NFS compression protocol.

`dev'
     Allow local special devices on this filesystem.

`dumbtimr'
     (XXX: a dumb timer?)

`fsid'
     Set ID of filesystem.

`grpid'
     Use BSD directory group-id semantics.

`int'
`intr'
     Allow keyboard interrupts on hard mounts.

`multi'
     Perform multi-component lookup on files.

`nfsv3'
     Use NFS Version 3 for this mount.

`noac'
     Turn off the attribute cache.

`noauto'
     (XXX: No automatic what?)

`nocache'
     Do not allow data to be cached from a remote server for this mount.

`noconn'
     Don't make a connection on datagram transports.

`nocto'
     No close-to-open consistency.

`nodev'
`nodevs'
     Don't allow local special devices on this filesystem.

`noint'
     Do not allow keyboard interrupts for this mount

`nosub'
     Disallow mounts beneath this mount.

`nosuid'
     Don't allow set-uid or set-gid executables on this filesystem.

`overlay'
     Overlay this mount on top of an existing mount, if any.

`pgthresh'
     (XXX: Threshold of "pg"?)

`port=N'
     Set the NFS port to N.

`posix'
     Turn on POSIX static pathconf for mounts.

`proto=N'
     Use NFS protocol number N (can be 2 or 3).

`quota'
     Enable quota checking on this mount.

`rdonly'
`ro'
     Mount this filesystem readonly.

`retrans=n'
     The number of NFS retransmits made before a user error is
     generated by a `soft' mounted filesystem, and before a `hard'
     mounted filesystem reports `NFS server "yoyo" not responding still
     trying'.

`retry'
     Set the NFS retry counter.

`rsize=N'
     The NFS read packet size.  You may need to set this if you are
     using NFS/UDP through a gateway or a slow link.

`rw'
     Allow reads and writes on this filesystem.

`soft'
     Give up after "retrans" retransmissions.

`spongy'
     Like `soft' for status requests, and `hard' for data transfers.

`suid'
     Allow set-uid programs on this mount.

`symttl'
     Turn of the symbolic link cache time-to-live.

`sync'
     Perform synchronous filesystem operations on this mount.

`tcp'
     Use TCP/IP instead of UDP/IP, ignored if the NFS implementation
     does not support TCP/IP mounts.

`timeo=N'
     The NFS timeout, in tenth-seconds, before a request is
     retransmitted.

`vers=S'
     Use transport S for NFS (can be `"tcp"' or `"udp"').

`wsize=N'
     The NFS write packet size.  You may need to set this if you are
     using NFS/UDP through a gateway or a slow link.

   The following options are implemented by Amd, rather than being
passed to the kernel.

`nounmount'
     Configures the mount so that its time-to-live will never expire.
     This is also the default for some filesystem types.

`ping=N'
     The interval, in seconds, between keep-alive pings.  When four
     consecutive pings have failed the mount point is marked as hung.
     This interval defaults to 30 seconds.  If the ping interval is
     less than zero, no pings are sent and the host is assumed to be
     always up.  By default, pings are not sent for an NFS/TCP mount.

`retry=N'
     The number of times to retry the mount system call.

`utimeout=N'
     The interval, in seconds, by which the mount's time-to-live is
     extended after an unmount attempt has failed.  In fact the
     interval is extended before the unmount is attempted to avoid
     thrashing.  The default value is 120 seconds (two minutes) or as
     set by the "-w" command line option.


File: am-utils.info,  Node: remopts Option,  Next: sublink Option,  Prev: opts Option,  Up: Map Options

remopts Option
..............

   This option has the same use as `${opts}' but applies only when the
remote host is on a non-local network.  For example, when using NFS
across a gateway it is often necessary to use smaller values for the
data read and write sizes.  This can simply be done by specifying the
small values in REMOPTS.  When a non-local host is accessed, the
smaller sizes will automatically be used.

   Amd determines whether a host is local by examining the network
interface configuration at startup.  Any interface changes made after
Amd has been started will not be noticed.  The likely effect will be
that a host may incorrectly be declared non-local.

   Unless otherwise set, the value of `${remopts}' is the same as the
value of `${opts}'.


File: am-utils.info,  Node: sublink Option,  Next: type Option,  Prev: remopts Option,  Up: Map Options

sublink Option
..............

   The subdirectory within the mounted filesystem to which the reference
should point.  This can be used to prevent duplicate mounts in cases
where multiple directories in the same mounted filesystem are used.


File: am-utils.info,  Node: type Option,  Prev: sublink Option,  Up: Map Options

type Option
...........

   The filesystem type to be used.  *Note Filesystem Types::, for a full
description of each type.


File: am-utils.info,  Node: Amd Command Line Options,  Next: Filesystem Types,  Prev: Mount Maps,  Up: Top

Amd Command Line Options
************************

   Many of Amd's parameters can be set from the command line.  The
command line is also used to specify automount points and maps.

   The general format of a command line is

     amd [options] [{ directory map-name [-map-options] } ...]

   For each directory and map-name given or specified in the `amd.conf'
file, Amd establishes an automount point.  The "map-options" may be any
sequence of options or selectors--*note Location Format::..  The
"map-options" apply only to Amd's mount point.

   `type:=toplvl;cache:=mapdefault;fs:=${map}' is the default value for
the map options.  Default options for a map are read from a special
entry in the map whose key is the string `/defaults'.  When default
options are given they are prepended to any options specified in the
mount-map locations as explained in.  *Note Map Defaults::, for more
details.

   The "options" are any combination of those listed below.

   Once the command line has been parsed, the automount points are
mounted.  The mount points are created if they do not already exist, in
which case they will be removed when Amd exits.  Finally, Amd
disassociates itself from its controlling terminal and forks into the
background.

   Note: Even if Amd has been built with `-DDEBUG' (via `configure
--enable-debug'), it will still background itself and disassociate
itself from the controlling terminal.  To use a debugger it is
necessary to specify `-D nodaemon' on the command line.  However, even
with all of this, mounts and unmounts are performed in the background,
and Amd will always fork before doing them.  Therefore, debugging what
happens closely during un/mounts is more challenging.

   *All* of Amd's command options (save `-F' and `-T') can be specified
in the `amd.conf' file. *Note Amd Configuration File::.

* Menu:

* -a Option::   Automount directory.
* -c Option::   Cache timeout interval.
* -d Option::   Domain name.
* -k Option::   Kernel architecture.
* -l Option::   Log file.
* -n Option::   Hostname normalization.
* -o Option::   Operating system name.
* -p Option::   Output process id.
* -r Option::   Restart existing mounts.
* -t Option::   Kernel RPC timeout.
* -v Option::   Version information.
* -w Option::   Wait interval after failed unmount.
* -x Option::   Log options.
* -y Option::   NIS domain.
* -C-Option::   Cluster name.
* -D-Option::   Debug flags.
* -F Option::   Amd configuration file.
* -H Option::   Show brief help.
* -S Option::   Lock executable pages in memory.
* -T-Option::   Set tag for configuration file.


File: am-utils.info,  Node: -a Option,  Next: -c Option,  Prev: Amd Command Line Options,  Up: Amd Command Line Options

`-a' DIRECTORY
==============

   Specifies the default mount directory.  This option changes the
variable `${autodir}' which otherwise defaults to `/a'.  For example,
some sites prefer `/amd' or `/n'.

     amd -a /amd ...


File: am-utils.info,  Node: -c Option,  Next: -d Option,  Prev: -a Option,  Up: Amd Command Line Options

`-c' CACHE-INTERVAL
===================

   Selects the period, in seconds, for which a name is cached by Amd.
If no reference is made to the volume in this period, Amd discards the
volume name to filesystem mapping.

   Once the last reference to a filesystem has been removed, Amd
attempts to unmount the filesystem.  If the unmount fails the interval
is extended by a further period as specified by the `-w' command line
option or by the `utimeout' mount option.

   The default "cache-interval" is 300 seconds (five minutes).


File: am-utils.info,  Node: -d Option,  Next: -k Option,  Prev: -c Option,  Up: Amd Command Line Options

`-d' DOMAIN
===========

   Specifies the host's domain.  This sets the internal variable
`${domain}' and affects the `${hostd}' variable.

   If this option is not specified and the hostname already contains the
local domain then that is used, otherwise the default value of
`${domain}' is `unknown.domain'.

   For example, if the local domain was `doc.ic.ac.uk', Amd could be
started as follows:

     amd -d doc.ic.ac.uk ...


File: am-utils.info,  Node: -k Option,  Next: -l Option,  Prev: -d Option,  Up: Amd Command Line Options

`-k' KERNEL-ARCHITECTURE
========================

   Specifies the kernel architecture of the system.  This is usually the
output of `uname -m' (the "machine" value gotten from uname(2)).  If
the uname(2) system call is not available, the value of `${karch}'
defaults to that of `${arch}'.

   The only effect of this option is to set the variable `${karch}'.

   This option would be used as follows:

     amd -k `arch -k` ...


File: am-utils.info,  Node: -l Option,  Next: -n Option,  Prev: -k Option,  Up: Amd Command Line Options

`-l' LOG-OPTION
===============

   Selects the form of logging to be made.  Two special "log-options"
are recognized.

  1. If "log-option" is the string `syslog', Amd will use the syslog(3)
     mechanism.

  2. If "log-option" is the string `/dev/stderr', Amd will use standard
     error, which is also the default target for log messages.  To
     implement this, Amd simulates the effect of the `/dev/fd' driver.

   Any other string is taken as a filename to use for logging.  Log
messages are appended to the file if it already exists, otherwise a new
file is created.  The file is opened once and then held open, rather
than being re-opened for each message.

   Normally, when long-running daemons hold an open file descriptor on a
log file, it is impossible to "rotate" the log file and compress older
logs on a daily basis.  The daemon needs to be told to discard (via
close(2)) its file handle, and re-open the log file.  This is done
using `amq -l' log-option. *Note Amq -l option::.

   If the `syslog' option is specified but the system does not support
syslog or if the named file cannot be opened or created, Amd will use
standard error.  Error messages generated before Amd has finished
parsing the command line are printed on standard error.

   Using `syslog' is usually best, in which case Amd would be started
as follows:

     amd -l syslog ...


File: am-utils.info,  Node: -n Option,  Next: -o Option,  Prev: -l Option,  Up: Amd Command Line Options

`-n'
====

   Normalizes the remote hostname before using it.  Normalization is
done by replacing the value of `${rhost}' with the (generally fully
qualified) primary name returned by a hostname lookup.

   This option should be used if several names are used to refer to a
single host in a mount map.


File: am-utils.info,  Node: -o Option,  Next: -p Option,  Prev: -n Option,  Up: Amd Command Line Options

`-o' OP-SYS-NAME
================

   Override the compiled-in name of the operating system, with
OP-SYS-NAME.  Useful when the built in name is not desired for back
ward compatibility reasons.  For example, if the build in name is
`sunos5', you can override it to the old name `sos5', and use older
maps which were written with the latter in mind.


File: am-utils.info,  Node: -p Option,  Next: -r Option,  Prev: -o Option,  Up: Amd Command Line Options

`-p'
====

   Causes Amd's process id to be printed on standard output.  This can
be redirected to a suitable file for use with kill:

     amd -p > /var/run/amd.pid ...

   This option only has an affect if Amd is running in daemon mode.  If
Amd is started with the `-D nodaemon' debug flag, this option is
ignored.


File: am-utils.info,  Node: -r Option,  Next: -t Option,  Prev: -p Option,  Up: Amd Command Line Options

`-r'
====

   Tells Amd to restart existing mounts (*note Inheritance
Filesystem::.).


File: am-utils.info,  Node: -t Option,  Next: -v Option,  Prev: -r Option,  Up: Amd Command Line Options

`-t' TIMEOUT.RETRANSMIT
=======================

   Specifies the RPC "timeout" and "retransmit" intervals used by the
kernel to communicate to Amd.  These are used to set the `timeo' and
`retrans' mount options.

   Amd relies on the kernel RPC retransmit mechanism to trigger mount
retries.  The value of this parameter changes the retry interval.  Too
long an interval gives poor interactive response, too short an interval
causes excessive retries.


File: am-utils.info,  Node: -v Option,  Next: -w Option,  Prev: -t Option,  Up: Amd Command Line Options

`-v'
====

   Print version information on standard error and then exit.  The
output is of the form:

     Copyright (c) 1997 Erez Zadok
     Copyright (c) 1990 Jan-Simon Pendry
     Copyright (c) 1990 Imperial College of Science, Technology & Medicine
     Copyright (c) 1990 The Regents of the University of California.
     am-utils version 6.0a10 (build 18).
     Built by ezk@cs.columbia.edu on date Fri Aug 22 15:21:03 EDT 1997.
     cpu=sparc (big-endian), arch=sun4, karch=sun4u.
     full_os=solaris2.5.1, os=sos5, osver=5.5.1, vendor=sun.
     Map support for: root, passwd, union, nisplus, nis, ndbm, file, error.
     AMFS: nfs, link, nfsx, host, linkx, program, union, inherit, ufs, lofs,
           cdfs, pcfs, auto, direct, toplvl, autofs, error.
     FS: autofs, cachefs, cdfs, lofs, nfs, nfs3, pcfs, tfs, tmpfs, ufs.
     Primary network: primnetname="cucs-net" (primnetnum=128.59.16).
     No Subsidiary network.

   The information includes the version number, number of times Amd was
compiled on the local system, release date and name of the release.
Following come the cpu type, byte ordering, and the architecture and
kernel architecture as `${arch}' and `${karch}', respectively.  The
next line lists the full name of the system, the variables `${os}' and
`${osver}', and the vendor's name. *Note Supported Platforms::.

   Then come a list of map types supported, filesystems internally
supported by Amd (AMFS), and generic filesystems available (FS).
Finally the first two networks (if any) of this host are listed by name
and number.  The latter are available via the variables
`${primnetname}', `${primnetnum}', `${subsnetname}', and
`${subsnetnum}'. *Note Selectors::.


File: am-utils.info,  Node: -w Option,  Next: -x Option,  Prev: -v Option,  Up: Amd Command Line Options

`-w' WAIT-TIMEOUT
=================

   Selects the interval in seconds between unmount attempts after the
initial time-to-live has expired.

   This defaults to 120 seconds (two minutes).


File: am-utils.info,  Node: -x Option,  Next: -y Option,  Prev: -w Option,  Up: Amd Command Line Options

`-x' OPTS
=========

   Specifies the type and verbosity of log messages.  "opts" is a comma
separated list selected from the following options:

`fatal'
     Fatal errors

`error'
     Non-fatal errors

`user'
     Non-fatal user errors

`warn'
     Recoverable errors

`warning'
     Alias for `warn'

`info'
     Information messages

`map'
     Mount map usage

`stats'
     Additional statistics

`all'
     All of the above

   Initially a set of default logging flags is enabled.  This is as if
`-x all,nomap,nostats' had been selected.  The command line is parsed
and logging is controlled by the "-x" option.  The very first set of
logging flags is saved and can not be subsequently disabled using Amq.
This default set of options is useful for general production use.

   The `info' messages include details of what is mounted and unmounted
and when filesystems have timed out.  If you want to have the default
set of messages without the `info' messages then you simply need `-x
noinfo'.  The messages given by `user' relate to errors in the mount
maps, so these are useful when new maps are installed.  The following
table lists the syslog priorities used for each of the message types.

`fatal'
     LOG_CRIT

`error'
     LOG_ERR

`user'
     LOG_WARNING

`warning'
     LOG_WARNING

`info'
     LOG_INFO

`debug'
     LOG_DEBUG

`map'
     LOG_DEBUG

`stats'
     LOG_INFO

   The options can be prefixed by the string `no' to indicate that this
option should be turned off.  For example, to obtain all but `info'
messages the option `-x all,noinfo' would be used.

   If Amd was built with debugging enabled the `debug' option is
automatically enabled regardless of the command line options.


File: am-utils.info,  Node: -y Option,  Next: -C-Option,  Prev: -x Option,  Up: Amd Command Line Options

`-y' NIS-DOMAIN
===============

   Selects an alternate NIS domain.  This is useful for debugging and
cross-domain shared mounting.  If this flag is specified, Amd
immediately attempts to bind to a server for this domain.


File: am-utils.info,  Node: -C-Option,  Next: -D-Option,  Prev: -y Option,  Up: Amd Command Line Options

`-C' CLUSTER-NAME
=================

   Specifies the name of the cluster of which the local machine is a
member.  The only effect is to set the variable `${cluster}'.  The
"cluster-name" is will usually obtained by running another command
which uses a database to map the local hostname into a cluster name.
`${cluster}' can then be used as a selector to restrict mounting of
replicated data.  If this option is not given, `${cluster}' has the
same value as `${domain}'.  This would be used as follows:

     amd -C `clustername` ...


File: am-utils.info,  Node: -D-Option,  Next: -F Option,  Prev: -C-Option,  Up: Amd Command Line Options

`-D' OPTS
=========

   Controls the verbosity and coverage of the debugging trace; "opts"
is a comma separated list of debugging options.  The "-D" option is
only available if Amd was compiled with `-DDEBUG', or configured with
`configure --enable-debug'.  The memory debugging facilities (`mem')
are only available if Amd was compiled with `-DDEBUG_MEM' (in addition
to `-DDEBUG'), or configured with `configure --enable-debug=mem'.

   The most common options to use are `-D trace' and `-D test' (which
turns on all the useful debug options).  As usual, every option can be
prefixed with `no' to turn it off.

`all'
     all options

`amq'
     register for amq

`daemon'
     enter daemon mode

`fork'
     fork server

`full'
     program trace

`mem'
     trace memory allocations

`mtab'
     use local "./mtab" file

`str'
     debug string munging

`test'
     full debug but no daemon

`trace'
     protocol trace

   You may also refer to the program source for a more detailed
explanation of the available options.


File: am-utils.info,  Node: -F Option,  Next: -H Option,  Prev: -D-Option,  Up: Amd Command Line Options

-F CONF-FILE
============

   Specify an Amd configuration file CONF-FILE to use.  For a
description of the format and syntax, *note Amd Configuration File::..
This configuration file is used to specify any options in lieu of typing
many of them on the command line.  The `amd.conf' file includes
directives for every command line option Amd has, and many more that
are only available via the configuration file facility.


File: am-utils.info,  Node: -H Option,  Next: -S Option,  Prev: -F Option,  Up: Amd Command Line Options

-H
==

   Print a brief help and usage string.


File: am-utils.info,  Node: -S Option,  Next: -T-Option,  Prev: -H Option,  Up: Amd Command Line Options

-S
==

   Do *not* lock the running executable pages of Amd into memory.  To
improve Amd's performance, systems that support the plock(3) call lock
the Amd process into memory.  This way there is less chance the
operating system will schedule, page out, and swap the Amd process as
needed.  This tends improves Amd's performance, at the cost of
reserving the memory used by the Amd process (making it unavailable for
other processes).  If this behavior is not desired, use the "-S" option.


File: am-utils.info,  Node: -T-Option,  Prev: -S Option,  Up: Amd Command Line Options

-T TAG
======

   Specify a tag to use with `amd.conf'.  All map entries tagged with
TAG will be processed.  Map entries that are not tagged are always
processed.  Map entries that are tagged with a tag other than TAG will
not be processed.


File: am-utils.info,  Node: Filesystem Types,  Next: Amd Configuration File,  Prev: Amd Command Line Options,  Up: Top

Filesystem Types
****************

   To mount a volume, Amd must be told the type of filesystem to be
used.  Each filesystem type typically requires additional information
such as the fileserver name for NFS.

   From the point of view of Amd, a "filesystem" is anything that can
resolve an incoming name lookup.  An important feature is support for
multiple filesystem types.  Some of these filesystems are implemented
in the local kernel and some on remote fileservers, whilst the others
are implemented internally by Amd.

   The two common filesystem types are UFS and NFS.  Four other user
accessible filesystems (`link', `program', `auto' and `direct') are
also implemented internally by Amd and these are described below.
There are two additional filesystem types internal to Amd which are not
directly accessible to the user (`inherit' and `error').  Their use is
described since they may still have an effect visible to the user.

* Menu:

* Network Filesystem::          A single NFS filesystem.
* Network Host Filesystem::     NFS mount a host's entire export tree.
* Network Filesystem Group::    An atomic group of NFS filesystems.
* Unix Filesystem::             Native disk filesystem.
* Caching Filesystem::          Caching from remote server filesystem.
* CD-ROM Filesystem::           ISO9660 CD ROM.
* Loopback Filesystem::         Local loopback-mount filesystem.
* Memory/RAM Filesystem::       A memory or RAM-based filesystem.
* Null Filesystem::             BSD 4.4's loopback-mount filesystem.
* Floppy Filesystem::           MS-DOS Floppy filesystem.
* Translucent Filesystem::      The directory merging filesystem.
* Shared Memory+Swap Filesystem:: Sun's tmpfs filesystem.
* User ID Mapping Filesystem::  BSD 4.4's umapfs filesystem.
* Program Filesystem::          Generic Program mounts.
* Symbolic Link Filesystem::    Local link.
* Symbolic Link Filesystem II:: Local link referencing existing filesystem.
* Automount Filesystem::
* Direct Automount Filesystem::
* Union Filesystem::
* Error Filesystem::
* Top-level Filesystem::
* Autofs Filesystem::           Sun's kernel-based automounter filesystem.
* Root Filesystem::
* Inheritance Filesystem::


File: am-utils.info,  Node: Network Filesystem,  Next: Network Host Filesystem,  Prev: Filesystem Types,  Up: Filesystem Types

Network Filesystem (`type:=nfs')
================================

   The "nfs" filesystem type provides access to Sun's NFS.

The following options must be specified:

`rhost'
     the remote fileserver.  This must be an entry in the hosts
     database.  IP addresses are not accepted.  The default value is
     taken from the local host name (`${host}') if no other value is
     specified.

`rfs'
     the remote filesystem.  If no value is specified for this option,
     an internal default of `${path}' is used.

   NFS mounts require a two stage process.  First, the "file handle" of
the remote file system must be obtained from the server.  Then a mount
system call must be done on the local system.  Amd keeps a cache of
file handles for remote file systems.  The cache entries have a
lifetime of a few minutes.

   If a required file handle is not in the cache, Amd sends a request
to the remote server to obtain it.  Amd "does not" wait for a response;
it notes that one of the locations needs retrying, but continues with
any remaining locations.  When the file handle becomes available, and
assuming none of the other locations was successfully mounted, Amd will
retry the mount.  This mechanism allows several NFS filesystems to be
mounted in parallel.  The first one which responds with a valid file
handle will be used.

An NFS entry might be:

     jsp  host!=charm;type:=nfs;rhost:=charm;rfs:=/home/charm;sublink:=jsp

   The mount system call and any unmount attempts are always done in a
new task to avoid the possibility of blocking Amd.


File: am-utils.info,  Node: Network Host Filesystem,  Next: Network Filesystem Group,  Prev: Network Filesystem,  Up: Filesystem Types

Network Host Filesystem (`type:=host')
======================================

   The "host" filesystem allows access to the entire export tree of an
NFS server.  The implementation is layered above the `nfs'
implementation so keep-alives work in the same way.  The only option
which needs to specified is `rhost' which is the name of the fileserver
to mount.

   The `host' filesystem type works by querying the mount daemon on the
given fileserver to obtain its export list.  Amd then obtains
filehandles for each of the exported filesystems.  Any errors at this
stage cause that particular filesystem to be ignored.  Finally each
filesystem is mounted.  Again, errors are logged but ignored.  One
common reason for mounts to fail is that the mount point does not exist.
Although Amd attempts to automatically create the mount point, it may
be on a remote filesystem to which Amd does not have write permission.

   When an attempt to unmount a `host' filesystem mount fails, Amd
remounts any filesystems which had successfully been unmounted.  To do
this Amd queries the mount daemon again and obtains a fresh copy of the
export list.  Amd then tries to mount any exported filesystems which
are not currently mounted.

   Sun's automounter provides a special `-hosts' map.  To achieve the
same effect with Amd requires two steps.  First a mount map must be
created as follows:

     /defaults  type:=host;fs:=${autodir}/${rhost}/root;rhost:=${key}
     *          opts:=rw,nosuid,grpid

and then start Amd with the following command

     amd /n net.map

where `net.map' is the name of map described above.  Note that the
value of `${fs}' is overridden in the map.  This is done to avoid a
clash between the mount tree and any other filesystem already mounted
from the same fileserver.

   If different mount options are needed for different hosts then
additional entries can be added to the map, for example

     host2       opts:=ro,nosuid,soft

would soft mount `host2' read-only.


File: am-utils.info,  Node: Network Filesystem Group,  Next: Unix Filesystem,  Prev: Network Host Filesystem,  Up: Filesystem Types

Network Filesystem Group (`type:=nfsx')
=======================================

   The "nfsx" filesystem allows a group of filesystems to be mounted
from a single NFS server.  The implementation is layered above the
`nfs' implementation so keep-alives work in the same way.

   The options are the same as for the `nfs' filesystem with one
difference.

The following options must be specified:

`rhost'
     the remote fileserver.  This must be an entry in the hosts
     database.  IP addresses are not accepted.  The default value is
     taken from the local host name (`${host}') if no other value is
     specified.

`rfs'
     as a list of filesystems to mount.  The list is in the form of a
     comma separated strings.

For example:

     pub  type:=nfsx;rhost:=gould;\
          rfs:=/public,/,graphics,usenet;fs:=${autodir}/${rhost}/root

   The first string defines the root of the tree, and is applied as a
prefix to the remaining members of the list which define the individual
filesystems.  The first string is *not* used as a filesystem name.  A
parallel operation is used to determine the local mount points to
ensure a consistent layout of a tree of mounts.

   Here, the *three* filesystems, `/public', `/public/graphics' and
`/public/usenet', would be mounted.

   A local mount point, `${fs}', *must* be specified.  The default
local mount point will not work correctly in the general case.  A
suggestion is to use `fs:=${autodir}/${rhost}/root'.


File: am-utils.info,  Node: Unix Filesystem,  Next: Caching Filesystem,  Prev: Network Filesystem Group,  Up: Filesystem Types

Unix Filesystem (`type:=ufs')
=============================

   The "ufs" filesystem type provides access to the system's standard
disk filesystem--usually a derivative of the Berkeley Fast Filesystem.

The following option must be specified:

`dev'
     the block special device to be mounted.

   A UFS entry might be:

     jsp   host==charm;type:=ufs;dev:=/dev/sd0d;sublink:=jsp


File: am-utils.info,  Node: Caching Filesystem,  Next: CD-ROM Filesystem,  Prev: Unix Filesystem,  Up: Filesystem Types

Caching Filesystem
==================

   The "cachefs" (`type:=cachefs') filesystem caches files from a
remote location onto a local disk, presumably providing faster access.

   XXX: THIS FILESYSTEM IS NOT IMPLEMENTED YET!


File: am-utils.info,  Node: CD-ROM Filesystem,  Next: Loopback Filesystem,  Prev: Caching Filesystem,  Up: Filesystem Types

CD-ROM Filesystem
=================

   The "cdfs" (`type:=cdfs') filesystem mounts a CD-ROM with an ISO9660
format filesystem on it.

The following option must be specified:

`dev'
     the block special device to be mounted.

   A cdfs entry might be:

     pcfs      os==sunos4;type:=cdfs;dev:=/dev/sr0 \
               os==sunos5;type:=cdfs;dev:=/dev/dsk/c0t6d0s2


File: am-utils.info,  Node: Loopback Filesystem,  Next: Memory/RAM Filesystem,  Prev: CD-ROM Filesystem,  Up: Filesystem Types

Loopback Filesystem
===================

   The "lofs" (`type:=lofs') filesystem is also called the loopback
filesystem.  It mounts a local directory on another, thus providing
mount-time binding to another location (unlike symbolic links).

   The loopback filesystem is particularly useful within the context of
a chroot-ed directory (via chroot(2)), to provide access to directories
otherwise inaccessible.

The following option must be specified:

`rfs'
     the pathname to be mounted on top of `${fs}'.

   Usually, the FTP server runs in a chroot-ed environment, for security
reasons.  In this example, lofs is used to provide a subdirectory within
a user's home directory, also available for public ftp.

     lofs      type:=lofs;rfs:=/home/ezk/myftpdir;fs:=/usr/ftp/pub/ezk


File: am-utils.info,  Node: Memory/RAM Filesystem,  Next: Null Filesystem,  Prev: Loopback Filesystem,  Up: Filesystem Types

Memory/RAM Filesystem
=====================

   The "mfs" (`type:=mfs') filesystem is available in 4.4 BSD, Linux,
and other systems.  It creates a filesystem in a portion of the
system's memory, thus providing very fast file (volatile) access.

   XXX: THIS FILESYSTEM IS NOT IMPLEMENTED YET!


File: am-utils.info,  Node: Null Filesystem,  Next: Floppy Filesystem,  Prev: Memory/RAM Filesystem,  Up: Filesystem Types

Null Filesystem
===============

   The "nullfs" (`type:=nullfs') filesystem is available from BSD 4.4,
and is very similar to the loopback filesystem, "lofs".

   XXX: THIS FILESYSTEM IS NOT IMPLEMENTED YET!


File: am-utils.info,  Node: Floppy Filesystem,  Next: Translucent Filesystem,  Prev: Null Filesystem,  Up: Filesystem Types

Floppy Filesystem
=================

   The "pcfs" (`type:=pcfs') filesystem mounts a floppy previously
formatted for the MS-DOS format.

The following option must be specified:

`dev'
     the block special device to be mounted.

   A pcfs entry might be:

     pcfs      os==sunos4;type:=pcfs;dev:=/dev/fd0 \
               os==sunos5;type:=pcfs;dev:=/dev/diskette


File: am-utils.info,  Node: Translucent Filesystem,  Next: Shared Memory+Swap Filesystem,  Prev: Floppy Filesystem,  Up: Filesystem Types

Translucent Filesystem
======================

   The "tfs" (`type:=tfs') filesystem is an older version of the BSD
4.4 "unionfs".

   XXX: THIS FILESYSTEM IS NOT IMPLEMENTED YET!


File: am-utils.info,  Node: Shared Memory+Swap Filesystem,  Next: User ID Mapping Filesystem,  Prev: Translucent Filesystem,  Up: Filesystem Types

Shared Memory+Swap Filesystem
=============================

   The "tmpfs" (`type:=tmpfs') filesystem shares memory between a the
swap device and the rest of the system.  It is generally used to
provide a fast access `/tmp' directory, one that uses memory that is
otherwise unused.  This filesystem is available in SunOS 4.x and 5.x.

   XXX: THIS FILESYSTEM IS NOT IMPLEMENTED YET!


File: am-utils.info,  Node: User ID Mapping Filesystem,  Next: Program Filesystem,  Prev: Shared Memory+Swap Filesystem,  Up: Filesystem Types

User ID Mapping Filesystem
==========================

   The "umapfs" (`type:=umapfs') filesystem maps User IDs of file
ownership, and is available from BSD 4.4.

   XXX: THIS FILESYSTEM IS NOT IMPLEMENTED YET!


File: am-utils.info,  Node: Program Filesystem,  Next: Symbolic Link Filesystem,  Prev: User ID Mapping Filesystem,  Up: Filesystem Types

Program Filesystem (`type:=program')
====================================

   The "program" filesystem type allows a program to be run whenever a
mount or unmount is required.  This allows easy addition of support for
other filesystem types, such as MIT's Remote Virtual Disk (RVD) which
has a programmatic interface via the commands `rvdmount' and
`rvdunmount'.

The following options must be specified:

`mount'
     the program which will perform the mount.

`unmount'
     the program which will perform the unmount.

   The exit code from these two programs is interpreted as a Unix error
code.  As usual, exit code zero indicates success.  To execute the
program Amd splits the string on whitespace to create an array of
substrings.  Single quotes `'' can be used to quote whitespace if that
is required in an argument.  There is no way to escape or change the
quote character.

   To run the program `rvdmount' with a host name and filesystem as
arguments would be specified by `mount:="/etc/rvdmount rvdmount fserver
${path}"'.

   The first element in the array is taken as the pathname of the
program to execute.  The other members of the array form the argument
vector to be passed to the program, "including argument zero".  This
means that the split string must have at least two elements.  The
program is directly executed by Amd, not via a shell.  This means that
scripts must begin with a `#!' interpreter specification.

   If a filesystem type is to be heavily used, it may be worthwhile
adding a new filesystem type into Amd, but for most uses the program
filesystem should suffice.

   When the program is run, standard input and standard error are
inherited from the current values used by Amd.  Standard output is a
duplicate of standard error.  The value specified with the "-l" command
line option has no effect on standard error.


File: am-utils.info,  Node: Symbolic Link Filesystem,  Next: Symbolic Link Filesystem II,  Prev: Program Filesystem,  Up: Filesystem Types

Symbolic Link Filesystem (`type:=link')
=======================================

   Each filesystem type creates a symbolic link to point from the volume
name to the physical mount point.  The `link' filesystem does the same
without any other side effects.  This allows any part of the machines
name space to be accessed via Amd.

   One common use for the symlink filesystem is `/homes' which can be
made to contain an entry for each user which points to their
(auto-mounted) home directory.  Although this may seem rather expensive,
it provides a great deal of administrative flexibility.

The following option must be defined:

`fs'
     The value of FS option specifies the destination of the link, as
     modified by the SUBLINK option.  If SUBLINK is non-null, it is
     appended to `${fs}'`/' and the resulting string is used as the
     target.

   The `link' filesystem can be thought of as identical to the `ufs'
filesystem but without actually mounting anything.

   An example entry might be:

     jsp   host==charm;type:=link;fs:=/home/charm;sublink:=jsp
   which would return a symbolic link pointing to `/home/charm/jsp'.


File: am-utils.info,  Node: Symbolic Link Filesystem II,  Next: Automount Filesystem,  Prev: Symbolic Link Filesystem,  Up: Filesystem Types

Symbolic Link Filesystem II (`type:=linkx')
===========================================

   The `linkx' filesystem type is identical to `link' with the
exception that the target of the link must exist.  Existence is checked
with the `lstat' system call.

   The `linkx' filesystem type is particularly useful for wildcard map
entries.  In this case, a list of possible targets can be give and Amd
will choose the first one which exists on the local machine.


File: am-utils.info,  Node: Automount Filesystem,  Next: Direct Automount Filesystem,  Prev: Symbolic Link Filesystem II,  Up: Filesystem Types

Automount Filesystem (`type:=auto')
===================================

   The "auto" filesystem type creates a new automount point below an
existing automount point.  Top-level automount points appear as system
mount points.  An automount mount point can also appear as a
sub-directory of an existing automount point.  This allows some
additional structure to be added, for example to mimic the mount tree of
another machine.

   The following options may be specified:

`cache'
     specifies whether the data in this mount-map should be cached.
     The default value is `none', in which case no caching is done in
     order to conserve memory.  However, better performance and
     reliability can be obtained by caching some or all of a mount-map.

     If the cache option specifies `all', the entire map is enumerated
     when the mount point is created.

     If the cache option specifies `inc', caching is done incrementally
     as and when data is required.  Some map types do not support cache
     mode `all', in which case `inc' is used whenever `all' is
     requested.

     Caching can be entirely disabled by using cache mode `none'.

     If the cache option specifies `regexp' then the entire map will be
     enumerated and each key will be treated as an egrep-style regular
     expression.  The order in which a cached map is searched does not
     correspond to the ordering in the source map so the regular
     expressions should be mutually exclusive to avoid confusion.

     Each mount map type has a default cache type, usually `inc', which
     can be selected by specifying `mapdefault'.

     The cache mode for a mount map can only be selected on the command
     line.  Starting Amd with the command:

          amd /homes hesiod.homes -cache:=inc

     will cause `/homes' to be automounted using the "Hesiod" name
     server with local incremental caching of all successfully resolved
     names.

     All cached data is forgotten whenever Amd receives a `SIGHUP'
     signal and, if cache `all' mode was selected, the cache will be
     reloaded.  This can be used to inform Amd that a map has been
     updated.  In addition, whenever a cache lookup fails and Amd needs
     to examine a map, the map's modify time is examined.  If the cache
     is out of date with respect to the map then it is flushed as if a
     `SIGHUP' had been received.

     An additional option (`sync') may be specified to force Amd to
     check the map's modify time whenever a cached entry is being used.
     For example, an incremental, synchronized cache would be created
     by the following command:

          amd /homes hesiod.homes -cache:=inc,sync

`fs'
     specifies the name of the mount map to use for the new mount point.

     Arguably this should have been specified with the `${rfs}' option
     but we are now stuck with it due to historical accident.

`pref'
     alters the name that is looked up in the mount map.  If `${pref}',
     the "prefix", is non-null then it is prepended to the name
     requested by the kernel "before" the map is searched.

   The server `dylan.doc.ic.ac.uk' has two user disks: `/dev/dsk/2s0'
and `/dev/dsk/5s0'.  These are accessed as `/home/dylan/dk2' and
`/home/dylan/dk5' respectively.  Since `/home' is already an automount
point, this naming is achieved with the following map entries:

     dylan        type:=auto;fs:=${map};pref:=${key}/
     dylan/dk2    type:=ufs;dev:=/dev/dsk/2s0
     dylan/dk5    type:=ufs;dev:=/dev/dsk/5s0


File: am-utils.info,  Node: Direct Automount Filesystem,  Next: Union Filesystem,  Prev: Automount Filesystem,  Up: Filesystem Types

Direct Automount Filesystem (`type:=direct')
============================================

   The "direct" filesystem is almost identical to the automount
filesystem.  Instead of appearing to be a directory of mount points, it
appears as a symbolic link to a mounted filesystem.  The mount is done
at the time the link is accessed.  *Note Automount Filesystem:: for a
list of required options.

   Direct automount points are created by specifying the `direct'
filesystem type on the command line:

     amd ... /usr/man auto.direct -type:=direct

   where `auto.direct' would contain an entry such as:

     usr/man    -type:=nfs;rfs:=/usr/man \
                rhost:=man-server1  rhost:=man-server2

   In this example, `man-server1' and `man-server2' are file servers
which export copies of the manual pages.  Note that the key which is
looked up is the name of the automount point without the leading `/'.


File: am-utils.info,  Node: Union Filesystem,  Next: Error Filesystem,  Prev: Direct Automount Filesystem,  Up: Filesystem Types

Union Filesystem (`type:=union')
================================

   The "union" filesystem type allows the contents of several
directories to be merged and made visible in a single directory.  This
can be used to overcome one of the major limitations of the Unix mount
mechanism which only allows complete directories to be mounted.

   For example, supposing `/tmp' and `/var/tmp' were to be merged into
a new directory called `/mtmp', with files in `/var/tmp' taking
precedence.  The following command could be used to achieve this effect:

     amd ... /mtmp union:/tmp:/var/tmp -type:=union

   Currently, the unioned directories must *not* be automounted.  That
would cause a deadlock.  This seriously limits the current usefulness of
this filesystem type and the problem will be addressed in a future
release of Amd.

   Files created in the union directory are actually created in the last
named directory.  This is done by creating a wildcard entry which points
to the correct directory.  The wildcard entry is visible if the union
directory is listed, so allowing you to see which directory has
priority.

   The files visible in the union directory are computed at the time
Amd is started, and are not kept up-to-date with respect to the
underlying directories.  Similarly, if a link is removed, for example
with the `rm' command, it will be lost forever.


File: am-utils.info,  Node: Error Filesystem,  Next: Top-level Filesystem,  Prev: Union Filesystem,  Up: Filesystem Types

Error Filesystem (`type:=error')
================================

   The "error" filesystem type is used internally as a catch-all in the
case where none of the other filesystems was selected, or some other
error occurred.  Lookups and mounts always fail with "No such file or
directory".  All other operations trivially succeed.

   The error filesystem is not directly accessible.


File: am-utils.info,  Node: Top-level Filesystem,  Next: Autofs Filesystem,  Prev: Error Filesystem,  Up: Filesystem Types

Top-level Filesystem (`type:=toplvl')
=====================================

   The "toplvl" filesystems is derived from the `auto' filesystem and
is used to mount the top-level automount nodes.  Requests of this type
are automatically generated from the command line arguments and can
also be passed in by using the "-M" option of the "Amq" command.  That
option is insecure, and is unavailable unless am-utils was configured
with `--with-amq-mount'.


File: am-utils.info,  Node: Root Filesystem,  Next: Inheritance Filesystem,  Prev: Autofs Filesystem,  Up: Filesystem Types

Root Filesystem
===============

   The "root" (`type:=root') filesystem type acts as an internal
placeholder onto which Amd can pin `toplvl' mounts.  Only one node of
this type need ever exist and one is created automatically during
startup.  The effect of having more than one root node is undefined.

   The root filesystem is not directly accessible.


File: am-utils.info,  Node: Autofs Filesystem,  Next: Root Filesystem,  Prev: Top-level Filesystem,  Up: Filesystem Types

Autofs Filesystem
=================

   The "autofs" filesystem uses Sun's kernel-based automounter
supporting filesystem for Amd's mount points.  Hence it is another type
of top level filesystem.

   The autofs filesystem is not directly accessible from Amd maps, but
only from the `amd.conf' file (*note mount_type Parameter::.).

   Note that Autofs support is still very early.  See the distribution
file `README.autofs' for detail of what works and what does not.

