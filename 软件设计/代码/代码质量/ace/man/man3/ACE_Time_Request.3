.TH ACE_Time_Request 3 "5 Oct 2001" "ACE" \" -*- nroff -*-
.ad l
.nh
.SH NAME
ACE_Time_Request \- Message format for delivering requests to the ACE_Time Server. 
.SH SYNOPSIS
.br
.PP
\fC#include <Time_Request_Reply.h>\fR
.PP
.SS Public Types

.in +1c
.ti -1c
.RI "enum \fBConstants\fR { \fBTIME_UPDATE\fR = 01, \fBMAX_TIME_LEN\fR = MAXPATHLEN + 1 }"
.br
.in -1c
.SS Public Methods

.in +1c
.ti -1c
.RI "\fBACE_Time_Request\fR (void)"
.br
.RI "\fIDefault constructor.\fR"
.ti -1c
.RI "\fBACE_Time_Request\fR (ACE_INT32 msg_type, const ACE_UINT32 time, \fBACE_Time_Value\fR *timeout = 0)"
.br
.RI "\fICreate a  message.\fR"
.ti -1c
.RI "void \fBinit\fR (void)"
.br
.RI "\fIInitialize length_ in order to ensure correct byte ordering before a request is sent.\fR"
.ti -1c
.RI "\fBssize_t\fR \fBsize\fR (void) const"
.br
.ti -1c
.RI "ACE_INT32 \fBmsg_type\fR (void) const"
.br
.ti -1c
.RI "void \fBmsg_type\fR (ACE_INT32)"
.br
.ti -1c
.RI "ACE_UINT32 \fBtime\fR (void) const"
.br
.ti -1c
.RI "void \fBtime\fR (ACE_UINT32 t)"
.br
.ti -1c
.RI "ACE_UINT32 \fBblock_forever\fR (void) const"
.br
.ti -1c
.RI "void \fBblock_forever\fR (ACE_UINT32)"
.br
.ti -1c
.RI "\fBACE_Time_Value\fR \fBtimeout\fR (void) const"
.br
.ti -1c
.RI "void \fBtimeout\fR (const \fBACE_Time_Value\fR timeout)"
.br
.ti -1c
.RI "int \fBencode\fR (void *&)"
.br
.RI "\fIEncode the message before transmission.\fR"
.ti -1c
.RI "int \fBdecode\fR (void)"
.br
.RI "\fIDecode message after reception.\fR"
.ti -1c
.RI "void \fBdump\fR (void) const"
.br
.RI "\fIPrint out the values of the message for debugging purposes.\fR"
.in -1c
.SS Private Attributes

.in +1c
.ti -1c
.RI "\fBTransfer\fR \fBtransfer_\fR"
.br
.RI "\fI\fBTransfer\fR buffer.\fR"
.ti -1c
.RI "ACE_UINT32 \fBtime_\fR"
.br
.RI "\fITime.\fR"
.in -1c
.SH DETAILED DESCRIPTION
.PP 
Message format for delivering requests to the ACE_Time Server.
.PP
.PP
 This class is implemented to minimize data copying. In particular, all marshaling is done in situ... 
.PP
.SH MEMBER ENUMERATION DOCUMENTATION
.PP 
.SS enum ACE_Time_Request::Constants
.PP
\fBEnumeration values:\fR
.in +1c
.TP
\fB\fITIME_UPDATE\fR \fRRequest message types.
.TP
\fB\fIMAX_TIME_LEN\fR \fRClass-specific constant values.
.SH CONSTRUCTOR & DESTRUCTOR DOCUMENTATION
.PP 
.SS ACE_Time_Request::ACE_Time_Request (void)
.PP
Default constructor.
.PP
.SS ACE_Time_Request::ACE_Time_Request (ACE_INT32 msg_type, const ACE_UINT32 time, \fBACE_Time_Value\fR * timeout = 0)
.PP
Create a  message.
.PP
.SH MEMBER FUNCTION DOCUMENTATION
.PP 
.SS void ACE_Time_Request::block_forever (ACE_UINT32)
.PP
.SS ACE_UINT32 ACE_Time_Request::block_forever (void) const
.PP
.SS int ACE_Time_Request::decode (void)
.PP
Decode message after reception.
.PP
.SS void ACE_Time_Request::dump (void) const
.PP
Print out the values of the message for debugging purposes.
.PP
.SS int ACE_Time_Request::encode (void *&)
.PP
Encode the message before transmission.
.PP
.SS void ACE_Time_Request::init (void)
.PP
Initialize length_ in order to ensure correct byte ordering before a request is sent.
.PP
.SS void ACE_Time_Request::msg_type (ACE_INT32)
.PP
.SS ACE_INT32 ACE_Time_Request::msg_type (void) const
.PP
.SS \fBssize_t\fR ACE_Time_Request::size (void) const
.PP
.SS void ACE_Time_Request::time (ACE_UINT32 t)
.PP
.SS ACE_UINT32 ACE_Time_Request::time (void) const
.PP
.SS void ACE_Time_Request::timeout (const \fBACE_Time_Value\fR timeout)
.PP
.SS \fBACE_Time_Value\fR ACE_Time_Request::timeout (void) const
.PP
.SH MEMBER DATA DOCUMENTATION
.PP 
.SS ACE_UINT32 ACE_Time_Request::time_\fC [private]\fR
.PP
Time.
.PP
.SS \fBTransfer\fR ACE_Time_Request::transfer_\fC [private]\fR
.PP
\fBTransfer\fR buffer.
.PP


.SH AUTHOR
.PP 
Generated automatically by Doxygen for ACE from the source code.