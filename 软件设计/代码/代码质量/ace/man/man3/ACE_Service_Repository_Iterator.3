.TH ACE_Service_Repository_Iterator 3 "5 Oct 2001" "ACE" \" -*- nroff -*-
.ad l
.nh
.SH NAME
ACE_Service_Repository_Iterator \- Iterate through the . 
.SH SYNOPSIS
.br
.PP
\fC#include <Service_Repository.h>\fR
.PP
.SS Public Methods

.in +1c
.ti -1c
.RI "\fBACE_Service_Repository_Iterator\fR (\fBACE_Service_Repository\fR &sr, int ignored_suspended = 1)"
.br
.RI "\fIConstructor.\fR"
.ti -1c
.RI "\fB~ACE_Service_Repository_Iterator\fR (void)"
.br
.RI "\fIDestructor.\fR"
.ti -1c
.RI "int \fBnext\fR (const \fBACE_Service_Type\fR *&next_item)"
.br
.RI "\fIPass back the <next_item> that hasn't been seen in the set. Returns 0 when all items have been seen, else 1.\fR"
.ti -1c
.RI "int \fBdone\fR (void) const"
.br
.RI "\fIReturns 1 when all items have been seen, else 0.\fR"
.ti -1c
.RI "int \fBadvance\fR (void)"
.br
.RI "\fIMove forward by one element in the set. Returns 0 when all the items in the set have been seen, else 1.\fR"
.ti -1c
.RI "void \fBdump\fR (void) const"
.br
.RI "\fIDump the state of an object.\fR"
.in -1c
.SS Public Attributes

.in +1c
.ti -1c
.RI "\fBACE_ALLOC_HOOK_DECLARE\fR"
.br
.RI "\fIDeclare the dynamic allocation hooks.\fR"
.in -1c
.SS Private Attributes

.in +1c
.ti -1c
.RI "\fBACE_Service_Repository\fR& \fBsvc_rep_\fR"
.br
.RI "\fIReference to the Service Repository we are iterating over.\fR"
.ti -1c
.RI "int \fBnext_\fR"
.br
.RI "\fINext index location that we haven't yet seen.\fR"
.ti -1c
.RI "int \fBignore_suspended_\fR"
.br
.RI "\fIAre we ignoring suspended services?\fR"
.in -1c
.SH DETAILED DESCRIPTION
.PP 
Iterate through the .
.PP
.PP
 Make sure not to delete entries as the iteration is going on since this class is not designed as a robust iterator. 
.PP
.SH CONSTRUCTOR & DESTRUCTOR DOCUMENTATION
.PP 
.SS ACE_Service_Repository_Iterator::ACE_Service_Repository_Iterator (\fBACE_Service_Repository\fR & sr, int ignored_suspended = 1)
.PP
Constructor.
.PP
.SS ACE_Service_Repository_Iterator::~ACE_Service_Repository_Iterator (void)
.PP
Destructor.
.PP
.SH MEMBER FUNCTION DOCUMENTATION
.PP 
.SS int ACE_Service_Repository_Iterator::advance (void)
.PP
Move forward by one element in the set. Returns 0 when all the items in the set have been seen, else 1.
.PP
.SS int ACE_Service_Repository_Iterator::done (void) const
.PP
Returns 1 when all items have been seen, else 0.
.PP
.SS void ACE_Service_Repository_Iterator::dump (void) const
.PP
Dump the state of an object.
.PP
.SS int ACE_Service_Repository_Iterator::next (const \fBACE_Service_Type\fR *& next_item)
.PP
Pass back the <next_item> that hasn't been seen in the set. Returns 0 when all items have been seen, else 1.
.PP
.SH MEMBER DATA DOCUMENTATION
.PP 
.SS ACE_Service_Repository_Iterator::ACE_ALLOC_HOOK_DECLARE
.PP
Declare the dynamic allocation hooks.
.PP
.SS int ACE_Service_Repository_Iterator::ignore_suspended_\fC [private]\fR
.PP
Are we ignoring suspended services?
.PP
.SS int ACE_Service_Repository_Iterator::next_\fC [private]\fR
.PP
Next index location that we haven't yet seen.
.PP
.SS \fBACE_Service_Repository\fR & ACE_Service_Repository_Iterator::svc_rep_\fC [private]\fR
.PP
Reference to the Service Repository we are iterating over.
.PP


.SH AUTHOR
.PP 
Generated automatically by Doxygen for ACE from the source code.