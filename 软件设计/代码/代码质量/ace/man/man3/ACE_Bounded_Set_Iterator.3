.TH ACE_Bounded_Set_Iterator 3 "5 Oct 2001" "ACE" \" -*- nroff -*-
.ad l
.nh
.SH NAME
ACE_Bounded_Set_Iterator \- Interates through an unordered set. 
.SH SYNOPSIS
.br
.PP
\fC#include <Containers_T.h>\fR
.PP
.SS Public Methods

.in +1c
.ti -1c
.RI "\fBACE_Bounded_Set_Iterator\fR (\fBACE_Bounded_Set\fR<T> &s)"
.br
.ti -1c
.RI "int \fBnext\fR (T *&next_item)"
.br
.RI "\fIPass back the <next_item> that hasn't been seen in the Set. Returns 0 when all items have been seen, else 1.\fR"
.ti -1c
.RI "int \fBadvance\fR (void)"
.br
.RI "\fIMove forward by one element in the set. Returns 0 when all the items in the set have been seen, else 1.\fR"
.ti -1c
.RI "int \fBfirst\fR (void)"
.br
.RI "\fIMove to the first element in the set. Returns 0 if the set is empty, else 1.\fR"
.ti -1c
.RI "int \fBdone\fR (void) const"
.br
.RI "\fIReturns 1 when all items have been seen, else 0.\fR"
.ti -1c
.RI "void \fBdump\fR (void) const"
.br
.RI "\fIDump the state of an object.\fR"
.in -1c
.SS Public Attributes

.in +1c
.ti -1c
.RI "\fBACE_ALLOC_HOOK_DECLARE\fR"
.br
.RI "\fIDeclare the dynamic allocation hooks.\fR"
.in -1c
.SS Private Attributes

.in +1c
.ti -1c
.RI "\fBACE_Bounded_Set\fR<T>& \fBs_\fR"
.br
.RI "\fISet we are iterating over.\fR"
.ti -1c
.RI "\fBssize_t\fR \fBnext_\fR"
.br
.RI "\fIHow far we've advanced over the set.\fR"
.in -1c
.SH DETAILED DESCRIPTION
.PP 

.SS template<class T>  template class ACE_Bounded_Set_Iterator
Interates through an unordered set.
.PP
.PP
 This implementation of an unordered set uses a Bounded array. Allows deletions while iteration is occurring. 
.PP
.SH CONSTRUCTOR & DESTRUCTOR DOCUMENTATION
.PP 
.SS template<classT> ACE_Bounded_Set_Iterator<T>::ACE_Bounded_Set_Iterator<T> (\fBACE_Bounded_Set\fR< T >& s)
.PP
.SH MEMBER FUNCTION DOCUMENTATION
.PP 
.SS template<classT> int ACE_Bounded_Set_Iterator<T>::advance (void)
.PP
Move forward by one element in the set. Returns 0 when all the items in the set have been seen, else 1.
.PP
.SS template<classT> int ACE_Bounded_Set_Iterator<T>::done (void) const
.PP
Returns 1 when all items have been seen, else 0.
.PP
.SS template<classT> void ACE_Bounded_Set_Iterator<T>::dump (void) const
.PP
Dump the state of an object.
.PP
.SS template<classT> int ACE_Bounded_Set_Iterator<T>::first (void)
.PP
Move to the first element in the set. Returns 0 if the set is empty, else 1.
.PP
.SS template<classT> int ACE_Bounded_Set_Iterator<T>::next (T *& next_item)
.PP
Pass back the <next_item> that hasn't been seen in the Set. Returns 0 when all items have been seen, else 1.
.PP
.SH MEMBER DATA DOCUMENTATION
.PP 
.SS template<classT> ACE_Bounded_Set_Iterator<T>::ACE_ALLOC_HOOK_DECLARE
.PP
Declare the dynamic allocation hooks.
.PP
.SS template<classT> \fBssize_t\fR ACE_Bounded_Set_Iterator<T>::next_\fC [private]\fR
.PP
How far we've advanced over the set.
.PP
.SS template<classT> \fBACE_Bounded_Set\fR< T >& ACE_Bounded_Set_Iterator<T>::s_\fC [private]\fR
.PP
Set we are iterating over.
.PP


.SH AUTHOR
.PP 
Generated automatically by Doxygen for ACE from the source code.