.TH ACE_Shared_Memory_MM 3 "5 Oct 2001" "ACE" \" -*- nroff -*-
.ad l
.nh
.SH NAME
ACE_Shared_Memory_MM \- Shared memory wrapper based on MMAP. 
.SH SYNOPSIS
.br
.PP
\fC#include <Shared_Memory_MM.h>\fR
.PP
Inherits \fBACE_Shared_Memory\fR.
.PP
.SS Public Methods

.in +1c
.ti -1c
.RI "\fBACE_Shared_Memory_MM\fR (void)"
.br
.RI "\fIDefault constructor.\fR"
.ti -1c
.RI "\fBACE_Shared_Memory_MM\fR (ACE_HANDLE handle, int length = -1, int prot = PROT_RDWR, int share = ACE_MAP_PRIVATE, char *addr = 0, off_t pos = 0)"
.br
.RI "\fIConstructor.\fR"
.ti -1c
.RI "\fBACE_Shared_Memory_MM\fR (const \fBACE_TCHAR\fR *file_name, int len = -1, int flags = O_RDWR | O_CREAT, int mode = ACE_DEFAULT_FILE_PERMS, int prot = PROT_RDWR, int share = ACE_MAP_SHARED, char *addr = 0, off_t pos = 0)"
.br
.RI "\fIConstructor.\fR"
.ti -1c
.RI "int \fBopen\fR (ACE_HANDLE handle, int length = -1, int prot = PROT_RDWR, int share = ACE_MAP_PRIVATE, char *addr = 0, off_t pos = 0)"
.br
.RI "\fIOpen method.\fR"
.ti -1c
.RI "int \fBopen\fR (const \fBACE_TCHAR\fR *file_name, int len = -1, int flags = O_RDWR | O_CREAT, int mode = ACE_DEFAULT_FILE_PERMS, int prot = PROT_RDWR, int share = ACE_MAP_SHARED, char *addr = 0, off_t pos = 0)"
.br
.RI "\fIOpen method.\fR"
.ti -1c
.RI "const \fBACE_TCHAR\fR* \fBfilename\fR (void) const"
.br
.RI "\fIReturn the name of file that is mapped (if any).\fR"
.ti -1c
.RI "virtual int \fBclose\fR (void)"
.br
.RI "\fIClose down the shared memory segment.\fR"
.ti -1c
.RI "virtual int \fBremove\fR (void)"
.br
.RI "\fIRemove the shared memory segment and the underlying file.\fR"
.ti -1c
.RI "virtual void* \fBmalloc\fR (size_t size = 0)"
.br
.RI "\fICreate a new chuck of memory containing <size> bytes.\fR"
.ti -1c
.RI "virtual int \fBfree\fR (void *p)"
.br
.RI "\fIFree a chuck of memory allocated by .\fR"
.ti -1c
.RI "virtual int \fBget_segment_size\fR (void) const"
.br
.RI "\fIReturn the size of the shared memory segment.\fR"
.ti -1c
.RI "virtual ACE_HANDLE \fBget_id\fR (void) const"
.br
.RI "\fIReturn the ID of the shared memory segment (i.e., an ACE_HANDLE).\fR"
.ti -1c
.RI "void \fBdump\fR (void) const"
.br
.RI "\fIDump the state of an object.\fR"
.in -1c
.SS Public Attributes

.in +1c
.ti -1c
.RI "\fBACE_ALLOC_HOOK_DECLARE\fR"
.br
.RI "\fIDeclare the dynamic allocation hooks.\fR"
.in -1c
.SS Private Attributes

.in +1c
.ti -1c
.RI "\fBACE_Mem_Map\fR \fBshared_memory_\fR"
.br
.RI "\fIThis version is implemented with memory-mapped files.\fR"
.in -1c
.SH DETAILED DESCRIPTION
.PP 
Shared memory wrapper based on MMAP.
.PP
.PP
 This class provides a very simple-minded shared memory manager. For more a powerful memory allocator please see . 
.PP
.SH CONSTRUCTOR & DESTRUCTOR DOCUMENTATION
.PP 
.SS ACE_Shared_Memory_MM::ACE_Shared_Memory_MM (void)
.PP
Default constructor.
.PP
.SS ACE_Shared_Memory_MM::ACE_Shared_Memory_MM (ACE_HANDLE handle, int length = -1, int prot = PROT_RDWR, int share = ACE_MAP_PRIVATE, char * addr = 0, off_t pos = 0)
.PP
Constructor.
.PP
.SS ACE_Shared_Memory_MM::ACE_Shared_Memory_MM (const \fBACE_TCHAR\fR * file_name, int len = -1, int flags = O_RDWR | O_CREAT, int mode = ACE_DEFAULT_FILE_PERMS, int prot = PROT_RDWR, int share = ACE_MAP_SHARED, char * addr = 0, off_t pos = 0)
.PP
Constructor.
.PP
.SH MEMBER FUNCTION DOCUMENTATION
.PP 
.SS int ACE_Shared_Memory_MM::close (void)\fC [virtual]\fR
.PP
Close down the shared memory segment.
.PP
Reimplemented from \fBACE_Shared_Memory\fR.
.SS void ACE_Shared_Memory_MM::dump (void) const
.PP
Dump the state of an object.
.PP
.SS const \fBACE_TCHAR\fR * ACE_Shared_Memory_MM::filename (void) const
.PP
Return the name of file that is mapped (if any).
.PP
.SS int ACE_Shared_Memory_MM::free (void * p)\fC [virtual]\fR
.PP
Free a chuck of memory allocated by .
.PP
Reimplemented from \fBACE_Shared_Memory\fR.
.SS ACE_HANDLE ACE_Shared_Memory_MM::get_id (void) const\fC [virtual]\fR
.PP
Return the ID of the shared memory segment (i.e., an ACE_HANDLE).
.PP
Reimplemented from \fBACE_Shared_Memory\fR.
.SS int ACE_Shared_Memory_MM::get_segment_size (void) const\fC [virtual]\fR
.PP
Return the size of the shared memory segment.
.PP
Reimplemented from \fBACE_Shared_Memory\fR.
.SS void * ACE_Shared_Memory_MM::malloc (size_t size = 0)\fC [virtual]\fR
.PP
Create a new chuck of memory containing <size> bytes.
.PP
Reimplemented from \fBACE_Shared_Memory\fR.
.SS int ACE_Shared_Memory_MM::open (const \fBACE_TCHAR\fR * file_name, int len = -1, int flags = O_RDWR | O_CREAT, int mode = ACE_DEFAULT_FILE_PERMS, int prot = PROT_RDWR, int share = ACE_MAP_SHARED, char * addr = 0, off_t pos = 0)
.PP
Open method.
.PP
.SS int ACE_Shared_Memory_MM::open (ACE_HANDLE handle, int length = -1, int prot = PROT_RDWR, int share = ACE_MAP_PRIVATE, char * addr = 0, off_t pos = 0)
.PP
Open method.
.PP
.SS int ACE_Shared_Memory_MM::remove (void)\fC [virtual]\fR
.PP
Remove the shared memory segment and the underlying file.
.PP
Reimplemented from \fBACE_Shared_Memory\fR.
.SH MEMBER DATA DOCUMENTATION
.PP 
.SS ACE_Shared_Memory_MM::ACE_ALLOC_HOOK_DECLARE
.PP
Declare the dynamic allocation hooks.
.PP
.SS \fBACE_Mem_Map\fR ACE_Shared_Memory_MM::shared_memory_\fC [private]\fR
.PP
This version is implemented with memory-mapped files.
.PP


.SH AUTHOR
.PP 
Generated automatically by Doxygen for ACE from the source code.