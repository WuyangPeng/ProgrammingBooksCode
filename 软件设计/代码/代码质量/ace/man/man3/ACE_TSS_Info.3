.TH ACE_TSS_Info 3 "5 Oct 2001" "ACE" \" -*- nroff -*-
.ad l
.nh
.SH NAME
ACE_TSS_Info \- Thread Specific Key management. 
.SH SYNOPSIS
.br
.PP
\fC#include <OS.h>\fR
.PP
.SS Public Methods

.in +1c
.ti -1c
.RI "\fBACE_TSS_Info\fR (\fBACE_thread_key_t\fR key, void (*dest)(void *) = 0, void *tss_inst = 0)"
.br
.RI "\fIConstructor.\fR"
.ti -1c
.RI "\fBACE_TSS_Info\fR (void)"
.br
.RI "\fIDefault constructor.\fR"
.ti -1c
.RI "int \fBkey_in_use\fR (void) const"
.br
.RI "\fIReturns 1 if the key is in use, 0 if not.\fR"
.ti -1c
.RI "void \fBkey_in_use\fR (int flag)"
.br
.RI "\fIMark the key as being in use if the flag is non-zero, or not in use if the flag is 0.\fR"
.ti -1c
.RI "int \fBoperator==\fR (const ACE_TSS_Info &) const"
.br
.RI "\fICheck for equality.\fR"
.ti -1c
.RI "int \fBoperator!=\fR (const ACE_TSS_Info &) const"
.br
.RI "\fICheck for inequality.\fR"
.ti -1c
.RI "void \fBdump\fR (void)"
.br
.RI "\fIDump the state.\fR"
.in -1c
.SS Private Attributes

.in +1c
.ti -1c
.RI "\fBACE_thread_key_t\fR \fBkey_\fR"
.br
.RI "\fIKey to the thread-specific storage item.\fR"
.ti -1c
.RI "void (* \fBdestructor_\fR )(void *)"
.br
.RI "\fI"Destructor" that gets called when the item is finally released.\fR"
.ti -1c
.RI "void* \fBtss_obj_\fR"
.br
.RI "\fIPointer to \fBACE_TSS\fR<xxx> instance that has/will allocate the key.\fR"
.ti -1c
.RI "int \fBthread_count_\fR"
.br
.RI "\fICount of threads that are using this key. Contains -1 when the key is not in use.\fR"
.in -1c
.SS Friends

.in +1c
.ti -1c
.RI "class \fBACE_TSS_Cleanup\fR"
.br
.in -1c
.SH DETAILED DESCRIPTION
.PP 
Thread Specific Key management.
.PP
.PP
 This class maps a key to a "destructor." 
.PP
.SH CONSTRUCTOR & DESTRUCTOR DOCUMENTATION
.PP 
.SS ACE_TSS_Info::ACE_TSS_Info (\fBACE_thread_key_t\fR key, void(* dest)(void *) = 0, void * tss_inst = 0)
.PP
Constructor.
.PP
.SS ACE_TSS_Info::ACE_TSS_Info (void)
.PP
Default constructor.
.PP
.SH MEMBER FUNCTION DOCUMENTATION
.PP 
.SS void ACE_TSS_Info::dump (void)
.PP
Dump the state.
.PP
.SS void ACE_TSS_Info::key_in_use (int flag)\fC [inline]\fR
.PP
Mark the key as being in use if the flag is non-zero, or not in use if the flag is 0.
.PP
.SS int ACE_TSS_Info::key_in_use (void) const\fC [inline]\fR
.PP
Returns 1 if the key is in use, 0 if not.
.PP
.SS int ACE_TSS_Info::operator!= (const ACE_TSS_Info &) const
.PP
Check for inequality.
.PP
.SS int ACE_TSS_Info::operator== (const ACE_TSS_Info &) const
.PP
Check for equality.
.PP
.SH FRIENDS AND RELATED FUNCTION DOCUMENTATION
.PP 
.SS class ACE_TSS_Cleanup\fC [friend]\fR
.PP
.SH MEMBER DATA DOCUMENTATION
.PP 
.SS void(* ACE_TSS_Info::destructor_)(void *)\fC [private]\fR
.PP
"Destructor" that gets called when the item is finally released.
.PP
.SS \fBACE_thread_key_t\fR ACE_TSS_Info::key_\fC [private]\fR
.PP
Key to the thread-specific storage item.
.PP
.SS int ACE_TSS_Info::thread_count_\fC [private]\fR
.PP
Count of threads that are using this key. Contains -1 when the key is not in use.
.PP
.SS void * ACE_TSS_Info::tss_obj_\fC [private]\fR
.PP
Pointer to \fBACE_TSS\fR<xxx> instance that has/will allocate the key.
.PP


.SH AUTHOR
.PP 
Generated automatically by Doxygen for ACE from the source code.