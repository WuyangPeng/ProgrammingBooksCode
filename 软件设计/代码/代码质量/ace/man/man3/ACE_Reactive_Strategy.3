.TH ACE_Reactive_Strategy 3 "5 Oct 2001" "ACE" \" -*- nroff -*-
.ad l
.nh
.SH NAME
ACE_Reactive_Strategy \- Defines the interface for specifying a Reactive concurrency strategy for a SVC_HANDLER. 
.SH SYNOPSIS
.br
.PP
\fC#include <Strategies_T.h>\fR
.PP
Inherits \fBACE_Concurrency_Strategy< SVC_HANDLER >\fR.
.PP
.SS Public Methods

.in +1c
.ti -1c
.RI "\fBACE_Reactive_Strategy\fR (int flags = 0)"
.br
.RI "\fI"Do-nothing constructor".\fR"
.ti -1c
.RI "\fBACE_Reactive_Strategy\fR (\fBACE_Reactor\fR *reactor, \fBACE_Reactor_Mask\fR = ACE_Event_Handler::READ_MASK, int flags = 0)"
.br
.RI "\fIInitialize the strategy.\fR"
.ti -1c
.RI "virtual int \fBopen\fR (\fBACE_Reactor\fR *reactor, \fBACE_Reactor_Mask\fR = ACE_Event_Handler::READ_MASK, int flags = 0)"
.br
.RI "\fIInitialize the strategy.\fR"
.ti -1c
.RI "virtual \fB~ACE_Reactive_Strategy\fR (void)"
.br
.RI "\fIDestructor.\fR"
.ti -1c
.RI "virtual int \fBactivate_svc_handler\fR (SVC_HANDLER *svc_handler, void *arg = 0)"
.br
.RI "\fIActivate the <svc_handler> by registering it with the <Reactor> and then calling it's <open> hook.\fR"
.ti -1c
.RI "void \fBdump\fR (void) const"
.br
.RI "\fIDump the state of an object.\fR"
.in -1c
.SS Public Attributes

.in +1c
.ti -1c
.RI "\fBACE_ALLOC_HOOK_DECLARE\fR"
.br
.RI "\fIDeclare the dynamic allocation hooks.\fR"
.in -1c
.SS Protected Types

.in +1c
.ti -1c
.RI "typedef \fBACE_Concurrency_Strategy\fR<SVC_HANDLER> \fBinherited\fR"
.br
.in -1c
.SS Protected Attributes

.in +1c
.ti -1c
.RI "\fBACE_Reactor\fR* \fBreactor_\fR"
.br
.RI "\fIPointer to the Reactor we'll use to register the <SVC_HANDLER>.\fR"
.ti -1c
.RI "\fBACE_Reactor_Mask\fR \fBmask_\fR"
.br
.RI "\fIThe mask that we pass to the <Reactor> when we register the <SVC_HANDLER>.\fR"
.in -1c
.SH DETAILED DESCRIPTION
.PP 

.SS template<class SVC_HANDLER>  template class ACE_Reactive_Strategy
Defines the interface for specifying a Reactive concurrency strategy for a SVC_HANDLER.
.PP
.PP
 This class provides a strategy that registers the <SVC_HANDLER> with a <Reactor>. 
.PP
.SH MEMBER TYPEDEF DOCUMENTATION
.PP 
.SS template<classSVC_HANDLER> typedef \fBACE_Concurrency_Strategy\fR<SVC_HANDLER> ACE_Reactive_Strategy<SVC_HANDLER>::inherited\fC [protected]\fR
.PP
.SH CONSTRUCTOR & DESTRUCTOR DOCUMENTATION
.PP 
.SS template<classSVC_HANDLER> ACE_Reactive_Strategy<SVC_HANDLER>::ACE_Reactive_Strategy<SVC_HANDLER> (int flags = 0)
.PP
"Do-nothing constructor".
.PP
.SS template<classSVC_HANDLER> ACE_Reactive_Strategy<SVC_HANDLER>::ACE_Reactive_Strategy<SVC_HANDLER> (\fBACE_Reactor\fR * reactor, \fBACE_Reactor_Mask\fR = ACE_Event_Handler::READ_MASK, int flags = 0)
.PP
Initialize the strategy.
.PP
.SS template<classSVC_HANDLER> ACE_Reactive_Strategy<SVC_HANDLER>::~ACE_Reactive_Strategy<SVC_HANDLER> (void)\fC [virtual]\fR
.PP
Destructor.
.PP
.SH MEMBER FUNCTION DOCUMENTATION
.PP 
.SS template<classSVC_HANDLER> int ACE_Reactive_Strategy<SVC_HANDLER>::activate_svc_handler (SVC_HANDLER * svc_handler, void * arg = 0)\fC [virtual]\fR
.PP
Activate the <svc_handler> by registering it with the <Reactor> and then calling it's <open> hook.
.PP
Reimplemented from \fBACE_Concurrency_Strategy\fR.
.SS template<classSVC_HANDLER> void ACE_Reactive_Strategy<SVC_HANDLER>::dump (void) const
.PP
Dump the state of an object.
.PP
Reimplemented from \fBACE_Concurrency_Strategy\fR.
.SS template<classSVC_HANDLER> int ACE_Reactive_Strategy<SVC_HANDLER>::open (\fBACE_Reactor\fR * reactor, \fBACE_Reactor_Mask\fR = ACE_Event_Handler::READ_MASK, int flags = 0)\fC [virtual]\fR
.PP
Initialize the strategy.
.PP
.SH MEMBER DATA DOCUMENTATION
.PP 
.SS template<classSVC_HANDLER> ACE_Reactive_Strategy<SVC_HANDLER>::ACE_ALLOC_HOOK_DECLARE
.PP
Declare the dynamic allocation hooks.
.PP
Reimplemented from \fBACE_Concurrency_Strategy\fR.
.SS template<classSVC_HANDLER> \fBACE_Reactor_Mask\fR ACE_Reactive_Strategy<SVC_HANDLER>::mask_\fC [protected]\fR
.PP
The mask that we pass to the <Reactor> when we register the <SVC_HANDLER>.
.PP
.SS template<classSVC_HANDLER> \fBACE_Reactor\fR * ACE_Reactive_Strategy<SVC_HANDLER>::reactor_\fC [protected]\fR
.PP
Pointer to the Reactor we'll use to register the <SVC_HANDLER>.
.PP


.SH AUTHOR
.PP 
Generated automatically by Doxygen for ACE from the source code.