.TH ACE_Thread_Hook 3 "5 Oct 2001" "ACE" \" -*- nroff -*-
.ad l
.nh
.SH NAME
ACE_Thread_Hook \- This class makes it possible to provide user-defined "start" hooks that are called before the thread entry point function is invoked. 
.SH SYNOPSIS
.br
.PP
\fC#include <Thread_Hook.h>\fR
.PP
.SS Public Methods

.in +1c
.ti -1c
.RI "virtual void* \fBstart\fR (ACE_THR_FUNC func, void *arg)"
.br
.in -1c
.SS Static Public Methods

.in +1c
.ti -1c
.RI "ACE_Thread_Hook* \fBthread_hook\fR (ACE_Thread_Hook *hook)"
.br
.RI "\fIsets the system wide thread hook, returns the previous thread hook or 0 if none is set.\fR"
.ti -1c
.RI "ACE_Thread_Hook* \fBthread_hook\fR (void)"
.br
.RI "\fIReturns the current system thread hook.\fR"
.in -1c
.SH DETAILED DESCRIPTION
.PP 
This class makes it possible to provide user-defined "start" hooks that are called before the thread entry point function is invoked.
.PP
.SH MEMBER FUNCTION DOCUMENTATION
.PP 
.SS void * ACE_Thread_Hook::start (ACE_THR_FUNC func, void * arg)\fC [virtual]\fR
.PP
This method can be overridden in a subclass to customize this pre-function call "hook" invocation that can perform initialization processing before the thread entry point <func> method is called back. The <func> and  passed into the start hook are the same as those passed by the application that spawned the thread. 
.SS ACE_Thread_Hook * ACE_Thread_Hook::thread_hook (void)\fC [static]\fR
.PP
Returns the current system thread hook.
.PP
.SS ACE_Thread_Hook * ACE_Thread_Hook::thread_hook (ACE_Thread_Hook * hook)\fC [static]\fR
.PP
sets the system wide thread hook, returns the previous thread hook or 0 if none is set.
.PP


.SH AUTHOR
.PP 
Generated automatically by Doxygen for ACE from the source code.