.TH ACE_UPIPE_Acceptor 3 "5 Oct 2001" "ACE" \" -*- nroff -*-
.ad l
.nh
.SH NAME
ACE_UPIPE_Acceptor \- Defines the format and interface for the listener side of the \fBACE_UPIPE_Stream\fR. 
.SH SYNOPSIS
.br
.PP
\fC#include <UPIPE_Acceptor.h>\fR
.PP
Inherits \fBACE_SPIPE_Acceptor\fR.
.PP
.SS Public Methods

.in +1c
.ti -1c
.RI "\fBACE_UPIPE_Acceptor\fR (void)"
.br
.RI "\fIDefault constructor.\fR"
.ti -1c
.RI "\fBACE_UPIPE_Acceptor\fR (const \fBACE_UPIPE_Addr\fR &local_sap, int reuse_addr = 0)"
.br
.RI "\fIInitialize passive endpoint.\fR"
.ti -1c
.RI "int \fBopen\fR (const \fBACE_UPIPE_Addr\fR &local_sap, int reuse_addr = 0)"
.br
.RI "\fIInitialize passive endpoint.\fR"
.ti -1c
.RI "\fB~ACE_UPIPE_Acceptor\fR (void)"
.br
.RI "\fIClose down and release resources.\fR"
.ti -1c
.RI "int \fBclose\fR (void)"
.br
.RI "\fIClose down and release resources.\fR"
.ti -1c
.RI "int \fBremove\fR (void)"
.br
.RI "\fIClose down and release resources and remove the underlying SPIPE rendezvous point.\fR"
.ti -1c
.RI "int \fBaccept\fR (\fBACE_UPIPE_Stream\fR &server_stream, \fBACE_UPIPE_Addr\fR *remote_addr = 0, \fBACE_Time_Value\fR *timeout = 0, int restart = 1, int reset_new_handle = 0)"
.br
.ti -1c
.RI "void \fBdump\fR (void) const"
.br
.RI "\fIDump the state of an object.\fR"
.in -1c
.SS Public Attributes

.in +1c
.ti -1c
.RI "\fBACE_ALLOC_HOOK_DECLARE\fR"
.br
.RI "\fIDeclare the dynamic allocation hooks.\fR"
.in -1c
.SS Private Attributes

.in +1c
.ti -1c
.RI "\fBACE_Thread_Manager\fR \fBtm\fR"
.br
.RI "\fIManage threads.\fR"
.ti -1c
.RI "\fBACE_Message_Block\fR \fBmb_\fR"
.br
.RI "\fITo confirm connection establishment.\fR"
.in -1c
.SH DETAILED DESCRIPTION
.PP 
Defines the format and interface for the listener side of the \fBACE_UPIPE_Stream\fR.
.PP
.SH CONSTRUCTOR & DESTRUCTOR DOCUMENTATION
.PP 
.SS ACE_UPIPE_Acceptor::ACE_UPIPE_Acceptor (void)
.PP
Default constructor.
.PP
.SS ACE_UPIPE_Acceptor::ACE_UPIPE_Acceptor (const \fBACE_UPIPE_Addr\fR & local_sap, int reuse_addr = 0)
.PP
Initialize passive endpoint.
.PP
.SS ACE_UPIPE_Acceptor::~ACE_UPIPE_Acceptor (void)
.PP
Close down and release resources.
.PP
.SH MEMBER FUNCTION DOCUMENTATION
.PP 
.SS int ACE_UPIPE_Acceptor::accept (\fBACE_UPIPE_Stream\fR & server_stream, \fBACE_UPIPE_Addr\fR * remote_addr = 0, \fBACE_Time_Value\fR * timeout = 0, int restart = 1, int reset_new_handle = 0)
.PP
Accept a new data transfer connection. A <timeout> of 0 means block forever, a <timeout> of {0, 0} means poll. <restart> == 1 means "restart if interrupted." 
.SS int ACE_UPIPE_Acceptor::close (void)
.PP
Close down and release resources.
.PP
Reimplemented from \fBACE_SPIPE_Acceptor\fR.
.SS void ACE_UPIPE_Acceptor::dump (void) const
.PP
Dump the state of an object.
.PP
Reimplemented from \fBACE_SPIPE_Acceptor\fR.
.SS int ACE_UPIPE_Acceptor::open (const \fBACE_UPIPE_Addr\fR & local_sap, int reuse_addr = 0)
.PP
Initialize passive endpoint.
.PP
.SS int ACE_UPIPE_Acceptor::remove (void)
.PP
Close down and release resources and remove the underlying SPIPE rendezvous point.
.PP
Reimplemented from \fBACE_SPIPE_Acceptor\fR.
.SH MEMBER DATA DOCUMENTATION
.PP 
.SS ACE_UPIPE_Acceptor::ACE_ALLOC_HOOK_DECLARE
.PP
Declare the dynamic allocation hooks.
.PP
Reimplemented from \fBACE_SPIPE_Acceptor\fR.
.SS \fBACE_Message_Block\fR ACE_UPIPE_Acceptor::mb_\fC [private]\fR
.PP
To confirm connection establishment.
.PP
.SS \fBACE_Thread_Manager\fR ACE_UPIPE_Acceptor::tm\fC [private]\fR
.PP
Manage threads.
.PP


.SH AUTHOR
.PP 
Generated automatically by Doxygen for ACE from the source code.