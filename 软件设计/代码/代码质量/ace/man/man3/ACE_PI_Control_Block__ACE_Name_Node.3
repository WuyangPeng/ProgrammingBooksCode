.TH ACE_PI_Control_Block::ACE_Name_Node 3 "5 Oct 2001" "ACE" \" -*- nroff -*-
.ad l
.nh
.SH NAME
ACE_PI_Control_Block::ACE_Name_Node \- This class supports "named memory regions" within . 
.SH SYNOPSIS
.br
.PP
\fC#include <PI_Malloc.h>\fR
.PP
.SS Public Methods

.in +1c
.ti -1c
.RI "\fBACE_Name_Node\fR (const char *name, char *name_ptr, char *pointer, ACE_Name_Node *head)"
.br
.RI "\fIConstructor.\fR"
.ti -1c
.RI "\fBACE_Name_Node\fR (const ACE_Name_Node &)"
.br
.RI "\fICopy constructor.\fR"
.ti -1c
.RI "\fBACE_Name_Node\fR (void)"
.br
.RI "\fIConstructor.\fR"
.ti -1c
.RI "\fB~ACE_Name_Node\fR (void)"
.br
.RI "\fIConstructor.\fR"
.ti -1c
.RI "const char* \fBname\fR (void) const"
.br
.RI "\fIReturn a pointer to the name of this node.\fR"
.ti -1c
.RI "void \fBname\fR (const char *)"
.br
.RI "\fIAssign a name;.\fR"
.ti -1c
.RI "void \fBdump\fR (void) const"
.br
.RI "\fIDump the state of the object.\fR"
.in -1c
.SS Public Attributes

.in +1c
.ti -1c
.RI "\fBCHAR_PTR\fR \fBname_\fR"
.br
.RI "\fIName of the Node.\fR"
.ti -1c
.RI "\fBCHAR_PTR\fR \fBpointer_\fR"
.br
.RI "\fIPointer to the contents.\fR"
.ti -1c
.RI "\fBNAME_NODE_PTR\fR \fBnext_\fR"
.br
.RI "\fIPointer to the next node in the doubly-linked list.\fR"
.ti -1c
.RI "\fBNAME_NODE_PTR\fR \fBprev_\fR"
.br
.RI "\fIPointer to the previous node in the doubly-linked list.\fR"
.in -1c
.SS Static Public Methods

.in +1c
.ti -1c
.RI "void \fBinit_ptr\fR (\fBNAME_NODE_PTR\fR *ptr, ACE_Name_Node *init, void *base_addr)"
.br
.RI "\fIInitialize a name node pointer.\fR"
.in -1c
.SS Private Methods

.in +1c
.ti -1c
.RI "void \fBoperator=\fR (const ACE_Name_Node &)"
.br
.in -1c
.SH DETAILED DESCRIPTION
.PP 
This class supports "named memory regions" within .
.PP
.PP
 Internally, the named memory regions are stored as a doubly-linked list within the <Memory_Pool>. This makes it easy to iterate over the items in the list in both FIFO and LIFO order. 
.PP
.SH CONSTRUCTOR & DESTRUCTOR DOCUMENTATION
.PP 
.SS ACE_PI_Control_Block::ACE_Name_Node::ACE_Name_Node (const char * name, char * name_ptr, char * pointer, ACE_Name_Node * head)
.PP
Constructor.
.PP
.SS ACE_PI_Control_Block::ACE_Name_Node::ACE_Name_Node (const ACE_Name_Node &)
.PP
Copy constructor.
.PP
.SS ACE_PI_Control_Block::ACE_Name_Node::ACE_Name_Node (void)
.PP
Constructor.
.PP
.SS ACE_PI_Control_Block::ACE_Name_Node::~ACE_Name_Node (void)
.PP
Constructor.
.PP
.SH MEMBER FUNCTION DOCUMENTATION
.PP 
.SS void ACE_PI_Control_Block::ACE_Name_Node::dump (void) const
.PP
Dump the state of the object.
.PP
.SS void ACE_PI_Control_Block::ACE_Name_Node::init_ptr (\fBNAME_NODE_PTR\fR * ptr, ACE_Name_Node * init, void * base_addr)\fC [static]\fR
.PP
Initialize a name node pointer.
.PP
.SS void ACE_PI_Control_Block::ACE_Name_Node::name (const char *)
.PP
Assign a name;.
.PP
.SS const char * ACE_PI_Control_Block::ACE_Name_Node::name (void) const
.PP
Return a pointer to the name of this node.
.PP
.SS void ACE_PI_Control_Block::ACE_Name_Node::operator= (const ACE_Name_Node &)\fC [private]\fR
.PP
.SH MEMBER DATA DOCUMENTATION
.PP 
.SS \fBCHAR_PTR\fR ACE_PI_Control_Block::ACE_Name_Node::name_
.PP
Name of the Node.
.PP
.SS \fBNAME_NODE_PTR\fR ACE_PI_Control_Block::ACE_Name_Node::next_
.PP
Pointer to the next node in the doubly-linked list.
.PP
.SS \fBCHAR_PTR\fR ACE_PI_Control_Block::ACE_Name_Node::pointer_
.PP
Pointer to the contents.
.PP
.SS \fBNAME_NODE_PTR\fR ACE_PI_Control_Block::ACE_Name_Node::prev_
.PP
Pointer to the previous node in the doubly-linked list.
.PP


.SH AUTHOR
.PP 
Generated automatically by Doxygen for ACE from the source code.