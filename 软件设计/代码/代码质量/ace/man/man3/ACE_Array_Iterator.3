.TH ACE_Array_Iterator 3 "5 Oct 2001" "ACE" \" -*- nroff -*-
.ad l
.nh
.SH NAME
ACE_Array_Iterator \- Implement an iterator over an \fBACE_Array\fR. 
.SH SYNOPSIS
.br
.PP
\fC#include <Array_Base.h>\fR
.PP
.SS Public Methods

.in +1c
.ti -1c
.RI "\fBACE_Array_Iterator\fR (\fBACE_Array_Base\fR<T> &)"
.br
.ti -1c
.RI "int \fBnext\fR (T *&next_item)"
.br
.RI "\fIPass back the <next_item> that hasn't been seen in the Array. Returns 0 when all items have been seen, else 1.\fR"
.ti -1c
.RI "int \fBadvance\fR (void)"
.br
.RI "\fIMove forward by one element in the Array. Returns 0 when all the items in the Array have been seen, else 1.\fR"
.ti -1c
.RI "int \fBdone\fR (void) const"
.br
.RI "\fIReturns 1 when all items have been seen, else 0.\fR"
.ti -1c
.RI "void \fBdump\fR (void) const"
.br
.RI "\fIDump the state of an object.\fR"
.in -1c
.SS Public Attributes

.in +1c
.ti -1c
.RI "\fBACE_ALLOC_HOOK_DECLARE\fR"
.br
.RI "\fIDeclare the dynamic allocation hooks.\fR"
.in -1c
.SS Private Attributes

.in +1c
.ti -1c
.RI "size_t \fBcurrent_\fR"
.br
.RI "\fIPointer to the current item in the iteration.\fR"
.ti -1c
.RI "\fBACE_Array_Base\fR<T>& \fBarray_\fR"
.br
.RI "\fIPointer to the Array we're iterating over.\fR"
.in -1c
.SH DETAILED DESCRIPTION
.PP 

.SS template<class T>  template class ACE_Array_Iterator
Implement an iterator over an \fBACE_Array\fR.
.PP
.PP
 This iterator is safe in the face of array element deletions. But it is NOT safe if the array is resized (via the \fBACE_Array\fR assignment operator) during iteration. That would be very odd, and dangerous. 
.PP
.SH CONSTRUCTOR & DESTRUCTOR DOCUMENTATION
.PP 
.SS template<classT> ACE_Array_Iterator<T>::ACE_Array_Iterator<T> (\fBACE_Array_Base\fR< T >&)
.PP
.SH MEMBER FUNCTION DOCUMENTATION
.PP 
.SS template<classT> int ACE_Array_Iterator<T>::advance (void)
.PP
Move forward by one element in the Array. Returns 0 when all the items in the Array have been seen, else 1.
.PP
.SS template<classT> int ACE_Array_Iterator<T>::done (void) const
.PP
Returns 1 when all items have been seen, else 0.
.PP
.SS template<classT> void ACE_Array_Iterator<T>::dump (void) const
.PP
Dump the state of an object.
.PP
.SS template<classT> int ACE_Array_Iterator<T>::next (T *& next_item)
.PP
Pass back the <next_item> that hasn't been seen in the Array. Returns 0 when all items have been seen, else 1.
.PP
.SH MEMBER DATA DOCUMENTATION
.PP 
.SS template<classT> ACE_Array_Iterator<T>::ACE_ALLOC_HOOK_DECLARE
.PP
Declare the dynamic allocation hooks.
.PP
.SS template<classT> \fBACE_Array_Base\fR< T >& ACE_Array_Iterator<T>::array_\fC [private]\fR
.PP
Pointer to the Array we're iterating over.
.PP
.SS template<classT> size_t ACE_Array_Iterator<T>::current_\fC [private]\fR
.PP
Pointer to the current item in the iteration.
.PP


.SH AUTHOR
.PP 
Generated automatically by Doxygen for ACE from the source code.