.TH ACE_RB_Tree_Node 3 "5 Oct 2001" "ACE" \" -*- nroff -*-
.ad l
.nh
.SH NAME
ACE_RB_Tree_Node \- Implements a node in a Red-Black Tree ADT. 
.SH SYNOPSIS
.br
.PP
\fC#include <RB_Tree.h>\fR
.PP
Inherits \fBACE_RB_Tree_Node_Base\fR.
.PP
.SS Public Methods

.in +1c
.ti -1c
.RI "\fBACE_RB_Tree_Node\fR (const EXT_ID &k, const INT_ID &t)"
.br
.RI "\fIConstructor.\fR"
.ti -1c
.RI "\fB~ACE_RB_Tree_Node\fR (void)"
.br
.RI "\fIDestructor.\fR"
.ti -1c
.RI "EXT_ID& \fBkey\fR (void)"
.br
.RI "\fIKey accessor.\fR"
.ti -1c
.RI "INT_ID& \fBitem\fR (void)"
.br
.RI "\fIItem accessor.\fR"
.ti -1c
.RI "void \fBcolor\fR (\fBRB_Tree_Node_Color\fR c)"
.br
.RI "\fISet color of the node.\fR"
.ti -1c
.RI "\fBRB_Tree_Node_Color\fR \fBcolor\fR (void)"
.br
.RI "\fIGet color of the node.\fR"
.ti -1c
.RI "ACE_RB_Tree_Node<EXT_ID, INT_ID>* \fBparent\fR (void)"
.br
.RI "\fIAccessor for node's parent pointer.\fR"
.ti -1c
.RI "void \fBparent\fR (ACE_RB_Tree_Node<EXT_ID, INT_ID> * p)"
.br
.RI "\fIMutator for node's parent pointer.\fR"
.ti -1c
.RI "ACE_RB_Tree_Node<EXT_ID, INT_ID>* \fBleft\fR (void)"
.br
.RI "\fIAccessor for node's left child pointer.\fR"
.ti -1c
.RI "void \fBleft\fR (ACE_RB_Tree_Node<EXT_ID, INT_ID> *l)"
.br
.RI "\fIMutator for node's left child pointer.\fR"
.ti -1c
.RI "ACE_RB_Tree_Node<EXT_ID, INT_ID>* \fBright\fR (void)"
.br
.RI "\fIAccessor for node's right child pointer.\fR"
.ti -1c
.RI "void \fBright\fR (ACE_RB_Tree_Node<EXT_ID, INT_ID> * r)"
.br
.RI "\fIMutator for node's right child pointer.\fR"
.in -1c
.SS Private Attributes

.in +1c
.ti -1c
.RI "EXT_ID \fBk_\fR"
.br
.RI "\fIThe key.\fR"
.ti -1c
.RI "INT_ID \fBt_\fR"
.br
.RI "\fIThe item.\fR"
.ti -1c
.RI "\fBRB_Tree_Node_Color\fR \fBcolor_\fR"
.br
.RI "\fIColor of the node.\fR"
.ti -1c
.RI "ACE_RB_Tree_Node<EXT_ID, INT_ID>* \fBparent_\fR"
.br
.RI "\fIPointer to node's parent.\fR"
.ti -1c
.RI "ACE_RB_Tree_Node<EXT_ID, INT_ID>* \fBleft_\fR"
.br
.RI "\fIPointer to node's left child.\fR"
.ti -1c
.RI "ACE_RB_Tree_Node<EXT_ID, INT_ID>* \fBright_\fR"
.br
.RI "\fIPointer to node's right child.\fR"
.in -1c
.SH DETAILED DESCRIPTION
.PP 

.SS template<class EXT_ID, class INT_ID>  template class ACE_RB_Tree_Node
Implements a node in a Red-Black Tree ADT.
.PP
.SH CONSTRUCTOR & DESTRUCTOR DOCUMENTATION
.PP 
.SS template<classEXT_ID, classINT_ID> ACE_RB_Tree_Node<EXT_ID, INT_ID>::ACE_RB_Tree_Node<EXT_ID, INT_ID> (const EXT_ID & k, const INT_ID & t)
.PP
Constructor.
.PP
.SS template<classEXT_ID, classINT_ID> ACE_RB_Tree_Node<EXT_ID, INT_ID>::~ACE_RB_Tree_Node<EXT_ID, INT_ID> (void)
.PP
Destructor.
.PP
.SH MEMBER FUNCTION DOCUMENTATION
.PP 
.SS template<classEXT_ID, classINT_ID> \fBRB_Tree_Node_Color\fR ACE_RB_Tree_Node<EXT_ID, INT_ID>::color (void)
.PP
Get color of the node.
.PP
.SS template<classEXT_ID, classINT_ID> void ACE_RB_Tree_Node<EXT_ID, INT_ID>::color (\fBRB_Tree_Node_Color\fR c)
.PP
Set color of the node.
.PP
.SS template<classEXT_ID, classINT_ID> INT_ID & ACE_RB_Tree_Node<EXT_ID, INT_ID>::item (void)
.PP
Item accessor.
.PP
.SS template<classEXT_ID, classINT_ID> EXT_ID & ACE_RB_Tree_Node<EXT_ID, INT_ID>::key (void)
.PP
Key accessor.
.PP
.SS template<classEXT_ID, classINT_ID> void ACE_RB_Tree_Node<EXT_ID, INT_ID>::left (ACE_RB_Tree_Node< EXT_ID,INT_ID >* l)
.PP
Mutator for node's left child pointer.
.PP
.SS template<classEXT_ID, classINT_ID> ACE_RB_Tree_Node< EXT_ID,INT_ID >* ACE_RB_Tree_Node<EXT_ID, INT_ID>::left (void)
.PP
Accessor for node's left child pointer.
.PP
.SS template<classEXT_ID, classINT_ID> void ACE_RB_Tree_Node<EXT_ID, INT_ID>::parent (ACE_RB_Tree_Node< EXT_ID,INT_ID >* p)
.PP
Mutator for node's parent pointer.
.PP
.SS template<classEXT_ID, classINT_ID> ACE_RB_Tree_Node< EXT_ID,INT_ID >* ACE_RB_Tree_Node<EXT_ID, INT_ID>::parent (void)
.PP
Accessor for node's parent pointer.
.PP
.SS template<classEXT_ID, classINT_ID> void ACE_RB_Tree_Node<EXT_ID, INT_ID>::right (ACE_RB_Tree_Node< EXT_ID,INT_ID >* r)
.PP
Mutator for node's right child pointer.
.PP
.SS template<classEXT_ID, classINT_ID> ACE_RB_Tree_Node< EXT_ID,INT_ID >* ACE_RB_Tree_Node<EXT_ID, INT_ID>::right (void)
.PP
Accessor for node's right child pointer.
.PP
.SH MEMBER DATA DOCUMENTATION
.PP 
.SS template<classEXT_ID, classINT_ID> \fBRB_Tree_Node_Color\fR ACE_RB_Tree_Node<EXT_ID, INT_ID>::color_\fC [private]\fR
.PP
Color of the node.
.PP
.SS template<classEXT_ID, classINT_ID> EXT_ID ACE_RB_Tree_Node<EXT_ID, INT_ID>::k_\fC [private]\fR
.PP
The key.
.PP
.SS template<classEXT_ID, classINT_ID> ACE_RB_Tree_Node< EXT_ID,INT_ID >* ACE_RB_Tree_Node<EXT_ID, INT_ID>::left_\fC [private]\fR
.PP
Pointer to node's left child.
.PP
.SS template<classEXT_ID, classINT_ID> ACE_RB_Tree_Node< EXT_ID,INT_ID >* ACE_RB_Tree_Node<EXT_ID, INT_ID>::parent_\fC [private]\fR
.PP
Pointer to node's parent.
.PP
.SS template<classEXT_ID, classINT_ID> ACE_RB_Tree_Node< EXT_ID,INT_ID >* ACE_RB_Tree_Node<EXT_ID, INT_ID>::right_\fC [private]\fR
.PP
Pointer to node's right child.
.PP
.SS template<classEXT_ID, classINT_ID> INT_ID ACE_RB_Tree_Node<EXT_ID, INT_ID>::t_\fC [private]\fR
.PP
The item.
.PP


.SH AUTHOR
.PP 
Generated automatically by Doxygen for ACE from the source code.