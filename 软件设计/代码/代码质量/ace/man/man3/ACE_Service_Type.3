.TH ACE_Service_Type 3 "5 Oct 2001" "ACE" \" -*- nroff -*-
.ad l
.nh
.SH NAME
ACE_Service_Type \- Keeps track of information related to the various  subclasses. 
.SH SYNOPSIS
.br
.PP
\fC#include <Service_Object.h>\fR
.PP
.SS Public Types

.in +1c
.ti -1c
.RI "enum { \fBDELETE_OBJ\fR = 1, \fBDELETE_THIS\fR = 2 }"
.br
.in -1c
.SS Public Methods

.in +1c
.ti -1c
.RI "\fBACE_Service_Type\fR (const \fBACE_TCHAR\fR *n, \fBACE_Service_Type_Impl\fR *o, const \fBACE_SHLIB_HANDLE\fR handle, int active)"
.br
.ti -1c
.RI "\fB~ACE_Service_Type\fR (void)"
.br
.ti -1c
.RI "const \fBACE_TCHAR\fR* \fBname\fR (void) const"
.br
.ti -1c
.RI "void \fBname\fR (const \fBACE_TCHAR\fR *)"
.br
.ti -1c
.RI "const \fBACE_Service_Type_Impl\fR* \fBtype\fR (void) const"
.br
.ti -1c
.RI "void \fBtype\fR (const \fBACE_Service_Type_Impl\fR *, int active = 1)"
.br
.ti -1c
.RI "\fBACE_SHLIB_HANDLE\fR \fBhandle\fR (void) const"
.br
.ti -1c
.RI "void \fBhandle\fR (const \fBACE_SHLIB_HANDLE\fR)"
.br
.ti -1c
.RI "void \fBsuspend\fR (void) const"
.br
.ti -1c
.RI "void \fBresume\fR (void) const"
.br
.ti -1c
.RI "int \fBactive\fR (void) const"
.br
.ti -1c
.RI "void \fBactive\fR (int)"
.br
.ti -1c
.RI "void \fBfini\fR (void)"
.br
.RI "\fICalls <fini> on <type_>.\fR"
.ti -1c
.RI "int \fBfini_called\fR (void) const"
.br
.RI "\fICheck if the service has been fini'ed.\fR"
.ti -1c
.RI "void \fBdump\fR (void) const"
.br
.RI "\fIDump the state of an object.\fR"
.in -1c
.SS Public Attributes

.in +1c
.ti -1c
.RI "\fBACE_ALLOC_HOOK_DECLARE\fR"
.br
.RI "\fIDeclare the dynamic allocation hooks.\fR"
.in -1c
.SS Private Attributes

.in +1c
.ti -1c
.RI "const \fBACE_TCHAR\fR* \fBname_\fR"
.br
.RI "\fIHumanly readible name of svc.\fR"
.ti -1c
.RI "const \fBACE_Service_Type_Impl\fR* \fBtype_\fR"
.br
.RI "\fIPointer to C++ object that implements the svc.\fR"
.ti -1c
.RI "\fBACE_SHLIB_HANDLE\fR \fBhandle_\fR"
.br
.RI "\fIHandle to shared object file (non-zero if dynamically linked).\fR"
.ti -1c
.RI "int \fBactive_\fR"
.br
.RI "\fI1 if svc is currently active, otherwise 0.\fR"
.ti -1c
.RI "int \fBfini_already_called_\fR"
.br
.RI "\fI1 if <fini> on <type_> has already been called, otherwise 0.\fR"
.in -1c
.SH DETAILED DESCRIPTION
.PP 
Keeps track of information related to the various  subclasses.
.PP
.PP
 This class acts as the interface of the "Bridge" pattern. 
.PP
.SH MEMBER ENUMERATION DOCUMENTATION
.PP 
.SS anonymous enum
.PP
\fBEnumeration values:\fR
.in +1c
.TP
\fB\fIDELETE_OBJ\fR \fRDelete the payload object.
.TP
\fB\fIDELETE_THIS\fR \fRDelete the enclosing object.
.SH CONSTRUCTOR & DESTRUCTOR DOCUMENTATION
.PP 
.SS ACE_Service_Type::ACE_Service_Type (const \fBACE_TCHAR\fR * n, \fBACE_Service_Type_Impl\fR * o, const \fBACE_SHLIB_HANDLE\fR handle, int active)
.PP
.SS ACE_Service_Type::~ACE_Service_Type (void)
.PP
.SH MEMBER FUNCTION DOCUMENTATION
.PP 
.SS void ACE_Service_Type::active (int)
.PP
.SS int ACE_Service_Type::active (void) const
.PP
.SS void ACE_Service_Type::dump (void) const
.PP
Dump the state of an object.
.PP
.SS void ACE_Service_Type::fini (void)
.PP
Calls <fini> on <type_>.
.PP
.SS int ACE_Service_Type::fini_called (void) const
.PP
Check if the service has been fini'ed.
.PP
.SS void ACE_Service_Type::handle (const ACE_SHLIB_HANDLE)
.PP
.SS \fBACE_SHLIB_HANDLE\fR ACE_Service_Type::handle (void) const
.PP
.SS void ACE_Service_Type::name (const \fBACE_TCHAR\fR *)
.PP
.SS const \fBACE_TCHAR\fR* ACE_Service_Type::name (void) const
.PP
.SS void ACE_Service_Type::resume (void) const
.PP
.SS void ACE_Service_Type::suspend (void) const
.PP
.SS void ACE_Service_Type::type (const \fBACE_Service_Type_Impl\fR *, int active = 1)
.PP
.SS const \fBACE_Service_Type_Impl\fR* ACE_Service_Type::type (void) const
.PP
.SH MEMBER DATA DOCUMENTATION
.PP 
.SS ACE_Service_Type::ACE_ALLOC_HOOK_DECLARE
.PP
Declare the dynamic allocation hooks.
.PP
.SS int ACE_Service_Type::active_\fC [private]\fR
.PP
1 if svc is currently active, otherwise 0.
.PP
.SS int ACE_Service_Type::fini_already_called_\fC [private]\fR
.PP
1 if <fini> on <type_> has already been called, otherwise 0.
.PP
.SS \fBACE_SHLIB_HANDLE\fR ACE_Service_Type::handle_\fC [private]\fR
.PP
Handle to shared object file (non-zero if dynamically linked).
.PP
.SS const \fBACE_TCHAR\fR * ACE_Service_Type::name_\fC [private]\fR
.PP
Humanly readible name of svc.
.PP
.SS const \fBACE_Service_Type_Impl\fR * ACE_Service_Type::type_\fC [private]\fR
.PP
Pointer to C++ object that implements the svc.
.PP


.SH AUTHOR
.PP 
Generated automatically by Doxygen for ACE from the source code.