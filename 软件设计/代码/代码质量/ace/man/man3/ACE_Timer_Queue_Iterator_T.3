.TH ACE_Timer_Queue_Iterator_T 3 "5 Oct 2001" "ACE" \" -*- nroff -*-
.ad l
.nh
.SH NAME
ACE_Timer_Queue_Iterator_T \- Generic interface for iterating over a subclass of . 
.SH SYNOPSIS
.br
.PP
\fC#include <Timer_Queue_T.h>\fR
.PP
Inherited by \fBACE_Timer_Hash_Iterator_T\fR, \fBACE_Timer_Heap_Iterator_T\fR, \fBACE_Timer_List_Iterator_T\fR, and \fBACE_Timer_Wheel_Iterator_T\fR.
.PP
.SS Public Methods

.in +1c
.ti -1c
.RI "\fBACE_Timer_Queue_Iterator_T\fR (void)"
.br
.RI "\fIConstructor.\fR"
.ti -1c
.RI "virtual \fB~ACE_Timer_Queue_Iterator_T\fR (void)"
.br
.RI "\fIDestructor.\fR"
.ti -1c
.RI "virtual void \fBfirst\fR (void) = 0"
.br
.RI "\fIPositions the iterator at the earliest node in the Timer Queue.\fR"
.ti -1c
.RI "virtual void \fBnext\fR (void) = 0"
.br
.RI "\fIPositions the iterator at the next node in the Timer Queue.\fR"
.ti -1c
.RI "virtual int \fBisdone\fR (void) const = 0"
.br
.RI "\fIReturns true when there are no more nodes in the sequence.\fR"
.ti -1c
.RI "virtual \fBACE_Timer_Node_T\fR<TYPE>* \fBitem\fR (void) = 0"
.br
.RI "\fIReturns the node at the current position in the sequence.\fR"
.in -1c
.SH DETAILED DESCRIPTION
.PP 

.SS template<class TYPE, class FUNCTOR, class ACE_LOCK>  template class ACE_Timer_Queue_Iterator_T
Generic interface for iterating over a subclass of .
.PP
.PP
 This is a generic iterator that can be used to visit every node of a timer queue. Be aware that it isn't guaranteed that the transversal will be in order of timeout values. 
.PP
.SH CONSTRUCTOR & DESTRUCTOR DOCUMENTATION
.PP 
.SS template<classTYPE, classFUNCTOR, classACE_LOCK> ACE_Timer_Queue_Iterator_T<TYPE, FUNCTOR, ACE_LOCK>::ACE_Timer_Queue_Iterator_T<TYPE, FUNCTOR, ACE_LOCK> (void)
.PP
Constructor.
.PP
.SS template<classTYPE, classFUNCTOR, classACE_LOCK> ACE_Timer_Queue_Iterator_T<TYPE, FUNCTOR, ACE_LOCK>::~ACE_Timer_Queue_Iterator_T<TYPE, FUNCTOR, ACE_LOCK> (void)\fC [virtual]\fR
.PP
Destructor.
.PP
.SH MEMBER FUNCTION DOCUMENTATION
.PP 
.SS template<classTYPE, classFUNCTOR, classACE_LOCK> void ACE_Timer_Queue_Iterator_T<TYPE, FUNCTOR, ACE_LOCK>::first (void)\fC [pure virtual]\fR
.PP
Positions the iterator at the earliest node in the Timer Queue.
.PP
Reimplemented in \fBACE_Timer_Hash_Iterator_T\fR, \fBACE_Timer_Heap_Iterator_T\fR, \fBACE_Timer_List_Iterator_T\fR, and \fBACE_Timer_Wheel_Iterator_T\fR.
.SS template<classTYPE, classFUNCTOR, classACE_LOCK> int ACE_Timer_Queue_Iterator_T<TYPE, FUNCTOR, ACE_LOCK>::isdone (void) const\fC [pure virtual]\fR
.PP
Returns true when there are no more nodes in the sequence.
.PP
Reimplemented in \fBACE_Timer_Hash_Iterator_T\fR, \fBACE_Timer_Heap_Iterator_T\fR, \fBACE_Timer_List_Iterator_T\fR, and \fBACE_Timer_Wheel_Iterator_T\fR.
.SS template<classTYPE, classFUNCTOR, classACE_LOCK> \fBACE_Timer_Node_T\fR< TYPE >* ACE_Timer_Queue_Iterator_T<TYPE, FUNCTOR, ACE_LOCK>::item (void)\fC [pure virtual]\fR
.PP
Returns the node at the current position in the sequence.
.PP
Reimplemented in \fBACE_Timer_Hash_Iterator_T\fR, \fBACE_Timer_Heap_Iterator_T\fR, \fBACE_Timer_List_Iterator_T\fR, and \fBACE_Timer_Wheel_Iterator_T\fR.
.SS template<classTYPE, classFUNCTOR, classACE_LOCK> void ACE_Timer_Queue_Iterator_T<TYPE, FUNCTOR, ACE_LOCK>::next (void)\fC [pure virtual]\fR
.PP
Positions the iterator at the next node in the Timer Queue.
.PP
Reimplemented in \fBACE_Timer_Hash_Iterator_T\fR, \fBACE_Timer_Heap_Iterator_T\fR, \fBACE_Timer_List_Iterator_T\fR, and \fBACE_Timer_Wheel_Iterator_T\fR.

.SH AUTHOR
.PP 
Generated automatically by Doxygen for ACE from the source code.