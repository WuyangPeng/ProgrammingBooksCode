.TH ACE_Based_Pointer 3 "5 Oct 2001" "ACE" \" -*- nroff -*-
.ad l
.nh
.SH NAME
ACE_Based_Pointer \- A smart proxy that keeps track of the relative offset of a "pointer" from its base address. 
.SH SYNOPSIS
.br
.PP
\fC#include <Based_Pointer_T.h>\fR
.PP
Inherits \fBACE_Based_Pointer_Basic< CONCRETE >\fR.
.PP
.SS Public Methods

.in +1c
.ti -1c
.RI "\fBACE_Based_Pointer\fR (void)"
.br
.RI "\fIConstructor. See constructor for  for details.\fR"
.ti -1c
.RI "\fBACE_Based_Pointer\fR (CONCRETE *initial)"
.br
.RI "\fIInitialize this object using the <initial> pointer. See constructor for  for details.\fR"
.ti -1c
.RI "\fBACE_Based_Pointer\fR (const void *base_addr, int dummy)"
.br
.RI "\fIInitialize this object with known <base_addr>. <dummy> is a dummy value used to resolve overload ambiguity and it otherwise ignored.\fR"
.ti -1c
.RI "\fBACE_Based_Pointer\fR (const ACE_Based_Pointer<CONCRETE> &)"
.br
.RI "\fICopy constructor (not implemented yet).\fR"
.ti -1c
.RI "void \fBoperator=\fR (const ACE_Based_Pointer<CONCRETE> &)"
.br
.RI "\fIAssignment operator.\fR"
.ti -1c
.RI "void \fBoperator=\fR (CONCRETE *from)"
.br
.RI "\fIPseudo-assignment operator.\fR"
.ti -1c
.RI "CONCRETE* \fBoperator->\fR (void)"
.br
.RI "\fIThe C++ "delegation operator".\fR"
.in -1c
.SH DETAILED DESCRIPTION
.PP 

.SS template<class CONCRETE>  template class ACE_Based_Pointer
A smart proxy that keeps track of the relative offset of a "pointer" from its base address.
.PP
.PP
 This class makes it possible to transparently use "pointers" in shared memory as easily as programming with pointers to local memory by overloading the C++ delegation \fBoperator->\fR(). 
.PP
.SH CONSTRUCTOR & DESTRUCTOR DOCUMENTATION
.PP 
.SS template<classCONCRETE> ACE_Based_Pointer<CONCRETE>::ACE_Based_Pointer<CONCRETE> (void)
.PP
Constructor. See constructor for  for details.
.PP
.SS template<classCONCRETE> ACE_Based_Pointer<CONCRETE>::ACE_Based_Pointer<CONCRETE> (CONCRETE * initial)
.PP
Initialize this object using the <initial> pointer. See constructor for  for details.
.PP
.SS template<classCONCRETE> ACE_Based_Pointer<CONCRETE>::ACE_Based_Pointer<CONCRETE> (const void * base_addr, int dummy)
.PP
Initialize this object with known <base_addr>. <dummy> is a dummy value used to resolve overload ambiguity and it otherwise ignored.
.PP
.SS template<classCONCRETE> ACE_Based_Pointer<CONCRETE>::ACE_Based_Pointer<CONCRETE> (const ACE_Based_Pointer< CONCRETE >&)
.PP
Copy constructor (not implemented yet).
.PP
.SH MEMBER FUNCTION DOCUMENTATION
.PP 
.SS template<classCONCRETE> CONCRETE * ACE_Based_Pointer<CONCRETE>::operator-> (void)
.PP
The C++ "delegation operator".
.PP
.SS template<classCONCRETE> void ACE_Based_Pointer<CONCRETE>::operator= (CONCRETE * from)
.PP
Pseudo-assignment operator.
.PP
Reimplemented from \fBACE_Based_Pointer_Basic\fR.
.SS template<classCONCRETE> void ACE_Based_Pointer<CONCRETE>::operator= (const ACE_Based_Pointer< CONCRETE >&)
.PP
Assignment operator.
.PP


.SH AUTHOR
.PP 
Generated automatically by Doxygen for ACE from the source code.