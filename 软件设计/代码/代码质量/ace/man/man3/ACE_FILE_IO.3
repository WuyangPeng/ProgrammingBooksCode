.TH ACE_FILE_IO 3 "5 Oct 2001" "ACE" \" -*- nroff -*-
.ad l
.nh
.SH NAME
ACE_FILE_IO \- Read/Write operations on Files. 
.SH SYNOPSIS
.br
.PP
\fC#include <FILE_IO.h>\fR
.PP
Inherits \fBACE_FILE\fR.
.PP
.SS Public Types

.in +1c
.ti -1c
.RI "typedef \fBACE_FILE_Addr\fR \fBPEER_ADDR\fR"
.br
.in -1c
.SS Public Methods

.in +1c
.ti -1c
.RI "\fBACE_FILE_IO\fR (void)"
.br
.RI "\fIDefault constructor.\fR"
.ti -1c
.RI "\fBssize_t\fR \fBsend\fR (const void *buf, size_t n) const"
.br
.RI "\fIsend upto <n> bytes in <buf>.\fR"
.ti -1c
.RI "\fBssize_t\fR \fBrecv\fR (void *buf, size_t n) const"
.br
.RI "\fIRecv upto <n> bytes in <buf>.\fR"
.ti -1c
.RI "\fBssize_t\fR \fBsend_n\fR (const void *buf, size_t n) const"
.br
.RI "\fISend n bytes, keep trying until n are sent.\fR"
.ti -1c
.RI "\fBssize_t\fR \fBsend_n\fR (const \fBACE_Message_Block\fR *message_block, const \fBACE_Time_Value\fR *timeout = 0, size_t *bytes_transferred = 0)"
.br
.RI "\fISend all the <message_block>s chained through their <next> and <cont> pointers. This call uses the underlying OS gather-write operation to reduce the domain-crossing penalty.\fR"
.ti -1c
.RI "\fBssize_t\fR \fBrecv_n\fR (void *buf, size_t n) const"
.br
.RI "\fIRecv n bytes, keep trying until n are received.\fR"
.ti -1c
.RI "\fBssize_t\fR \fBsend\fR (const \fBiovec\fR iov[], size_t n) const"
.br
.RI "\fISend iovecs via <writev>.\fR"
.ti -1c
.RI "\fBssize_t\fR \fBrecv\fR (\fBiovec\fR iov[], size_t n) const"
.br
.RI "\fIRecv iovecs via <readv>.\fR"
.ti -1c
.RI "\fBssize_t\fR \fBsend\fR (size_t n, ...) const"
.br
.ti -1c
.RI "\fBssize_t\fR \fBrecv\fR (size_t n, ...) const"
.br
.ti -1c
.RI "\fBssize_t\fR \fBsend\fR (const void *buf, size_t n, \fBACE_OVERLAPPED\fR *overlapped) const"
.br
.RI "\fISend <n> bytes via Win32 WriteFile using overlapped I/O.\fR"
.ti -1c
.RI "\fBssize_t\fR \fBrecv\fR (void *buf, size_t n, \fBACE_OVERLAPPED\fR *overlapped) const"
.br
.RI "\fIRecv <n> bytes via Win32 ReadFile using overlapped I/O.\fR"
.ti -1c
.RI "\fBssize_t\fR \fBsendv\fR (const \fBiovec\fR iov[], size_t n) const"
.br
.RI "\fISend an <\fBiovec\fR> of size <n> to the file.\fR"
.ti -1c
.RI "\fBssize_t\fR \fBrecvv\fR (\fBiovec\fR *io_vec)"
.br
.ti -1c
.RI "\fBssize_t\fR \fBsendv_n\fR (const \fBiovec\fR iov[], size_t n) const"
.br
.RI "\fISend an <\fBiovec\fR> of size <n> to the file. Will block until all bytes are sent or an error occurs.\fR"
.ti -1c
.RI "\fBssize_t\fR \fBrecvv_n\fR (\fBiovec\fR iov[], size_t n) const"
.br
.RI "\fIReceive an <\fBiovec\fR> of size <n> to the file.\fR"
.ti -1c
.RI "void \fBdump\fR (void) const"
.br
.RI "\fIDump the state of an object.\fR"
.in -1c
.SS Public Attributes

.in +1c
.ti -1c
.RI "\fBACE_ALLOC_HOOK_DECLARE\fR"
.br
.RI "\fIDeclare the dynamic allocation hooks.\fR"
.in -1c
.SS Friends

.in +1c
.ti -1c
.RI "class \fBACE_FILE_Connector\fR"
.br
.in -1c
.SH DETAILED DESCRIPTION
.PP 
Read/Write operations on Files.
.PP
.SH MEMBER TYPEDEF DOCUMENTATION
.PP 
.SS typedef \fBACE_FILE_Addr\fR ACE_FILE_IO::PEER_ADDR
.PP
.SH CONSTRUCTOR & DESTRUCTOR DOCUMENTATION
.PP 
.SS ACE_FILE_IO::ACE_FILE_IO (void)
.PP
Default constructor.
.PP
.SH MEMBER FUNCTION DOCUMENTATION
.PP 
.SS void ACE_FILE_IO::dump (void) const
.PP
Dump the state of an object.
.PP
Reimplemented from \fBACE_FILE\fR.
.SS \fBssize_t\fR ACE_FILE_IO::recv (void * buf, size_t n, \fBACE_OVERLAPPED\fR * overlapped) const
.PP
Recv <n> bytes via Win32 ReadFile using overlapped I/O.
.PP
.SS \fBssize_t\fR ACE_FILE_IO::recv (size_t n, ...) const
.PP
This is an interface to readv, that doesn't use the struct \fBiovec\fR explicitly. The ... can be passed as an arbitrary number of (char *ptr, int len) tuples. However, the count N is the *total* number of trailing arguments, *not* a couple of the number of tuple pairs! 
.SS \fBssize_t\fR ACE_FILE_IO::recv (\fBiovec\fR iov[], size_t n) const
.PP
Recv iovecs via <readv>.
.PP
.SS \fBssize_t\fR ACE_FILE_IO::recv (void * buf, size_t n) const
.PP
Recv upto <n> bytes in <buf>.
.PP
.SS \fBssize_t\fR ACE_FILE_IO::recv_n (void * buf, size_t n) const
.PP
Recv n bytes, keep trying until n are received.
.PP
.SS \fBssize_t\fR ACE_FILE_IO::recvv (\fBiovec\fR * io_vec)
.PP
Allows a client to read from a file without having to provide a buffer to read. This method determines how much data is in the file, allocates a buffer of this size, reads in the data, and returns the number of bytes read. The caller is responsible for deleting the member in the <iov_base> field of <io_vec> using delete [] io_vec->iov_base. 
.SS \fBssize_t\fR ACE_FILE_IO::recvv_n (\fBiovec\fR iov[], size_t n) const
.PP
Receive an <\fBiovec\fR> of size <n> to the file.
.PP
.SS \fBssize_t\fR ACE_FILE_IO::send (const void * buf, size_t n, \fBACE_OVERLAPPED\fR * overlapped) const
.PP
Send <n> bytes via Win32 WriteFile using overlapped I/O.
.PP
.SS \fBssize_t\fR ACE_FILE_IO::send (size_t n, ...) const
.PP
Send N char *ptrs and int lengths. Note that the char *'s precede the ints (basically, an varargs version of writev). The count N is the *total* number of trailing arguments, *not* a couple of the number of tuple pairs! 
.SS \fBssize_t\fR ACE_FILE_IO::send (const \fBiovec\fR iov[], size_t n) const
.PP
Send iovecs via <writev>.
.PP
.SS \fBssize_t\fR ACE_FILE_IO::send (const void * buf, size_t n) const
.PP
send upto <n> bytes in <buf>.
.PP
.SS \fBssize_t\fR ACE_FILE_IO::send_n (const \fBACE_Message_Block\fR * message_block, const \fBACE_Time_Value\fR * timeout = 0, size_t * bytes_transferred = 0)
.PP
Send all the <message_block>s chained through their <next> and <cont> pointers. This call uses the underlying OS gather-write operation to reduce the domain-crossing penalty.
.PP
.SS \fBssize_t\fR ACE_FILE_IO::send_n (const void * buf, size_t n) const
.PP
Send n bytes, keep trying until n are sent.
.PP
.SS \fBssize_t\fR ACE_FILE_IO::sendv (const \fBiovec\fR iov[], size_t n) const
.PP
Send an <\fBiovec\fR> of size <n> to the file.
.PP
.SS \fBssize_t\fR ACE_FILE_IO::sendv_n (const \fBiovec\fR iov[], size_t n) const
.PP
Send an <\fBiovec\fR> of size <n> to the file. Will block until all bytes are sent or an error occurs.
.PP
.SH FRIENDS AND RELATED FUNCTION DOCUMENTATION
.PP 
.SS class ACE_FILE_Connector\fC [friend]\fR
.PP
.SH MEMBER DATA DOCUMENTATION
.PP 
.SS ACE_FILE_IO::ACE_ALLOC_HOOK_DECLARE
.PP
Declare the dynamic allocation hooks.
.PP
Reimplemented from \fBACE_FILE\fR.

.SH AUTHOR
.PP 
Generated automatically by Doxygen for ACE from the source code.