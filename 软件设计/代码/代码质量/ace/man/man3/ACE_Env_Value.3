.TH ACE_Env_Value 3 "5 Oct 2001" "ACE" \" -*- nroff -*-
.ad l
.nh
.SH NAME
ACE_Env_Value \- Enviroment Variable Value. 
.SH SYNOPSIS
.br
.PP
\fC#include <Env_Value_T.h>\fR
.PP
.SS Public Methods

.in +1c
.ti -1c
.RI "\fBACE_Env_Value\fR (void)"
.br
.ti -1c
.RI "\fBACE_Env_Value\fR (const \fBACE_TCHAR\fR *varname, const T &vardefault)"
.br
.RI "\fIConstructor that calls <open>.\fR"
.ti -1c
.RI "\fB~ACE_Env_Value\fR (void)"
.br
.RI "\fIDestroy the value.\fR"
.ti -1c
.RI "\fBoperator T\fR (void)"
.br
.RI "\fIReturns the value as type T.\fR"
.ti -1c
.RI "void \fBopen\fR (const \fBACE_TCHAR\fR *varname, const T &defval)"
.br
.RI "\fIThe constructor, read <varname> from the enviroment, using <vardefault> as its value if it is not defined.\fR"
.ti -1c
.RI "const \fBACE_TCHAR\fR* \fBvarname\fR (void) const"
.br
.RI "\fIReturns the name of the variable being tracked.\fR"
.in -1c
.SS Private Methods

.in +1c
.ti -1c
.RI "\fBACE_Env_Value\fR (const ACE_Env_Value<T> &)"
.br
.RI "\fIDisallow copying and assignment.\fR"
.ti -1c
.RI "ACE_Env_Value<T> \fBoperator=\fR (const ACE_Env_Value<T> &)"
.br
.ti -1c
.RI "void \fBfetch_value\fR (void)"
.br
.in -1c
.SS Private Attributes

.in +1c
.ti -1c
.RI "const \fBACE_TCHAR\fR* \fBvarname_\fR"
.br
.ti -1c
.RI "T \fBvalue_\fR"
.br
.in -1c
.SH DETAILED DESCRIPTION
.PP 

.SS template<class T>  template class ACE_Env_Value
Enviroment Variable Value.
.PP
.PP
 Reads a variable from the user enviroment, providing a default value. = AUTHOR Chris Cleeland, Carlos O'Ryan 
.PP
.SH CONSTRUCTOR & DESTRUCTOR DOCUMENTATION
.PP 
.SS template<classT> ACE_Env_Value<T>::ACE_Env_Value<T> (void)
.PP
Default constructor which isn't bound to a specific environment variable name or a default value. Before being useful it must <open>'d. 
.SS template<classT> ACE_Env_Value<T>::ACE_Env_Value<T> (const \fBACE_TCHAR\fR * varname, const T & vardefault)
.PP
Constructor that calls <open>.
.PP
.SS template<classT> ACE_Env_Value<T>::~ACE_Env_Value<T> (void)
.PP
Destroy the value.
.PP
.SS template<classT> ACE_Env_Value<T>::ACE_Env_Value<T> (const ACE_Env_Value< T >&)\fC [private]\fR
.PP
Disallow copying and assignment.
.PP
.SH MEMBER FUNCTION DOCUMENTATION
.PP 
.SS template<classT> void ACE_Env_Value<T>::fetch_value (void)\fC [private]\fR
.PP
.SS template<classT> void ACE_Env_Value<T>::open (const \fBACE_TCHAR\fR * varname, const T & defval)
.PP
The constructor, read <varname> from the enviroment, using <vardefault> as its value if it is not defined.
.PP
.SS template<classT> ACE_Env_Value<T>::operator T (void)
.PP
Returns the value as type T.
.PP
.SS template<classT> ACE_Env_Value<T> ACE_Env_Value<T>::operator= (const ACE_Env_Value< T >&)\fC [private]\fR
.PP
.SS template<classT> const \fBACE_TCHAR\fR * ACE_Env_Value<T>::varname (void) const
.PP
Returns the name of the variable being tracked.
.PP
.SH MEMBER DATA DOCUMENTATION
.PP 
.SS template<classT> T ACE_Env_Value<T>::value_\fC [private]\fR
.PP
.SS template<classT> const \fBACE_TCHAR\fR * ACE_Env_Value<T>::varname_\fC [private]\fR
.PP


.SH AUTHOR
.PP 
Generated automatically by Doxygen for ACE from the source code.