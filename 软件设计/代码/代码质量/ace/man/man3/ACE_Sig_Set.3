.TH ACE_Sig_Set 3 "5 Oct 2001" "ACE" \" -*- nroff -*-
.ad l
.nh
.SH NAME
ACE_Sig_Set \- Provide a C++ wrapper for the C sigset_t interface. 
.SH SYNOPSIS
.br
.PP
\fC#include <Signal.h>\fR
.PP
.SS Public Methods

.in +1c
.ti -1c
.RI "\fBACE_Sig_Set\fR (sigset_t *sigset)"
.br
.RI "\fIInitialize <sigset_> with <sigset>. If <sigset> == 0 then fill the set.\fR"
.ti -1c
.RI "\fBACE_Sig_Set\fR (ACE_Sig_Set *sigset)"
.br
.RI "\fIInitialize <sigset_> with <sigset>. If <sigset> == 0 then fill the set.\fR"
.ti -1c
.RI "\fBACE_Sig_Set\fR (int fill = 0)"
.br
.RI "\fIIf <fill> == 0 then initialize the <sigset_> to be empty, else full.\fR"
.ti -1c
.RI "\fB~ACE_Sig_Set\fR (void)"
.br
.ti -1c
.RI "int \fBempty_set\fR (void)"
.br
.RI "\fICreate a set that excludes all signals defined by the system.\fR"
.ti -1c
.RI "int \fBfill_set\fR (void)"
.br
.RI "\fICreate a set that includes all signals defined by the system.\fR"
.ti -1c
.RI "int \fBsig_add\fR (int signo)"
.br
.RI "\fIAdds the individual signal specified by <signo> to the set.\fR"
.ti -1c
.RI "int \fBsig_del\fR (int signo)"
.br
.RI "\fIDeletes the individual signal specified by <signo> from the set.\fR"
.ti -1c
.RI "int \fBis_member\fR (int signo) const"
.br
.RI "\fIChecks whether the signal specified by <signo> is in the set.\fR"
.ti -1c
.RI "\fBoperator sigset_t *\fR ()"
.br
.RI "\fIReturns a pointer to the underlying <sigset_t>.\fR"
.ti -1c
.RI "sigset_t \fBsigset\fR (void) const"
.br
.RI "\fIReturns a copy of the underlying <sigset_t>.\fR"
.ti -1c
.RI "void \fBdump\fR (void) const"
.br
.RI "\fIDump the state of an object.\fR"
.in -1c
.SS Public Attributes

.in +1c
.ti -1c
.RI "\fBACE_ALLOC_HOOK_DECLARE\fR"
.br
.RI "\fIDeclare the dynamic allocation hooks.\fR"
.in -1c
.SS Private Attributes

.in +1c
.ti -1c
.RI "sigset_t \fBsigset_\fR"
.br
.RI "\fISet of signals.\fR"
.in -1c
.SH DETAILED DESCRIPTION
.PP 
Provide a C++ wrapper for the C sigset_t interface.
.PP
.PP
 Handle signals via a more elegant C++ interface (e.g., doesn't require the use of global variables or global functions in an application). 
.PP
.SH CONSTRUCTOR & DESTRUCTOR DOCUMENTATION
.PP 
.SS ACE_Sig_Set::ACE_Sig_Set (sigset_t * sigset)
.PP
Initialize <sigset_> with <sigset>. If <sigset> == 0 then fill the set.
.PP
.SS ACE_Sig_Set::ACE_Sig_Set (ACE_Sig_Set * sigset)
.PP
Initialize <sigset_> with <sigset>. If <sigset> == 0 then fill the set.
.PP
.SS ACE_Sig_Set::ACE_Sig_Set (int fill = 0)
.PP
If <fill> == 0 then initialize the <sigset_> to be empty, else full.
.PP
.SS ACE_Sig_Set::~ACE_Sig_Set (void)
.PP
.SH MEMBER FUNCTION DOCUMENTATION
.PP 
.SS void ACE_Sig_Set::dump (void) const
.PP
Dump the state of an object.
.PP
.SS int ACE_Sig_Set::empty_set (void)
.PP
Create a set that excludes all signals defined by the system.
.PP
.SS int ACE_Sig_Set::fill_set (void)
.PP
Create a set that includes all signals defined by the system.
.PP
.SS int ACE_Sig_Set::is_member (int signo) const
.PP
Checks whether the signal specified by <signo> is in the set.
.PP
.SS ACE_Sig_Set::operator sigset_t * ()
.PP
Returns a pointer to the underlying <sigset_t>.
.PP
.SS int ACE_Sig_Set::sig_add (int signo)
.PP
Adds the individual signal specified by <signo> to the set.
.PP
.SS int ACE_Sig_Set::sig_del (int signo)
.PP
Deletes the individual signal specified by <signo> from the set.
.PP
.SS sigset_t ACE_Sig_Set::sigset (void) const
.PP
Returns a copy of the underlying <sigset_t>.
.PP
.SH MEMBER DATA DOCUMENTATION
.PP 
.SS ACE_Sig_Set::ACE_ALLOC_HOOK_DECLARE
.PP
Declare the dynamic allocation hooks.
.PP
.SS sigset_t ACE_Sig_Set::sigset_\fC [private]\fR
.PP
Set of signals.
.PP


.SH AUTHOR
.PP 
Generated automatically by Doxygen for ACE from the source code.