.TH ACE_UNIX_Addr 3 "5 Oct 2001" "ACE" \" -*- nroff -*-
.ad l
.nh
.SH NAME
ACE_UNIX_Addr \- Defines the ``UNIX domain address family'' address format. 
.SH SYNOPSIS
.br
.PP
\fC#include <UNIX_Addr.h>\fR
.PP
Inherits \fBACE_Addr\fR.
.PP
.SS Public Methods

.in +1c
.ti -1c
.RI "\fBACE_UNIX_Addr\fR (void)"
.br
.RI "\fIDefault constructor.\fR"
.ti -1c
.RI "\fBACE_UNIX_Addr\fR (const ACE_UNIX_Addr &sa)"
.br
.RI "\fICopy constructor.\fR"
.ti -1c
.RI "\fBACE_UNIX_Addr\fR (const char rendezvous_point[])"
.br
.RI "\fICreates an ACE_UNIX_Addr from a string.\fR"
.ti -1c
.RI "\fBACE_UNIX_Addr\fR (const sockaddr_un *, int len)"
.br
.RI "\fICreates an \fBACE_INET_Addr\fR from a sockaddr_un structure.\fR"
.ti -1c
.RI "int \fBset\fR (const ACE_UNIX_Addr &sa)"
.br
.RI "\fICreates an ACE_UNIX_Addr from another .\fR"
.ti -1c
.RI "int \fBset\fR (const char rendezvous_point[])"
.br
.RI "\fICreates an ACE_UNIX_Addr from a string.\fR"
.ti -1c
.RI "int \fBset\fR (const sockaddr_un *, int len)"
.br
.RI "\fICreates an ACE_UNIX_Addr from a sockaddr_un structure.\fR"
.ti -1c
.RI "virtual void* \fBget_addr\fR (void) const"
.br
.RI "\fIReturn a pointer to the underlying network address.\fR"
.ti -1c
.RI "virtual void \fBset_addr\fR (void *addr, int len)"
.br
.RI "\fISet a pointer to the underlying network address.\fR"
.ti -1c
.RI "virtual int \fBaddr_to_string\fR (char addr[], size_t) const"
.br
.RI "\fITransform the current address into string format.\fR"
.ti -1c
.RI "virtual int \fBstring_to_addr\fR (const char addr[])"
.br
.RI "\fITransform the string into the current addressing format.\fR"
.ti -1c
.RI "int \fBoperator==\fR (const ACE_UNIX_Addr &SAP) const"
.br
.RI "\fICompare two addresses for equality.\fR"
.ti -1c
.RI "int \fBoperator!=\fR (const ACE_UNIX_Addr &SAP) const"
.br
.RI "\fICompare two addresses for inequality.\fR"
.ti -1c
.RI "const char* \fBget_path_name\fR (void) const"
.br
.RI "\fIReturn the path name of the underlying rendezvous point.\fR"
.ti -1c
.RI "virtual u_long \fBhash\fR (void) const"
.br
.RI "\fIComputes and returns hash value.\fR"
.ti -1c
.RI "void \fBdump\fR (void) const"
.br
.RI "\fIDump the state of an object.\fR"
.in -1c
.SS Public Attributes

.in +1c
.ti -1c
.RI "\fBACE_ALLOC_HOOK_DECLARE\fR"
.br
.RI "\fIDeclare the dynamic allocation hooks.\fR"
.in -1c
.SS Private Attributes

.in +1c
.ti -1c
.RI "sockaddr_un \fBunix_addr_\fR"
.br
.RI "\fIUnderlying socket address.\fR"
.in -1c
.SH DETAILED DESCRIPTION
.PP 
Defines the ``UNIX domain address family'' address format.
.PP
.SH CONSTRUCTOR & DESTRUCTOR DOCUMENTATION
.PP 
.SS ACE_UNIX_Addr::ACE_UNIX_Addr (void)
.PP
Default constructor.
.PP
.SS ACE_UNIX_Addr::ACE_UNIX_Addr (const ACE_UNIX_Addr & sa)
.PP
Copy constructor.
.PP
.SS ACE_UNIX_Addr::ACE_UNIX_Addr (const char rendezvous_point[])
.PP
Creates an ACE_UNIX_Addr from a string.
.PP
.SS ACE_UNIX_Addr::ACE_UNIX_Addr (const sockaddr_un *, int len)
.PP
Creates an \fBACE_INET_Addr\fR from a sockaddr_un structure.
.PP
.SH MEMBER FUNCTION DOCUMENTATION
.PP 
.SS int ACE_UNIX_Addr::addr_to_string (char addr[], size_t) const\fC [virtual]\fR
.PP
Transform the current address into string format.
.PP
.SS void ACE_UNIX_Addr::dump (void) const
.PP
Dump the state of an object.
.PP
Reimplemented from \fBACE_Addr\fR.
.SS void * ACE_UNIX_Addr::get_addr (void) const\fC [virtual]\fR
.PP
Return a pointer to the underlying network address.
.PP
Reimplemented from \fBACE_Addr\fR.
.SS const char * ACE_UNIX_Addr::get_path_name (void) const
.PP
Return the path name of the underlying rendezvous point.
.PP
.SS u_long ACE_UNIX_Addr::hash (void) const\fC [virtual]\fR
.PP
Computes and returns hash value.
.PP
Reimplemented from \fBACE_Addr\fR.
.SS int ACE_UNIX_Addr::operator!= (const ACE_UNIX_Addr & SAP) const
.PP
Compare two addresses for inequality.
.PP
.SS int ACE_UNIX_Addr::operator== (const ACE_UNIX_Addr & SAP) const
.PP
Compare two addresses for equality.
.PP
.SS int ACE_UNIX_Addr::set (const sockaddr_un *, int len)
.PP
Creates an ACE_UNIX_Addr from a sockaddr_un structure.
.PP
.SS int ACE_UNIX_Addr::set (const char rendezvous_point[])
.PP
Creates an ACE_UNIX_Addr from a string.
.PP
.SS int ACE_UNIX_Addr::set (const ACE_UNIX_Addr & sa)
.PP
Creates an ACE_UNIX_Addr from another .
.PP
.SS void ACE_UNIX_Addr::set_addr (void * addr, int len)\fC [virtual]\fR
.PP
Set a pointer to the underlying network address.
.PP
Reimplemented from \fBACE_Addr\fR.
.SS int ACE_UNIX_Addr::string_to_addr (const char addr[])\fC [virtual]\fR
.PP
Transform the string into the current addressing format.
.PP
.SH MEMBER DATA DOCUMENTATION
.PP 
.SS ACE_UNIX_Addr::ACE_ALLOC_HOOK_DECLARE
.PP
Declare the dynamic allocation hooks.
.PP
Reimplemented from \fBACE_Addr\fR.
.SS sockaddr_un ACE_UNIX_Addr::unix_addr_\fC [private]\fR
.PP
Underlying socket address.
.PP


.SH AUTHOR
.PP 
Generated automatically by Doxygen for ACE from the source code.