.TH ACE_Event_Handler_Handle_Timeout_Upcall 3 "5 Oct 2001" "ACE" \" -*- nroff -*-
.ad l
.nh
.SH NAME
ACE_Event_Handler_Handle_Timeout_Upcall \- Functor for Timer_Queues. 
.SH SYNOPSIS
.br
.PP
\fC#include <Timer_Queue_T.h>\fR
.PP
.SS Public Types

.in +1c
.ti -1c
.RI "typedef \fBACE_Timer_Queue_T\fR<\fBACE_Event_Handler\fR *, ACE_Event_Handler_Handle_Timeout_Upcall<ACE_LOCK>, ACE_LOCK> \fBTIMER_QUEUE\fR"
.br
.in -1c
.SS Public Methods

.in +1c
.ti -1c
.RI "\fBACE_Event_Handler_Handle_Timeout_Upcall\fR (void)"
.br
.RI "\fIConstructor.\fR"
.ti -1c
.RI "\fB~ACE_Event_Handler_Handle_Timeout_Upcall\fR (void)"
.br
.RI "\fIDestructor.\fR"
.ti -1c
.RI "int \fBtimeout\fR (\fBTIMER_QUEUE\fR &timer_queue, \fBACE_Event_Handler\fR *handler, const void *arg, const \fBACE_Time_Value\fR &cur_time)"
.br
.RI "\fIThis method is called when the timer expires.\fR"
.ti -1c
.RI "int \fBcancellation\fR (\fBTIMER_QUEUE\fR &timer_queue, \fBACE_Event_Handler\fR *handler)"
.br
.RI "\fIThis method is called when the timer is canceled.\fR"
.ti -1c
.RI "int \fBdeletion\fR (\fBTIMER_QUEUE\fR &timer_queue, \fBACE_Event_Handler\fR *handler, const void *arg)"
.br
.RI "\fIThis method is called when the timer queue is destroyed and the timer is still contained in it.\fR"
.in -1c
.SS Private Methods

.in +1c
.ti -1c
.RI "\fBACE_Event_Handler_Handle_Timeout_Upcall\fR (const ACE_Event_Handler_Handle_Timeout_Upcall<ACE_LOCK> &)"
.br
.ti -1c
.RI "void \fBoperator=\fR (const ACE_Event_Handler_Handle_Timeout_Upcall<ACE_LOCK> &)"
.br
.in -1c
.SH DETAILED DESCRIPTION
.PP 

.SS template<class ACE_LOCK>  template class ACE_Event_Handler_Handle_Timeout_Upcall
Functor for Timer_Queues.
.PP
.PP
 This class implements the functor required by the Timer Queue to call <handle_timeout> on ACE_Event_Handlers. 
.PP
.SH MEMBER TYPEDEF DOCUMENTATION
.PP 
.SS template<classACE_LOCK> typedef \fBACE_Timer_Queue_T\fR<\fBACE_Event_Handler\fR *, ACE_Event_Handler_Handle_Timeout_Upcall<ACE_LOCK>, ACE_LOCK> ACE_Event_Handler_Handle_Timeout_Upcall<ACE_LOCK>::TIMER_QUEUE
.PP
.SH CONSTRUCTOR & DESTRUCTOR DOCUMENTATION
.PP 
.SS template<classACE_LOCK> ACE_Event_Handler_Handle_Timeout_Upcall<ACE_LOCK>::ACE_Event_Handler_Handle_Timeout_Upcall<ACE_LOCK> (void)
.PP
Constructor.
.PP
.SS template<classACE_LOCK> ACE_Event_Handler_Handle_Timeout_Upcall<ACE_LOCK>::~ACE_Event_Handler_Handle_Timeout_Upcall<ACE_LOCK> (void)
.PP
Destructor.
.PP
.SS template<classACE_LOCK> ACE_Event_Handler_Handle_Timeout_Upcall<ACE_LOCK>::ACE_Event_Handler_Handle_Timeout_Upcall<ACE_LOCK> (const ACE_Event_Handler_Handle_Timeout_Upcall< ACE_LOCK >&)\fC [private]\fR
.PP
.SH MEMBER FUNCTION DOCUMENTATION
.PP 
.SS template<classACE_LOCK> int ACE_Event_Handler_Handle_Timeout_Upcall<ACE_LOCK>::cancellation (\fBTIMER_QUEUE\fR & timer_queue, \fBACE_Event_Handler\fR * handler)
.PP
This method is called when the timer is canceled.
.PP
.SS template<classACE_LOCK> int ACE_Event_Handler_Handle_Timeout_Upcall<ACE_LOCK>::deletion (\fBTIMER_QUEUE\fR & timer_queue, \fBACE_Event_Handler\fR * handler, const void * arg)
.PP
This method is called when the timer queue is destroyed and the timer is still contained in it.
.PP
.SS template<classACE_LOCK> void ACE_Event_Handler_Handle_Timeout_Upcall<ACE_LOCK>::operator= (const ACE_Event_Handler_Handle_Timeout_Upcall< ACE_LOCK >&)\fC [private]\fR
.PP
.SS template<classACE_LOCK> int ACE_Event_Handler_Handle_Timeout_Upcall<ACE_LOCK>::timeout (\fBTIMER_QUEUE\fR & timer_queue, \fBACE_Event_Handler\fR * handler, const void * arg, const \fBACE_Time_Value\fR & cur_time)
.PP
This method is called when the timer expires.
.PP


.SH AUTHOR
.PP 
Generated automatically by Doxygen for ACE from the source code.