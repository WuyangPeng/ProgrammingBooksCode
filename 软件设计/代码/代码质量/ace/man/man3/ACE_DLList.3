.TH ACE_DLList 3 "5 Oct 2001" "ACE" \" -*- nroff -*-
.ad l
.nh
.SH NAME
ACE_DLList \- A double-linked list container class. 
.SH SYNOPSIS
.br
.PP
\fC#include <Containers_T.h>\fR
.PP
Inherits \fBACE_Double_Linked_List\fR.
.PP
.SS Public Methods

.in +1c
.ti -1c
.RI "void \fBoperator=\fR (const ACE_DLList<T> &l)"
.br
.RI "\fIDelegates to \fBACE_Double_Linked_List\fR.\fR"
.ti -1c
.RI "T* \fBinsert_tail\fR (T *new_item)"
.br
.RI "\fIDelegates to \fBACE_Double_Linked_List\fR.\fR"
.ti -1c
.RI "T* \fBinsert_head\fR (T *new_item)"
.br
.RI "\fIDelegates to \fBACE_Double_Linked_List\fR.\fR"
.ti -1c
.RI "T* \fBdelete_head\fR (void)"
.br
.RI "\fIDelegates to \fBACE_Double_Linked_List\fR.\fR"
.ti -1c
.RI "T* \fBdelete_tail\fR (void)"
.br
.RI "\fIDelegates to \fBACE_Double_Linked_List\fR.\fR"
.ti -1c
.RI "int \fBget\fR (T *&item, size_t slot = 0)"
.br
.ti -1c
.RI "void \fBdump\fR (void) const"
.br
.RI "\fIDelegates to \fBACE_Double_Linked_List\fR.\fR"
.ti -1c
.RI "int \fBremove\fR (\fBACE_DLList_Node\fR *n)"
.br
.RI "\fIDelegates to \fBACE_Double_Linked_List\fR.\fR"
.ti -1c
.RI "\fBACE_DLList\fR (\fBACE_Allocator\fR *alloc = 0)"
.br
.RI "\fIDelegates to \fBACE_Double_Linked_List\fR.\fR"
.ti -1c
.RI "\fBACE_DLList\fR (const ACE_DLList<T> &l)"
.br
.RI "\fIDelegates to \fBACE_Double_Linked_List\fR.\fR"
.ti -1c
.RI "\fB~ACE_DLList\fR (void)"
.br
.RI "\fIDeletes the list starting from the head.\fR"
.in -1c
.SS Friends

.in +1c
.ti -1c
.RI "class \fBACE_DLList_Node\fR"
.br
.ti -1c
.RI "class \fBACE_Double_Linked_List_Iterator< T >\fR"
.br
.ti -1c
.RI "class \fBACE_DLList_Iterator< T >\fR"
.br
.ti -1c
.RI "class \fBACE_DLList_Reverse_Iterator< T >\fR"
.br
.in -1c
.SH DETAILED DESCRIPTION
.PP 

.SS template<class T>  template class ACE_DLList
A double-linked list container class.
.PP
.PP
 This implementation uses \fBACE_Double_Linked_List\fR to perform the logic behind this container class. It delegates all of its calls to \fBACE_Double_Linked_List\fR. 
.PP
.SH CONSTRUCTOR & DESTRUCTOR DOCUMENTATION
.PP 
.SS template<classT> ACE_DLList<T>::ACE_DLList<T> (\fBACE_Allocator\fR * alloc = 0)
.PP
Delegates to \fBACE_Double_Linked_List\fR.
.PP
.SS template<classT> ACE_DLList<T>::ACE_DLList<T> (const ACE_DLList< T >& l)
.PP
Delegates to \fBACE_Double_Linked_List\fR.
.PP
.SS template<classT> ACE_DLList<T>::~ACE_DLList<T> (void)
.PP
Deletes the list starting from the head.
.PP
.SH MEMBER FUNCTION DOCUMENTATION
.PP 
.SS template<classT> T * ACE_DLList<T>::delete_head (void)
.PP
Delegates to \fBACE_Double_Linked_List\fR.
.PP
Reimplemented from \fBACE_Double_Linked_List\fR.
.SS template<classT> T * ACE_DLList<T>::delete_tail (void)
.PP
Delegates to \fBACE_Double_Linked_List\fR.
.PP
Reimplemented from \fBACE_Double_Linked_List\fR.
.SS template<classT> void ACE_DLList<T>::dump (void) const
.PP
Delegates to \fBACE_Double_Linked_List\fR.
.PP
Reimplemented from \fBACE_Double_Linked_List\fR.
.SS template<classT> int ACE_DLList<T>::get (T *& item, size_t slot = 0)
.PP
Delegates to , but where  returns the node as the item, this get returns the contents of the node in item. 
.PP
Reimplemented from \fBACE_Double_Linked_List\fR.
.SS template<classT> T * ACE_DLList<T>::insert_head (T * new_item)
.PP
Delegates to \fBACE_Double_Linked_List\fR.
.PP
Reimplemented from \fBACE_Double_Linked_List\fR.
.SS template<classT> T * ACE_DLList<T>::insert_tail (T * new_item)
.PP
Delegates to \fBACE_Double_Linked_List\fR.
.PP
Reimplemented from \fBACE_Double_Linked_List\fR.
.SS template<classT> void ACE_DLList<T>::operator= (const ACE_DLList< T >& l)
.PP
Delegates to \fBACE_Double_Linked_List\fR.
.PP
.SS template<classT> int ACE_DLList<T>::remove (\fBACE_DLList_Node\fR * n)
.PP
Delegates to \fBACE_Double_Linked_List\fR.
.PP
.SH FRIENDS AND RELATED FUNCTION DOCUMENTATION
.PP 
.SS template<classT> class \fBACE_DLList_Iterator\fR\fC [friend]\fR
.PP
.SS template<classT> class ACE_DLList_Node\fC [friend]\fR
.PP
.SS template<classT> class \fBACE_DLList_Reverse_Iterator\fR\fC [friend]\fR
.PP
.SS template<classT> class \fBACE_Double_Linked_List_Iterator\fR\fC [friend]\fR
.PP
Reimplemented from \fBACE_Double_Linked_List\fR.

.SH AUTHOR
.PP 
Generated automatically by Doxygen for ACE from the source code.