.TH ACE_Array 3 "5 Oct 2001" "ACE" \" -*- nroff -*-
.ad l
.nh
.SH NAME
ACE_Array \- Implement a dynamic array class. 
.SH SYNOPSIS
.br
.PP
\fC#include <Containers_T.h>\fR
.PP
Inherits \fBACE_Array_Base< T >\fR.
.PP
.SS Public Types

.in +1c
.ti -1c
.RI "typedef T \fBTYPE\fR"
.br
.ti -1c
.RI "typedef \fBACE_Array_Iterator\fR<T> \fBITERATOR\fR"
.br
.in -1c
.SS Public Methods

.in +1c
.ti -1c
.RI "\fBACE_Array\fR (size_t size = 0, \fBACE_Allocator\fR* alloc = 0)"
.br
.RI "\fIDynamically create an uninitialized array.\fR"
.ti -1c
.RI "\fBACE_Array\fR (size_t size, const T &default_value, \fBACE_Allocator\fR* alloc = 0)"
.br
.RI "\fIDynamically initialize the entire array to the <default_value>.\fR"
.ti -1c
.RI "\fBACE_Array\fR (const ACE_Array<T> &s)"
.br
.ti -1c
.RI "void \fBoperator=\fR (const ACE_Array<T> &s)"
.br
.ti -1c
.RI "int \fBoperator==\fR (const ACE_Array<T> &s) const"
.br
.ti -1c
.RI "int \fBoperator!=\fR (const ACE_Array<T> &s) const"
.br
.in -1c
.SH DETAILED DESCRIPTION
.PP 

.SS template<class T>  template class ACE_Array
Implement a dynamic array class.
.PP
.PP
 This class extends \fBACE_Array_Base\fR, it provides comparison operators. 
.PP
.SH MEMBER TYPEDEF DOCUMENTATION
.PP 
.SS template<classT> typedef \fBACE_Array_Iterator\fR<T> ACE_Array<T>::ITERATOR
.PP
Reimplemented from \fBACE_Array_Base\fR.
.SS template<classT> typedef T ACE_Array<T>::TYPE
.PP
Reimplemented from \fBACE_Array_Base\fR.
.SH CONSTRUCTOR & DESTRUCTOR DOCUMENTATION
.PP 
.SS template<classT> ACE_Array<T>::ACE_Array<T> (size_t size = 0, \fBACE_Allocator\fR * alloc = 0)
.PP
Dynamically create an uninitialized array.
.PP
.SS template<classT> ACE_Array<T>::ACE_Array<T> (size_t size, const T & default_value, \fBACE_Allocator\fR * alloc = 0)
.PP
Dynamically initialize the entire array to the <default_value>.
.PP
.SS template<classT> ACE_Array<T>::ACE_Array<T> (const ACE_Array< T >& s)
.PP
The copy constructor performs initialization by making an exact copy of the contents of parameter <s>, i.e., *this == s will return true. 
.SH MEMBER FUNCTION DOCUMENTATION
.PP 
.SS template<classT> int ACE_Array<T>::operator!= (const ACE_Array< T >& s) const
.PP
Compare this array with <s> for inequality such that <*this> != <s> is always the complement of the boolean return value of <*this> == <s>. 
.SS template<classT> void ACE_Array<T>::operator= (const ACE_Array< T >& s)
.PP
Assignment operator performs an assignment by making an exact copy of the contents of parameter <s>, i.e., *this == s will return true. Note that if the <max_size_> of  is >= than <s.max_size_> we can copy it without reallocating. However, if <max_size_> is < <s.max_size_> we must delete the , reallocate a new , and then copy the contents of <s>. 
.SS template<classT> int ACE_Array<T>::operator== (const ACE_Array< T >& s) const
.PP
Compare this array with <s> for equality. Two arrays are equal if their <size>'s are equal and all the elements from 0 .. <size> are equal. 

.SH AUTHOR
.PP 
Generated automatically by Doxygen for ACE from the source code.