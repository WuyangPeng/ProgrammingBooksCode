.TH ACE_Thread_Descriptor_Base 3 "5 Oct 2001" "ACE" \" -*- nroff -*-
.ad l
.nh
.SH NAME
ACE_Thread_Descriptor_Base \- Basic information for thread descriptors. These information gets extracted out because we need it after a thread is terminated. 
.SH SYNOPSIS
.br
.PP
\fC#include <Thread_Manager.h>\fR
.PP
Inherits \fBACE_OS_Thread_Descriptor\fR.
.PP
Inherited by \fBACE_Thread_Descriptor\fR.
.PP
.SS Public Methods

.in +1c
.ti -1c
.RI "\fBACE_Thread_Descriptor_Base\fR (void)"
.br
.ti -1c
.RI "\fB~ACE_Thread_Descriptor_Base\fR (void)"
.br
.ti -1c
.RI "int \fBoperator==\fR (const ACE_Thread_Descriptor_Base &rhs) const"
.br
.RI "\fIEquality operator.\fR"
.ti -1c
.RI "int \fBoperator!=\fR (const ACE_Thread_Descriptor_Base &rhs) const"
.br
.RI "\fIInequality operator.\fR"
.ti -1c
.RI "int \fBgrp_id\fR (void) const"
.br
.RI "\fIGroup ID.\fR"
.ti -1c
.RI "ACE_UINT32 \fBstate\fR (void) const"
.br
.RI "\fICurrent state of the thread.\fR"
.ti -1c
.RI "\fBACE_Task_Base\fR* \fBtask\fR (void) const"
.br
.RI "\fIReturn the pointer to an  or NULL if there's no  associated with this thread.;.\fR"
.in -1c
.SS Protected Methods

.in +1c
.ti -1c
.RI "void \fBreset\fR (void)"
.br
.RI "\fIReset this base thread descriptor.\fR"
.in -1c
.SS Protected Attributes

.in +1c
.ti -1c
.RI "\fBACE_thread_t\fR \fBthr_id_\fR"
.br
.RI "\fIUnique thread ID.\fR"
.ti -1c
.RI "\fBACE_hthread_t\fR \fBthr_handle_\fR"
.br
.RI "\fIUnique handle to thread (used by Win32 and AIX).\fR"
.ti -1c
.RI "int \fBgrp_id_\fR"
.br
.RI "\fIGroup ID.\fR"
.ti -1c
.RI "ACE_UINT32 \fBthr_state_\fR"
.br
.RI "\fICurrent state of the thread.\fR"
.ti -1c
.RI "\fBACE_Task_Base\fR* \fBtask_\fR"
.br
.RI "\fIPointer to an  or NULL if there's no .\fR"
.ti -1c
.RI "ACE_Thread_Descriptor_Base* \fBnext_\fR"
.br
.RI "\fIWe need these pointers to maintain the double-linked list in a thread managers.\fR"
.ti -1c
.RI "ACE_Thread_Descriptor_Base* \fBprev_\fR"
.br
.in -1c
.SS Friends

.in +1c
.ti -1c
.RI "class \fBACE_Thread_Manager\fR"
.br
.ti -1c
.RI "class \fBACE_Double_Linked_List< ACE_Thread_Descriptor_Base >\fR"
.br
.ti -1c
.RI "class \fBACE_Double_Linked_List_Iterator_Base< ACE_Thread_Descriptor_Base >\fR"
.br
.ti -1c
.RI "class \fBACE_Double_Linked_List_Iterator< ACE_Thread_Descriptor_Base >\fR"
.br
.ti -1c
.RI "class \fBACE_Double_Linked_List< ACE_Thread_Descriptor >\fR"
.br
.ti -1c
.RI "class \fBACE_Double_Linked_List_Iterator_Base< ACE_Thread_Descriptor >\fR"
.br
.ti -1c
.RI "class \fBACE_Double_Linked_List_Iterator< ACE_Thread_Descriptor >\fR"
.br
.in -1c
.SH DETAILED DESCRIPTION
.PP 
Basic information for thread descriptors. These information gets extracted out because we need it after a thread is terminated.
.PP
.SH CONSTRUCTOR & DESTRUCTOR DOCUMENTATION
.PP 
.SS ACE_Thread_Descriptor_Base::ACE_Thread_Descriptor_Base (void)
.PP
.SS ACE_Thread_Descriptor_Base::~ACE_Thread_Descriptor_Base (void)
.PP
.SH MEMBER FUNCTION DOCUMENTATION
.PP 
.SS int ACE_Thread_Descriptor_Base::grp_id (void) const
.PP
Group ID.
.PP
.SS int ACE_Thread_Descriptor_Base::operator!= (const ACE_Thread_Descriptor_Base & rhs) const
.PP
Inequality operator.
.PP
.SS int ACE_Thread_Descriptor_Base::operator== (const ACE_Thread_Descriptor_Base & rhs) const
.PP
Equality operator.
.PP
.SS void ACE_Thread_Descriptor_Base::reset (void)\fC [protected]\fR
.PP
Reset this base thread descriptor.
.PP
.SS ACE_UINT32 ACE_Thread_Descriptor_Base::state (void) const
.PP
Current state of the thread.
.PP
.SS \fBACE_Task_Base\fR * ACE_Thread_Descriptor_Base::task (void) const
.PP
Return the pointer to an  or NULL if there's no  associated with this thread.;.
.PP
.SH FRIENDS AND RELATED FUNCTION DOCUMENTATION
.PP 
.SS class \fBACE_Double_Linked_List\fR\fC [friend]\fR
.PP
Reimplemented in \fBACE_Thread_Descriptor\fR.
.SS class \fBACE_Double_Linked_List\fR\fC [friend]\fR
.PP
.SS class \fBACE_Double_Linked_List_Iterator\fR\fC [friend]\fR
.PP
Reimplemented in \fBACE_Thread_Descriptor\fR.
.SS class \fBACE_Double_Linked_List_Iterator\fR\fC [friend]\fR
.PP
.SS class \fBACE_Double_Linked_List_Iterator_Base\fR\fC [friend]\fR
.PP
.SS class \fBACE_Double_Linked_List_Iterator_Base\fR\fC [friend]\fR
.PP
.SS class ACE_Thread_Manager\fC [friend]\fR
.PP
Reimplemented in \fBACE_Thread_Descriptor\fR.
.SH MEMBER DATA DOCUMENTATION
.PP 
.SS int ACE_Thread_Descriptor_Base::grp_id_\fC [protected]\fR
.PP
Group ID.
.PP
.SS ACE_Thread_Descriptor_Base * ACE_Thread_Descriptor_Base::next_\fC [protected]\fR
.PP
We need these pointers to maintain the double-linked list in a thread managers.
.PP
.SS ACE_Thread_Descriptor_Base * ACE_Thread_Descriptor_Base::prev_\fC [protected]\fR
.PP
.SS \fBACE_Task_Base\fR * ACE_Thread_Descriptor_Base::task_\fC [protected]\fR
.PP
Pointer to an  or NULL if there's no .
.PP
.SS \fBACE_hthread_t\fR ACE_Thread_Descriptor_Base::thr_handle_\fC [protected]\fR
.PP
Unique handle to thread (used by Win32 and AIX).
.PP
.SS \fBACE_thread_t\fR ACE_Thread_Descriptor_Base::thr_id_\fC [protected]\fR
.PP
Unique thread ID.
.PP
.SS ACE_UINT32 ACE_Thread_Descriptor_Base::thr_state_\fC [protected]\fR
.PP
Current state of the thread.
.PP


.SH AUTHOR
.PP 
Generated automatically by Doxygen for ACE from the source code.