.TH ACE_Shared_Memory_SV 3 "5 Oct 2001" "ACE" \" -*- nroff -*-
.ad l
.nh
.SH NAME
ACE_Shared_Memory_SV \- Shared memory wrapper based on System V shared memory. 
.SH SYNOPSIS
.br
.PP
\fC#include <Shared_Memory_SV.h>\fR
.PP
Inherits \fBACE_Shared_Memory\fR.
.PP
.SS Public Types

.in +1c
.ti -1c
.RI "enum { \fBACE_CREATE\fR = IPC_CREAT, \fBACE_OPEN\fR = 0 }"
.br
.in -1c
.SS Public Methods

.in +1c
.ti -1c
.RI "\fBACE_Shared_Memory_SV\fR (void)"
.br
.ti -1c
.RI "\fBACE_Shared_Memory_SV\fR (key_t id, int length, int create = ACE_Shared_Memory_SV::ACE_OPEN, int perms = ACE_DEFAULT_FILE_PERMS, void *addr = 0, int flags = 0)"
.br
.ti -1c
.RI "int \fBopen\fR (key_t id, int length, int create = ACE_Shared_Memory_SV::ACE_OPEN, int perms = ACE_DEFAULT_FILE_PERMS, void *addr = 0, int flags = 0)"
.br
.ti -1c
.RI "virtual int \fBclose\fR (void)"
.br
.RI "\fIClose down the shared memory segment.\fR"
.ti -1c
.RI "virtual int \fBremove\fR (void)"
.br
.RI "\fIRemove the underlying shared memory segment.\fR"
.ti -1c
.RI "virtual void* \fBmalloc\fR (size_t = 0)"
.br
.RI "\fICreate a new chuck of memory containing <size> bytes.\fR"
.ti -1c
.RI "virtual int \fBfree\fR (void *p)"
.br
.RI "\fIFree a chuck of memory allocated by .\fR"
.ti -1c
.RI "virtual int \fBget_segment_size\fR (void) const"
.br
.RI "\fIReturn the size of the shared memory segment.\fR"
.ti -1c
.RI "virtual ACE_HANDLE \fBget_id\fR (void) const"
.br
.RI "\fIReturn the ID of the shared memory segment (i.e., a System V shared memory internal id).\fR"
.ti -1c
.RI "void \fBdump\fR (void) const"
.br
.RI "\fIDump the state of an object.\fR"
.in -1c
.SS Public Attributes

.in +1c
.ti -1c
.RI "\fBACE_ALLOC_HOOK_DECLARE\fR"
.br
.RI "\fIDeclare the dynamic allocation hooks.\fR"
.in -1c
.SS Private Attributes

.in +1c
.ti -1c
.RI "\fBACE_SV_Shared_Memory\fR \fBshared_memory_\fR"
.br
.RI "\fIThis version is implemented with System V shared memory segments.\fR"
.in -1c
.SH DETAILED DESCRIPTION
.PP 
Shared memory wrapper based on System V shared memory.
.PP
.PP
 This class provides a very simple-minded shared memory manager. For more a powerful memory allocator please see . 
.PP
.SH MEMBER ENUMERATION DOCUMENTATION
.PP 
.SS anonymous enum
.PP
\fBEnumeration values:\fR
.in +1c
.TP
\fB\fIACE_CREATE\fR \fR
.TP
\fB\fIACE_OPEN\fR \fR
.SH CONSTRUCTOR & DESTRUCTOR DOCUMENTATION
.PP 
.SS ACE_Shared_Memory_SV::ACE_Shared_Memory_SV (void)
.PP
.SS ACE_Shared_Memory_SV::ACE_Shared_Memory_SV (key_t id, int length, int create = ACE_Shared_Memory_SV::ACE_OPEN, int perms = ACE_DEFAULT_FILE_PERMS, void * addr = 0, int flags = 0)
.PP
.SH MEMBER FUNCTION DOCUMENTATION
.PP 
.SS int ACE_Shared_Memory_SV::close (void)\fC [virtual]\fR
.PP
Close down the shared memory segment.
.PP
Reimplemented from \fBACE_Shared_Memory\fR.
.SS void ACE_Shared_Memory_SV::dump (void) const
.PP
Dump the state of an object.
.PP
.SS int ACE_Shared_Memory_SV::free (void * p)\fC [virtual]\fR
.PP
Free a chuck of memory allocated by .
.PP
Reimplemented from \fBACE_Shared_Memory\fR.
.SS ACE_HANDLE ACE_Shared_Memory_SV::get_id (void) const\fC [virtual]\fR
.PP
Return the ID of the shared memory segment (i.e., a System V shared memory internal id).
.PP
Reimplemented from \fBACE_Shared_Memory\fR.
.SS int ACE_Shared_Memory_SV::get_segment_size (void) const\fC [virtual]\fR
.PP
Return the size of the shared memory segment.
.PP
Reimplemented from \fBACE_Shared_Memory\fR.
.SS void * ACE_Shared_Memory_SV::malloc (size_t size = 0)\fC [virtual]\fR
.PP
Create a new chuck of memory containing <size> bytes.
.PP
Reimplemented from \fBACE_Shared_Memory\fR.
.SS int ACE_Shared_Memory_SV::open (key_t id, int length, int create = ACE_Shared_Memory_SV::ACE_OPEN, int perms = ACE_DEFAULT_FILE_PERMS, void * addr = 0, int flags = 0)
.PP
.SS int ACE_Shared_Memory_SV::remove (void)\fC [virtual]\fR
.PP
Remove the underlying shared memory segment.
.PP
Reimplemented from \fBACE_Shared_Memory\fR.
.SH MEMBER DATA DOCUMENTATION
.PP 
.SS ACE_Shared_Memory_SV::ACE_ALLOC_HOOK_DECLARE
.PP
Declare the dynamic allocation hooks.
.PP
.SS \fBACE_SV_Shared_Memory\fR ACE_Shared_Memory_SV::shared_memory_\fC [private]\fR
.PP
This version is implemented with System V shared memory segments.
.PP


.SH AUTHOR
.PP 
Generated automatically by Doxygen for ACE from the source code.