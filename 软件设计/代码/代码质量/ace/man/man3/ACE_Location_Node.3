.TH ACE_Location_Node 3 "5 Oct 2001" "ACE" \" -*- nroff -*-
.ad l
.nh
.SH NAME
ACE_Location_Node \- Keep track of where a shared library is located. 
.SH SYNOPSIS
.br
.PP
\fC#include <Parse_Node.h>\fR
.PP
Inherited by \fBACE_Function_Node\fR, \fBACE_Object_Node\fR, and \fBACE_Static_Function_Node\fR.
.PP
.SS Public Methods

.in +1c
.ti -1c
.RI "\fBACE_Location_Node\fR (void)"
.br
.ti -1c
.RI "virtual void* \fBsymbol\fR (\fBACE_Service_Object_Exterminator\fR * = 0) = 0"
.br
.ti -1c
.RI "virtual void \fBset_symbol\fR (void *h)"
.br
.ti -1c
.RI "\fBACE_SHLIB_HANDLE\fR \fBhandle\fR (void)"
.br
.ti -1c
.RI "const \fBACE_TCHAR\fR* \fBpathname\fR (void) const"
.br
.ti -1c
.RI "void \fBpathname\fR (const \fBACE_TCHAR\fR *h)"
.br
.ti -1c
.RI "int \fBdispose\fR (void) const"
.br
.ti -1c
.RI "virtual \fB~ACE_Location_Node\fR (void)"
.br
.ti -1c
.RI "void \fBdump\fR (void) const"
.br
.RI "\fIDump the state of an object.\fR"
.in -1c
.SS Public Attributes

.in +1c
.ti -1c
.RI "\fBACE_ALLOC_HOOK_DECLARE\fR"
.br
.RI "\fIDeclare the dynamic allocation hooks.\fR"
.in -1c
.SS Protected Methods

.in +1c
.ti -1c
.RI "int \fBopen_dll\fR (void)"
.br
.in -1c
.SS Protected Attributes

.in +1c
.ti -1c
.RI "const \fBACE_TCHAR\fR* \fBpathname_\fR"
.br
.RI "\fIPathname to the shared library we are working on.\fR"
.ti -1c
.RI "int \fBmust_delete_\fR"
.br
.ti -1c
.RI "\fBACE_DLL\fR \fBdll_\fR"
.br
.RI "\fIThe open shared library.\fR"
.ti -1c
.RI "void* \fBsymbol_\fR"
.br
.RI "\fISymbol that we've obtained from the shared library.\fR"
.in -1c
.SH DETAILED DESCRIPTION
.PP 
Keep track of where a shared library is located.
.PP
.SH CONSTRUCTOR & DESTRUCTOR DOCUMENTATION
.PP 
.SS ACE_Location_Node::ACE_Location_Node (void)
.PP
.SS virtual ACE_Location_Node::~ACE_Location_Node (void)\fC [virtual]\fR
.PP
.SH MEMBER FUNCTION DOCUMENTATION
.PP 
.SS int ACE_Location_Node::dispose (void) const
.PP
.SS void ACE_Location_Node::dump (void) const
.PP
Dump the state of an object.
.PP
Reimplemented in \fBACE_Object_Node\fR, \fBACE_Function_Node\fR, and \fBACE_Static_Function_Node\fR.
.SS \fBACE_SHLIB_HANDLE\fR ACE_Location_Node::handle (void)
.PP
.SS int ACE_Location_Node::open_dll (void)\fC [protected]\fR
.PP
.SS void ACE_Location_Node::pathname (const \fBACE_TCHAR\fR * h)
.PP
.SS const \fBACE_TCHAR\fR* ACE_Location_Node::pathname (void) const
.PP
.SS virtual void ACE_Location_Node::set_symbol (void * h)\fC [virtual]\fR
.PP
.SS virtual void* ACE_Location_Node::symbol (\fBACE_Service_Object_Exterminator\fR * gobbler = 0)\fC [pure virtual]\fR
.PP
Reimplemented in \fBACE_Object_Node\fR, \fBACE_Function_Node\fR, and \fBACE_Static_Function_Node\fR.
.SH MEMBER DATA DOCUMENTATION
.PP 
.SS ACE_Location_Node::ACE_ALLOC_HOOK_DECLARE
.PP
Declare the dynamic allocation hooks.
.PP
Reimplemented in \fBACE_Object_Node\fR, \fBACE_Function_Node\fR, and \fBACE_Static_Function_Node\fR.
.SS \fBACE_DLL\fR ACE_Location_Node::dll_\fC [protected]\fR
.PP
The open shared library.
.PP
.SS int ACE_Location_Node::must_delete_\fC [protected]\fR
.PP
Flag indicating whether the Service_Object generated by this Location Node should be deleted or not (\fBACE_Service_Type::DELETE_OBJ\fR.) 
.SS const \fBACE_TCHAR\fR * ACE_Location_Node::pathname_\fC [protected]\fR
.PP
Pathname to the shared library we are working on.
.PP
.SS void * ACE_Location_Node::symbol_\fC [protected]\fR
.PP
Symbol that we've obtained from the shared library.
.PP


.SH AUTHOR
.PP 
Generated automatically by Doxygen for ACE from the source code.