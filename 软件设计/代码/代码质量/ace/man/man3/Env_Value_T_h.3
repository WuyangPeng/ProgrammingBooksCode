.TH Env_Value_T_h 3 "5 Oct 2001" "ACE" \" -*- nroff -*-
.ad l
.nh
.SH NAME
Env_Value_T_h \- 
.SH SYNOPSIS
.br
.PP
\fC#include "ace/pre.h"\fR
.br
\fC#include "ace/OS.h"\fR
.br
\fC#include "ace/post.h"\fR
.br

.SS Compounds

.in +1c
.ti -1c
.RI "class \fBACE_Env_Value\fR"
.br
.in -1c
.SS Functions

.in +1c
.ti -1c
.RI "template<classT> void \fBACE_Convert\fR (const \fBACE_TCHAR\fR *s, T &t)"
.br
.ti -1c
.RI "void \fBACE_Convert\fR (const \fBACE_TCHAR\fR *s, \fBACE_TCHAR\fR *&v)"
.br
.ti -1c
.RI "void \fBACE_Convert\fR (const \fBACE_TCHAR\fR *s, const \fBACE_TCHAR\fR *&v)"
.br
.ti -1c
.RI "void \fBACE_Convert\fR (const \fBACE_TCHAR\fR *s, short &si)"
.br
.ti -1c
.RI "void \fBACE_Convert\fR (const \fBACE_TCHAR\fR *s, u_short &us)"
.br
.ti -1c
.RI "void \fBACE_Convert\fR (const \fBACE_TCHAR\fR *s, u_int &i)"
.br
.ti -1c
.RI "void \fBACE_Convert\fR (const \fBACE_TCHAR\fR *s, long &l)"
.br
.ti -1c
.RI "void \fBACE_Convert\fR (const \fBACE_TCHAR\fR *s, int &i)"
.br
.ti -1c
.RI "void \fBACE_Convert\fR (const \fBACE_TCHAR\fR *s, u_long &ul)"
.br
.ti -1c
.RI "void \fBACE_Convert\fR (const \fBACE_TCHAR\fR *s, double &d)"
.br
.in -1c
.SH DETAILED DESCRIPTION
.PP 
.PP
\fBEnv_Value_T.h\fR,v 4.20 2000/11/01 22:16:22 coryan Exp
.PP
Template to encapsulate getting a value from an environment variable and using a supplied default value if not in the environment.
.PP
\fBAuthor(s): \fR
.in +1c
 Chris Cleeland (derived from work by Carlos O'Ryan)
.PP
.SH FUNCTION DOCUMENTATION
.PP 
.SS void ACE_Convert (const \fBACE_TCHAR\fR * s, double & d)\fC [inline]\fR
.PP
.SS void ACE_Convert (const \fBACE_TCHAR\fR * s, u_long & ul)\fC [inline]\fR
.PP
.SS void ACE_Convert (const \fBACE_TCHAR\fR * s, int & i)\fC [inline]\fR
.PP
.SS void ACE_Convert (const \fBACE_TCHAR\fR * s, long & l)\fC [inline]\fR
.PP
.SS void ACE_Convert (const \fBACE_TCHAR\fR * s, u_int & i)\fC [inline]\fR
.PP
.SS void ACE_Convert (const \fBACE_TCHAR\fR * s, u_short & us)\fC [inline]\fR
.PP
.SS void ACE_Convert (const \fBACE_TCHAR\fR * s, short & si)\fC [inline]\fR
.PP
.SS void ACE_Convert (const \fBACE_TCHAR\fR * s, const \fBACE_TCHAR\fR *& v)\fC [inline]\fR
.PP
.SS void ACE_Convert (const \fBACE_TCHAR\fR * s, \fBACE_TCHAR\fR *& v)\fC [inline]\fR
.PP
.SS template<classT> void ACE_Convert (const \fBACE_TCHAR\fR * s, T & t)\fC [inline]\fR
.PP
.SH AUTHOR
.PP 
Generated automatically by Doxygen for ACE from the source code.