.TH ACE_WIN32_Asynch_Accept 3 "5 Oct 2001" "ACE" \" -*- nroff -*-
.ad l
.nh
.SH NAME
ACE_WIN32_Asynch_Accept \- This class is a factory for starting off asynchronous accepts on a listen handle. 
.SH SYNOPSIS
.br
.PP
\fC#include <WIN32_Asynch_IO.h>\fR
.PP
Inherits \fBACE_Asynch_Accept_Impl\fR, and \fBACE_WIN32_Asynch_Operation\fR.
.PP
.SS Public Methods

.in +1c
.ti -1c
.RI "\fBACE_WIN32_Asynch_Accept\fR (\fBACE_WIN32_Proactor\fR *win32_proactor)"
.br
.RI "\fIConstructor.\fR"
.ti -1c
.RI "int \fBaccept\fR (\fBACE_Message_Block\fR &message_block, u_long bytes_to_read, ACE_HANDLE accept_handle, const void *act, int priority, int signal_number = 0)"
.br
.ti -1c
.RI "\fB~ACE_WIN32_Asynch_Accept\fR (void)"
.br
.RI "\fIDestructor.\fR"
.ti -1c
.RI "int \fBopen\fR (\fBACE_Handler\fR &handler, ACE_HANDLE handle, const void *completion_key, \fBACE_Proactor\fR *proactor)"
.br
.ti -1c
.RI "int \fBcancel\fR (void)"
.br
.ti -1c
.RI "\fBACE_Proactor\fR* \fBproactor\fR (void) const"
.br
.RI "\fIReturn the underlying proactor.\fR"
.in -1c
.SH DETAILED DESCRIPTION
.PP 
This class is a factory for starting off asynchronous accepts on a listen handle.
.PP
.PP
 Once <open> is called, multiple asynchronous s can started using this class. A \fBACE_Asynch_Accept::Result\fR will be passed back to the <handler> when the asynchronous accept completes through the  callback. 
.PP
.SH CONSTRUCTOR & DESTRUCTOR DOCUMENTATION
.PP 
.SS ACE_WIN32_Asynch_Accept::ACE_WIN32_Asynch_Accept (\fBACE_WIN32_Proactor\fR * win32_proactor)
.PP
Constructor.
.PP
.SS ACE_WIN32_Asynch_Accept::~ACE_WIN32_Asynch_Accept (void)
.PP
Destructor.
.PP
.SH MEMBER FUNCTION DOCUMENTATION
.PP 
.SS int ACE_WIN32_Asynch_Accept::accept (\fBACE_Message_Block\fR & message_block, u_long bytes_to_read, ACE_HANDLE accept_handle, const void * act, int priority, int signal_number = 0)
.PP
This starts off an asynchronous accept. The asynchronous accept call also allows any initial data to be returned to the <handler>. Upto <bytes_to_read> will be read and stored in the <message_block>. The  will be used for the  call. If ( == INVALID_HANDLE), a new handle will be created.
.PP
<message_block> must be specified. This is because the address of the new connection is placed at the end of this buffer. 
.SS int ACE_WIN32_Asynch_Accept::cancel (void)
.PP
This cancels all pending accepts operations that were issued by the calling thread. The function does not cancel asynchronous operations issued by other threads. 
.PP
Reimplemented from \fBACE_WIN32_Asynch_Operation\fR.
.SS int ACE_WIN32_Asynch_Accept::open (\fBACE_Handler\fR & handler, ACE_HANDLE handle, const void * completion_key, \fBACE_Proactor\fR * proactor)
.PP
Initializes the factory with information which will be used with each asynchronous call. If (<handle> == ACE_INVALID_HANDLE),  will be called on the <handler> to get the correct handle. 
.PP
Reimplemented from \fBACE_WIN32_Asynch_Operation\fR.
.SS \fBACE_Proactor\fR * ACE_WIN32_Asynch_Accept::proactor (void) const
.PP
Return the underlying proactor.
.PP
Reimplemented from \fBACE_WIN32_Asynch_Operation\fR.

.SH AUTHOR
.PP 
Generated automatically by Doxygen for ACE from the source code.