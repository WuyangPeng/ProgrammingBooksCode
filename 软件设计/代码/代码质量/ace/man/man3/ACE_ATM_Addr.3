.TH ACE_ATM_Addr 3 "5 Oct 2001" "ACE" \" -*- nroff -*-
.ad l
.nh
.SH NAME
ACE_ATM_Addr \- Defines the ATM domain address family address format. 
.SH SYNOPSIS
.br
.PP
\fC#include <ATM_Addr.h>\fR
.PP
Inherits \fBACE_Addr\fR.
.PP
.SS Public Methods

.in +1c
.ti -1c
.RI "\fBACE_ATM_Addr\fR (unsigned char selector = \fBDEFAULT_SELECTOR\fR)"
.br
.RI "\fIDefault constructor.\fR"
.ti -1c
.RI "\fBACE_ATM_Addr\fR (const ACE_ATM_Addr &, unsigned char selector = \fBDEFAULT_SELECTOR\fR)"
.br
.RI "\fICopy constructor.\fR"
.ti -1c
.RI "\fBACE_ATM_Addr\fR (const \fBATM_Addr\fR *, unsigned char selector = \fBDEFAULT_SELECTOR\fR)"
.br
.ti -1c
.RI "\fBACE_ATM_Addr\fR (const \fBACE_TCHAR\fR sap[], unsigned char selector = \fBDEFAULT_SELECTOR\fR)"
.br
.ti -1c
.RI "\fB~ACE_ATM_Addr\fR (void)"
.br
.RI "\fIDefault dtor.\fR"
.ti -1c
.RI "void \fBinit\fR (unsigned char selector = \fBDEFAULT_SELECTOR\fR)"
.br
.RI "\fIDefault initialization for non-address values (e.g., t_atm_sap_addr.SVE_tag_addr, t_atm_sap_addr.SVE_tag_selector).\fR"
.ti -1c
.RI "int \fBset\fR (const ACE_ATM_Addr &, unsigned char selector = \fBDEFAULT_SELECTOR\fR)"
.br
.RI "\fIInitializes from another .\fR"
.ti -1c
.RI "int \fBset\fR (const \fBATM_Addr\fR *, unsigned char selector = \fBDEFAULT_SELECTOR\fR)"
.br
.ti -1c
.RI "int \fBset\fR (const \fBACE_TCHAR\fR sap[], unsigned char selector = \fBDEFAULT_SELECTOR\fR)"
.br
.ti -1c
.RI "virtual int \fBstring_to_addr\fR (const \fBACE_TCHAR\fR sap[])"
.br
.ti -1c
.RI "virtual int \fBaddr_to_string\fR (\fBACE_TCHAR\fR addr[], size_t addrlen) const"
.br
.ti -1c
.RI "const \fBACE_TCHAR\fR* \fBaddr_to_string\fR (void) const"
.br
.ti -1c
.RI "virtual void* \fBget_addr\fR (void) const"
.br
.RI "\fIReturn a pointer to the underlying network address.\fR"
.ti -1c
.RI "virtual void \fBset_addr\fR (void *, int)"
.br
.RI "\fISet a pointer to the address.\fR"
.ti -1c
.RI "unsigned char \fBget_selector\fR (void) const"
.br
.RI "\fIReturn the selector for network address.\fR"
.ti -1c
.RI "void \fBset_selector\fR (unsigned char)"
.br
.RI "\fISet the selector for the network address.\fR"
.ti -1c
.RI "int \fBoperator==\fR (const ACE_ATM_Addr &SAP) const"
.br
.ti -1c
.RI "int \fBoperator!=\fR (const ACE_ATM_Addr &SAP) const"
.br
.RI "\fICompare two addresses for inequality.\fR"
.ti -1c
.RI "void \fBdump\fR (void) const"
.br
.RI "\fIDump the state of an object.\fR"
.in -1c
.SS Public Attributes

.in +1c
.ti -1c
.RI "\fBACE_ALLOC_HOOK_DECLARE\fR"
.br
.RI "\fIDeclare the dynamic allocation hooks.\fR"
.in -1c
.SS Static Public Attributes

.in +1c
.ti -1c
.RI "const long \fBLINE_RATE\fR"
.br
.ti -1c
.RI "const int \fBOPT_FLAGS_CPID\fR"
.br
.ti -1c
.RI "const int \fBOPT_FLAGS_PMP\fR"
.br
.ti -1c
.RI "const int \fBDEFAULT_SELECTOR\fR"
.br
.in -1c
.SS Private Attributes

.in +1c
.ti -1c
.RI "\fBATM_Addr\fR \fBatm_addr_\fR"
.br
.in -1c
.SH DETAILED DESCRIPTION
.PP 
Defines the ATM domain address family address format.
.PP
.SH CONSTRUCTOR & DESTRUCTOR DOCUMENTATION
.PP 
.SS ACE_ATM_Addr::ACE_ATM_Addr (unsigned char selector = \fBDEFAULT_SELECTOR\fR)
.PP
Default constructor.
.PP
.SS ACE_ATM_Addr::ACE_ATM_Addr (const ACE_ATM_Addr &, unsigned char selector = \fBDEFAULT_SELECTOR\fR)
.PP
Copy constructor.
.PP
.SS ACE_ATM_Addr::ACE_ATM_Addr (const \fBATM_Addr\fR *, unsigned char selector = \fBDEFAULT_SELECTOR\fR)
.PP
Creates an  from an ATMSAPAddress structure. This is vendor specific (FORE systems). May need to change when other vendors are supported. 
.SS ACE_ATM_Addr::ACE_ATM_Addr (const \fBACE_TCHAR\fR sap[], unsigned char selector = \fBDEFAULT_SELECTOR\fR)
.PP
Initializes an  from the <sap> which can be "atm-address" (e.g., "47.0005.80.ffe100.0000.f20f.2200.0020480694f9.00") or "hostname" (e.g., "frisbee.cs.wustl.edu"). 
.SS ACE_ATM_Addr::~ACE_ATM_Addr (void)
.PP
Default dtor.
.PP
.SH MEMBER FUNCTION DOCUMENTATION
.PP 
.SS const \fBACE_TCHAR\fR * ACE_ATM_Addr::addr_to_string (void) const
.PP
Return the character representation of the ATM address (e.g., "47.0005.80.ffe100.0000.f20f.2200.0020480694f9.00"). Returns -1 if the <size> of the <buffer> is too small, else 0.(This version is non-reentrant since it returns a pointer to a static data area.) 
.SS int ACE_ATM_Addr::addr_to_string (\fBACE_TCHAR\fR addr[], size_t addrlen) const\fC [virtual]\fR
.PP
Return the character representation of the ATM address (e.g., "47.0005.80.ffe100.0000.f20f.2200.0020480694f9.00") storing it in the  (which is assumed to be  bytes long). This version is reentrant. Returns -1 if the  of the  is too small, else 0. 
.SS void ACE_ATM_Addr::dump (void) const
.PP
Dump the state of an object.
.PP
Reimplemented from \fBACE_Addr\fR.
.SS void * ACE_ATM_Addr::get_addr (void) const\fC [virtual]\fR
.PP
Return a pointer to the underlying network address.
.PP
Reimplemented from \fBACE_Addr\fR.
.SS unsigned char ACE_ATM_Addr::get_selector (void) const
.PP
Return the selector for network address.
.PP
.SS void ACE_ATM_Addr::init (unsigned char selector = \fBDEFAULT_SELECTOR\fR)
.PP
Default initialization for non-address values (e.g., t_atm_sap_addr.SVE_tag_addr, t_atm_sap_addr.SVE_tag_selector).
.PP
.SS int ACE_ATM_Addr::operator!= (const ACE_ATM_Addr & SAP) const
.PP
Compare two addresses for inequality.
.PP
.SS int ACE_ATM_Addr::operator== (const ACE_ATM_Addr & SAP) const
.PP
Compare two addresses for equality. The addresses are considered equal if they contain the same ATM address. Q: Is there any other check for equality needed for ATM? 
.SS int ACE_ATM_Addr::set (const \fBACE_TCHAR\fR sap[], unsigned char selector = \fBDEFAULT_SELECTOR\fR)
.PP
Initializes an  from the <sap> which can be "atm-address" (e.g., "47.0005.80.ffe100.0000.f20f.2200.0020480694f9.00") or "hostname" (e.g., "frisbee.cs.wustl.edu"). 
.SS int ACE_ATM_Addr::set (const \fBATM_Addr\fR *, unsigned char selector = \fBDEFAULT_SELECTOR\fR)
.PP
Initializes an  from an ATMSAPAddress/sockaddr_atm structure. This is vendor specific (FORE systems). May need to change when other vendors are supported. 
.SS int ACE_ATM_Addr::set (const ACE_ATM_Addr &, unsigned char selector = \fBDEFAULT_SELECTOR\fR)
.PP
Initializes from another .
.PP
.SS void ACE_ATM_Addr::set_addr (void * addr, int len)\fC [virtual]\fR
.PP
Set a pointer to the address.
.PP
Reimplemented from \fBACE_Addr\fR.
.SS void ACE_ATM_Addr::set_selector (unsigned char)
.PP
Set the selector for the network address.
.PP
.SS int ACE_ATM_Addr::string_to_addr (const \fBACE_TCHAR\fR sap[])\fC [virtual]\fR
.PP
Initializes an  from the <sap> which can be "atm-address" (e.g., "47.0005.80.ffe100.0000.f20f.2200.0020480694f9.00") or "hostname" (e.g., "frisbee.cs.wustl.edu"). 
.SH MEMBER DATA DOCUMENTATION
.PP 
.SS ACE_ATM_Addr::ACE_ALLOC_HOOK_DECLARE
.PP
Declare the dynamic allocation hooks.
.PP
Reimplemented from \fBACE_Addr\fR.
.SS const int ACE_ATM_Addr::DEFAULT_SELECTOR\fC [static]\fR
.PP
.SS const long ACE_ATM_Addr::LINE_RATE\fC [static]\fR
.PP
.SS const int ACE_ATM_Addr::OPT_FLAGS_CPID\fC [static]\fR
.PP
.SS const int ACE_ATM_Addr::OPT_FLAGS_PMP\fC [static]\fR
.PP
.SS \fBATM_Addr\fR ACE_ATM_Addr::atm_addr_\fC [private]\fR
.PP


.SH AUTHOR
.PP 
Generated automatically by Doxygen for ACE from the source code.