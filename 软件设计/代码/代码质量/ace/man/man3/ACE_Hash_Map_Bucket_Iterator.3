.TH ACE_Hash_Map_Bucket_Iterator 3 "5 Oct 2001" "ACE" \" -*- nroff -*-
.ad l
.nh
.SH NAME
ACE_Hash_Map_Bucket_Iterator \- Forward iterator for the  which only traverses a particular bucket. The particular bucket is specified by the <EXT_ID> parameter specified in the constructor. 
.SH SYNOPSIS
.br
.PP
\fC#include <Hash_Map_Manager_T.h>\fR
.PP
.SS Public Methods

.in +1c
.ti -1c
.RI "\fBACE_Hash_Map_Bucket_Iterator\fR (\fBACE_Hash_Map_Manager_Ex\fR<EXT_ID, INT_ID, HASH_KEY, COMPARE_KEYS, ACE_LOCK> &mm, const EXT_ID &ext_id, int tail = 0)"
.br
.ti -1c
.RI "ACE_Hash_Map_Bucket_Iterator<EXT_ID, INT_ID, HASH_KEY, COMPARE_KEYS, ACE_LOCK>& \fBoperator++\fR (void)"
.br
.RI "\fIPrefix advance.\fR"
.ti -1c
.RI "ACE_Hash_Map_Bucket_Iterator<EXT_ID, INT_ID, HASH_KEY, COMPARE_KEYS, ACE_LOCK> \fBoperator++\fR (int)"
.br
.RI "\fIPostfix advance.\fR"
.ti -1c
.RI "ACE_Hash_Map_Bucket_Iterator<EXT_ID, INT_ID, HASH_KEY, COMPARE_KEYS, ACE_LOCK>& \fBoperator--\fR (void)"
.br
.RI "\fIPrefix reverse.\fR"
.ti -1c
.RI "ACE_Hash_Map_Bucket_Iterator<EXT_ID, INT_ID, HASH_KEY, COMPARE_KEYS, ACE_LOCK> \fBoperator--\fR (int)"
.br
.RI "\fIPostfix reverse.\fR"
.ti -1c
.RI "\fBACE_Hash_Map_Entry\fR<EXT_ID, INT_ID>& \fBoperator *\fR (void) const"
.br
.RI "\fIReturns a reference to the interal element <this> is pointing to.\fR"
.ti -1c
.RI "\fBACE_Hash_Map_Manager_Ex\fR<EXT_ID, INT_ID, HASH_KEY, COMPARE_KEYS, ACE_LOCK>& \fBmap\fR (void)"
.br
.RI "\fIReturns reference the Hash_Map_Manager_Ex that is being iterated over.\fR"
.ti -1c
.RI "int \fBoperator==\fR (const ACE_Hash_Map_Bucket_Iterator<EXT_ID, INT_ID, HASH_KEY, COMPARE_KEYS, ACE_LOCK> &) const"
.br
.RI "\fICheck if two iterators point to the same position.\fR"
.ti -1c
.RI "int \fBoperator!=\fR (const ACE_Hash_Map_Bucket_Iterator<EXT_ID, INT_ID, HASH_KEY, COMPARE_KEYS, ACE_LOCK> &) const"
.br
.in -1c
.SS Protected Methods

.in +1c
.ti -1c
.RI "int \fBforward_i\fR (void)"
.br
.RI "\fIMove forward by one element in the set. Returns 0 when there's no more item in the set after the current items, else 1.\fR"
.ti -1c
.RI "int \fBreverse_i\fR (void)"
.br
.RI "\fIMove backward by one element in the set. Returns 0 when there's no more item in the set before the current item, else 1.\fR"
.in -1c
.SS Protected Attributes

.in +1c
.ti -1c
.RI "\fBACE_Hash_Map_Manager_Ex\fR<EXT_ID, INT_ID, HASH_KEY, COMPARE_KEYS, ACE_LOCK>* \fBmap_man_\fR"
.br
.RI "\fIMap we are iterating over.\fR"
.ti -1c
.RI "\fBssize_t\fR \fBindex_\fR"
.br
.RI "\fIKeeps track of how far we've advanced in the table.\fR"
.ti -1c
.RI "\fBACE_Hash_Map_Entry\fR<EXT_ID, INT_ID>* \fBnext_\fR"
.br
.RI "\fIKeeps track of how far we've advanced in a linked list in each table slot.\fR"
.in -1c
.SH DETAILED DESCRIPTION
.PP 

.SS template<class EXT_ID, class INT_ID, class HASH_KEY, class COMPARE_KEYS, class ACE_LOCK>  template class ACE_Hash_Map_Bucket_Iterator
Forward iterator for the  which only traverses a particular bucket. The particular bucket is specified by the <EXT_ID> parameter specified in the constructor.
.PP
.PP
 This class does not perform any internal locking of the  it is iterating upon since locking is inherently inefficient and/or error-prone within an STL-style iterator. If you require locking, you can explicitly use an  or  on the 's internal lock, which is accessible via its <mutex> method. Note that this iterator cannot be created by calling a method on the map, since this would require 
.PP
.SH CONSTRUCTOR & DESTRUCTOR DOCUMENTATION
.PP 
.SS template<classEXT_ID, classINT_ID, classHASH_KEY, classCOMPARE_KEYS, classACE_LOCK> ACE_Hash_Map_Bucket_Iterator<EXT_ID, INT_ID, HASH_KEY, COMPARE_KEYS, ACE_LOCK>::ACE_Hash_Map_Bucket_Iterator<EXT_ID, INT_ID, HASH_KEY, COMPARE_KEYS, ACE_LOCK> (\fBACE_Hash_Map_Manager_Ex\fR< EXT_ID,INT_ID,HASH_KEY,COMPARE_KEYS,ACE_LOCK >& mm, const EXT_ID & ext_id, int tail = 0)
.PP
.SH MEMBER FUNCTION DOCUMENTATION
.PP 
.SS template<classEXT_ID, classINT_ID, classHASH_KEY, classCOMPARE_KEYS, classACE_LOCK> int ACE_Hash_Map_Bucket_Iterator<EXT_ID, INT_ID, HASH_KEY, COMPARE_KEYS, ACE_LOCK>::forward_i (void)\fC [protected]\fR
.PP
Move forward by one element in the set. Returns 0 when there's no more item in the set after the current items, else 1.
.PP
.SS template<classEXT_ID, classINT_ID, classHASH_KEY, classCOMPARE_KEYS, classACE_LOCK> \fBACE_Hash_Map_Manager_Ex\fR< EXT_ID,INT_ID,HASH_KEY,COMPARE_KEYS,ACE_LOCK >& ACE_Hash_Map_Bucket_Iterator<EXT_ID, INT_ID, HASH_KEY, COMPARE_KEYS, ACE_LOCK>::map (void)
.PP
Returns reference the Hash_Map_Manager_Ex that is being iterated over.
.PP
.SS template<classEXT_ID, classINT_ID, classHASH_KEY, classCOMPARE_KEYS, classACE_LOCK> \fBACE_Hash_Map_Entry\fR< EXT_ID,INT_ID >& ACE_Hash_Map_Bucket_Iterator<EXT_ID, INT_ID, HASH_KEY, COMPARE_KEYS, ACE_LOCK>::operator * (void) const
.PP
Returns a reference to the interal element <this> is pointing to.
.PP
.SS template<classEXT_ID, classINT_ID, classHASH_KEY, classCOMPARE_KEYS, classACE_LOCK> int ACE_Hash_Map_Bucket_Iterator<EXT_ID, INT_ID, HASH_KEY, COMPARE_KEYS, ACE_LOCK>::operator!= (const ACE_Hash_Map_Bucket_Iterator< EXT_ID,INT_ID,HASH_KEY,COMPARE_KEYS,ACE_LOCK >&) const
.PP
.SS template<classEXT_ID, classINT_ID, classHASH_KEY, classCOMPARE_KEYS, classACE_LOCK> ACE_Hash_Map_Bucket_Iterator< EXT_ID,INT_ID,HASH_KEY,COMPARE_KEYS,ACE_LOCK > ACE_Hash_Map_Bucket_Iterator<EXT_ID, INT_ID, HASH_KEY, COMPARE_KEYS, ACE_LOCK>::operator++ (int)
.PP
Postfix advance.
.PP
.SS template<classEXT_ID, classINT_ID, classHASH_KEY, classCOMPARE_KEYS, classACE_LOCK> ACE_Hash_Map_Bucket_Iterator< EXT_ID,INT_ID,HASH_KEY,COMPARE_KEYS,ACE_LOCK >& ACE_Hash_Map_Bucket_Iterator<EXT_ID, INT_ID, HASH_KEY, COMPARE_KEYS, ACE_LOCK>::operator++ (void)
.PP
Prefix advance.
.PP
.SS template<classEXT_ID, classINT_ID, classHASH_KEY, classCOMPARE_KEYS, classACE_LOCK> ACE_Hash_Map_Bucket_Iterator< EXT_ID,INT_ID,HASH_KEY,COMPARE_KEYS,ACE_LOCK > ACE_Hash_Map_Bucket_Iterator<EXT_ID, INT_ID, HASH_KEY, COMPARE_KEYS, ACE_LOCK>::operator-- (int)
.PP
Postfix reverse.
.PP
.SS template<classEXT_ID, classINT_ID, classHASH_KEY, classCOMPARE_KEYS, classACE_LOCK> ACE_Hash_Map_Bucket_Iterator< EXT_ID,INT_ID,HASH_KEY,COMPARE_KEYS,ACE_LOCK >& ACE_Hash_Map_Bucket_Iterator<EXT_ID, INT_ID, HASH_KEY, COMPARE_KEYS, ACE_LOCK>::operator-- (void)
.PP
Prefix reverse.
.PP
.SS template<classEXT_ID, classINT_ID, classHASH_KEY, classCOMPARE_KEYS, classACE_LOCK> int ACE_Hash_Map_Bucket_Iterator<EXT_ID, INT_ID, HASH_KEY, COMPARE_KEYS, ACE_LOCK>::operator== (const ACE_Hash_Map_Bucket_Iterator< EXT_ID,INT_ID,HASH_KEY,COMPARE_KEYS,ACE_LOCK >&) const
.PP
Check if two iterators point to the same position.
.PP
.SS template<classEXT_ID, classINT_ID, classHASH_KEY, classCOMPARE_KEYS, classACE_LOCK> int ACE_Hash_Map_Bucket_Iterator<EXT_ID, INT_ID, HASH_KEY, COMPARE_KEYS, ACE_LOCK>::reverse_i (void)\fC [protected]\fR
.PP
Move backward by one element in the set. Returns 0 when there's no more item in the set before the current item, else 1.
.PP
.SH MEMBER DATA DOCUMENTATION
.PP 
.SS template<classEXT_ID, classINT_ID, classHASH_KEY, classCOMPARE_KEYS, classACE_LOCK> \fBssize_t\fR ACE_Hash_Map_Bucket_Iterator<EXT_ID, INT_ID, HASH_KEY, COMPARE_KEYS, ACE_LOCK>::index_\fC [protected]\fR
.PP
Keeps track of how far we've advanced in the table.
.PP
.SS template<classEXT_ID, classINT_ID, classHASH_KEY, classCOMPARE_KEYS, classACE_LOCK> \fBACE_Hash_Map_Manager_Ex\fR< EXT_ID,INT_ID,HASH_KEY,COMPARE_KEYS,ACE_LOCK >* ACE_Hash_Map_Bucket_Iterator<EXT_ID, INT_ID, HASH_KEY, COMPARE_KEYS, ACE_LOCK>::map_man_\fC [protected]\fR
.PP
Map we are iterating over.
.PP
.SS template<classEXT_ID, classINT_ID, classHASH_KEY, classCOMPARE_KEYS, classACE_LOCK> \fBACE_Hash_Map_Entry\fR< EXT_ID,INT_ID >* ACE_Hash_Map_Bucket_Iterator<EXT_ID, INT_ID, HASH_KEY, COMPARE_KEYS, ACE_LOCK>::next_\fC [protected]\fR
.PP
Keeps track of how far we've advanced in a linked list in each table slot.
.PP


.SH AUTHOR
.PP 
Generated automatically by Doxygen for ACE from the source code.