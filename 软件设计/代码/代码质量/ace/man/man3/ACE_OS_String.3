.TH ACE_OS_String 3 "5 Oct 2001" "ACE" \" -*- nroff -*-
.ad l
.nh
.SH NAME
ACE_OS_String \- This class includes functions available in string.h and ctype.h. 
.SH SYNOPSIS
.br
.PP
\fC#include <OS_String.h>\fR
.PP
Inherited by \fBACE_OS\fR.
.PP
.SS Static Public Methods

.PP
.RI "\fBFunctions from <cstring>\fR"
.br
Included are the functions defined in <cstring> and their <cwchar> equivalents.
.PP
\fB\fBTodo: \fR\fR
.in +1c
 To be complete, we should add strcoll, and strxfrm. 
.PP
.in +1c
.in +1c
.ti -1c
.RI "const void* \fBmemchr\fR (const void *s, int c, size_t len)"
.br
.RI "\fIFinds characters in a buffer (const void version).\fR"
.ti -1c
.RI "void* \fBmemchr\fR (void *s, int c, size_t len)"
.br
.RI "\fIFinds characters in a buffer (void version).\fR"
.ti -1c
.RI "int \fBmemcmp\fR (const void *t, const void *s, size_t len)"
.br
.RI "\fICompares two buffers.\fR"
.ti -1c
.RI "void* \fBmemcpy\fR (void *t, const void *s, size_t len)"
.br
.RI "\fICopies one buffer to another.\fR"
.ti -1c
.RI "void* \fBmemmove\fR (void *t, const void *s, size_t len)"
.br
.RI "\fIMoves one buffer to another.\fR"
.ti -1c
.RI "void* \fBmemset\fR (void *s, int c, size_t len)"
.br
.RI "\fIFills a buffer with a character value.\fR"
.ti -1c
.RI "char* \fBstrcat\fR (char *s, const char *t)"
.br
.RI "\fIAppends a string to another string (char version).\fR"
.ti -1c
.RI "wchar_t* \fBstrcat\fR (wchar_t *s, const wchar_t *t)"
.br
.RI "\fIAppends a string to another string (wchar_t version).\fR"
.ti -1c
.RI "const char* \fBstrchr\fR (const char *s, int c)"
.br
.RI "\fIFinds the first occurance of a character in a string (const char version).\fR"
.ti -1c
.RI "const wchar_t* \fBstrchr\fR (const wchar_t *s, wint_t c)"
.br
.RI "\fIFinds the first occurance of a character in a string (const wchar_t version).\fR"
.ti -1c
.RI "char* \fBstrchr\fR (char *s, int c)"
.br
.RI "\fIFinds the first occurance of a character in a string (char version).\fR"
.ti -1c
.RI "wchar_t* \fBstrchr\fR (wchar_t *s, wint_t c)"
.br
.RI "\fIFinds the first occurance of a character in a string (wchar_t version).\fR"
.ti -1c
.RI "int \fBstrcmp\fR (const char *s, const char *t)"
.br
.RI "\fICompares two strings (char version).\fR"
.ti -1c
.RI "int \fBstrcmp\fR (const wchar_t *s, const wchar_t *t)"
.br
.RI "\fICompares two strings (wchar_t version).\fR"
.ti -1c
.RI "char* \fBstrcpy\fR (char *s, const char *t)"
.br
.RI "\fICopies a string (char version).\fR"
.ti -1c
.RI "wchar_t* \fBstrcpy\fR (wchar_t *s, const wchar_t *t)"
.br
.RI "\fICopies a string (wchar_t version).\fR"
.ti -1c
.RI "size_t \fBstrcspn\fR (const char *s, const char *reject)"
.br
.RI "\fISearches for the first substring without any of the specified characters and returns the size of the substring (char version).\fR"
.ti -1c
.RI "size_t \fBstrcspn\fR (const wchar_t *s, const wchar_t *reject)"
.br
.RI "\fISearches for the first substring without any of the specified characters and returns the size of the substring (wchar_t version).\fR"
.ti -1c
.RI "char* \fBstrerror\fR (int errnum)"
.br
.RI "\fIReturns a system error message.\fR"
.ti -1c
.RI "size_t \fBstrlen\fR (const char *s)"
.br
.RI "\fIFinds the length of a string (char version).\fR"
.ti -1c
.RI "size_t \fBstrlen\fR (const wchar_t *s)"
.br
.RI "\fIFinds the length of a string (wchar_t version).\fR"
.ti -1c
.RI "char* \fBstrncat\fR (char *s, const char *t, size_t len)"
.br
.RI "\fIAppends part of a string to another string (char version).\fR"
.ti -1c
.RI "wchar_t* \fBstrncat\fR (wchar_t *s, const wchar_t *t, size_t len)"
.br
.RI "\fIAppends part of a string to another string (wchar_t version).\fR"
.ti -1c
.RI "int \fBstrncmp\fR (const char *s, const char *t, size_t len)"
.br
.RI "\fICompares two arrays (char version).\fR"
.ti -1c
.RI "int \fBstrncmp\fR (const wchar_t *s, const wchar_t *t, size_t len)"
.br
.RI "\fICompares two arrays (wchar_t version).\fR"
.ti -1c
.RI "char* \fBstrncpy\fR (char *s, const char *t, size_t len)"
.br
.RI "\fICopies an array (char version).\fR"
.ti -1c
.RI "wchar_t* \fBstrncpy\fR (wchar_t *s, const wchar_t *t, size_t len)"
.br
.RI "\fICopies an array (wchar_t version).\fR"
.ti -1c
.RI "const char* \fBstrpbrk\fR (const char *s1, const char *s2)"
.br
.RI "\fISearches for characters in a string (const char version).\fR"
.ti -1c
.RI "const wchar_t* \fBstrpbrk\fR (const wchar_t *s1, const wchar_t *s2)"
.br
.RI "\fISearches for characters in a string (const wchar_t version).\fR"
.ti -1c
.RI "char* \fBstrpbrk\fR (char *s1, const char *s2)"
.br
.RI "\fISearches for characters in a string (char version).\fR"
.ti -1c
.RI "wchar_t* \fBstrpbrk\fR (wchar_t *s1, const wchar_t *s2)"
.br
.RI "\fISearches for characters in a string (wchar_t version).\fR"
.ti -1c
.RI "const char* \fBstrrchr\fR (const char *s, int c)"
.br
.RI "\fIFinds the last occurance of a character in a string (const char version).\fR"
.ti -1c
.RI "const wchar_t* \fBstrrchr\fR (const wchar_t *s, wint_t c)"
.br
.RI "\fIFinds the last occurance of a character in a string (const wchar_t version).\fR"
.ti -1c
.RI "char* \fBstrrchr\fR (char *s, int c)"
.br
.RI "\fIFinds the last occurance of a character in a string (char version).\fR"
.ti -1c
.RI "wchar_t* \fBstrrchr\fR (wchar_t *s, wint_t c)"
.br
.RI "\fIFinds the last occurance of a character in a string (wchar_t version).\fR"
.ti -1c
.RI "size_t \fBstrspn\fR (const char *s1, const char *s2)"
.br
.RI "\fISearches for the first substring containing only the specified characters and returns the size of the substring (char version).\fR"
.ti -1c
.RI "size_t \fBstrspn\fR (const wchar_t *s1, const wchar_t *s2)"
.br
.RI "\fISearches for the first substring containing only the specified characters and returns the size of the substring (wchar_t version).\fR"
.ti -1c
.RI "const char* \fBstrstr\fR (const char *s, const char *t)"
.br
.RI "\fIFinds the first occurance of a substring in a string (const char version).\fR"
.ti -1c
.RI "const wchar_t* \fBstrstr\fR (const wchar_t *s, const wchar_t *t)"
.br
.RI "\fIFinds the first occurance of a substring in a string (const wchar_t version).\fR"
.ti -1c
.RI "char* \fBstrstr\fR (char *s, const char *t)"
.br
.RI "\fIFinds the first occurance of a substring in a string (char version).\fR"
.ti -1c
.RI "wchar_t* \fBstrstr\fR (wchar_t *s, const wchar_t *t)"
.br
.RI "\fIFinds the first occurance of a substring in a string (wchar_t version).\fR"
.ti -1c
.RI "char* \fBstrtok\fR (char *s, const char *tokens)"
.br
.RI "\fIFinds the next token in a string (char version).\fR"
.ti -1c
.RI "wchar_t* \fBstrtok\fR (wchar_t *s, const wchar_t *tokens)"
.br
.RI "\fIFinds the next token in a string (wchar_t version).\fR"
.in -1c
.in -1c
.PP
.RI "\fBFunctions from <cctype>\fR"
.br
Included are the functions defined in <cctype> and their <cwctype> equivalents.
.PP
Since they are often implemented as macros, we don't use the same name here. Instead, we change by prepending "ace_" (with the exception of to_lower).
.PP
\fB\fBTodo: \fR\fR
.in +1c
 To be complete, we should add: isalnum, isalpha, iscntrl isdigit, isgraph, islower, ispunct, isupper, isxdigit, and toupper. 
.PP
.in +1c
.in +1c
.ti -1c
.RI "int \fBace_isprint\fR (const \fBACE_TCHAR\fR c)"
.br
.RI "\fIReturns true if the character is a printable character.\fR"
.ti -1c
.RI "int \fBace_isspace\fR (const \fBACE_TCHAR\fR c)"
.br
.RI "\fIReturns true if the character is a space character.\fR"
.ti -1c
.RI "int \fBto_lower\fR (int c)"
.br
.RI "\fIConverts a character to lower case (char version).\fR"
.ti -1c
.RI "wint_t \fBto_lower\fR (wint_t c)"
.br
.RI "\fIConverts a character to lower case (wchar_t version).\fR"
.in -1c
.in -1c
.PP
.RI "\fBNon-standard functions\fR"
.br
These functions aren't in the standard.
.PP
.in +1c
.in +1c
.ti -1c
.RI "char* \fBitoa\fR (int value, char *string, int radix)"
.br
.RI "\fIConverts an integer to a string.\fR"
.ti -1c
.RI "wchar_t* \fBitoa\fR (int value, wchar_t *string, int radix)"
.br
.RI "\fIConverts an integer to a string.\fR"
.ti -1c
.RI "int \fBstrcasecmp\fR (const char *s, const char *t)"
.br
.RI "\fICompares two strings (case insensitive const char version).\fR"
.ti -1c
.RI "int \fBstrcasecmp\fR (const wchar_t *s, const wchar_t *t)"
.br
.RI "\fICompares two strings (case insensitive const wchar_t version).\fR"
.ti -1c
.RI "const char* \fBstrnchr\fR (const char *s, int c, size_t len)"
.br
.RI "\fIFinds the first occurance of a character in an array (const char version).\fR"
.ti -1c
.RI "const wchar_t* \fBstrnchr\fR (const wchar_t *s, wint_t c, size_t len)"
.br
.RI "\fIFinds the first occurance of a character in an array (const wchar_t version).\fR"
.ti -1c
.RI "char* \fBstrnchr\fR (char *s, int c, size_t len)"
.br
.RI "\fIFinds the first occurance of a character in an array (char version).\fR"
.ti -1c
.RI "wchar_t* \fBstrnchr\fR (wchar_t *s, wint_t c, size_t len)"
.br
.RI "\fIFinds the first occurance of a character in an array (wchar_t version).\fR"
.ti -1c
.RI "int \fBstrncasecmp\fR (const char *s, const char *t, size_t len)"
.br
.RI "\fICompares two arrays (case insensitive const char version).\fR"
.ti -1c
.RI "int \fBstrncasecmp\fR (const wchar_t *s, const wchar_t *t, size_t len)"
.br
.RI "\fICompares two arrays (case insensitive const wchar_t version).\fR"
.ti -1c
.RI "char* \fBstrecpy\fR (char *des, const char *src)"
.br
.RI "\fICopies a string, but returns a pointer to the end of the copied region (char version).\fR"
.ti -1c
.RI "wchar_t* \fBstrecpy\fR (wchar_t *s, const wchar_t *t)"
.br
.RI "\fICopies a string, but returns a pointer to the end of the copied region (wchar_t version).\fR"
.ti -1c
.RI "char* \fBstrsncpy\fR (char *dst, const char *src, size_t maxlen)"
.br
.RI "\fIThis is a "safe" c string copy function (char version).\fR"
.ti -1c
.RI "wchar_t* \fBstrsncpy\fR (wchar_t *dst, const wchar_t *src, size_t maxlen)"
.br
.RI "\fIThis is a "safe" c string copy function (wchar_t version).\fR"
.ti -1c
.RI "const char* \fBstrnstr\fR (const char *s, const char *t, size_t len)"
.br
.RI "\fIFinds the first occurance of a substring in an array (const char version).\fR"
.ti -1c
.RI "const wchar_t* \fBstrnstr\fR (const wchar_t *s, const wchar_t *t, size_t len)"
.br
.RI "\fIFinds the first occurance of a substring in an array (const wchar_t version).\fR"
.ti -1c
.RI "char* \fBstrnstr\fR (char *s, const char *t, size_t len)"
.br
.RI "\fIFinds the first occurance of a substring in an array (char version).\fR"
.ti -1c
.RI "wchar_t* \fBstrnstr\fR (wchar_t *s, const wchar_t *t, size_t len)"
.br
.RI "\fIFinds the first occurance of a substring in an array (wchar_t version).\fR"
.ti -1c
.RI "char* \fBstrdup\fR (const char *s)"
.br
.RI "\fIReturns a malloced duplicated string (char version).\fR"
.ti -1c
.RI "wchar_t* \fBstrdup\fR (const wchar_t *s)"
.br
.RI "\fIReturns a malloced duplicated string (wchar_t version).\fR"
.ti -1c
.RI "char* \fBstrtok_r\fR (char *s, const char *tokens, char **lasts)"
.br
.RI "\fIFinds the next token in a string (safe char version).\fR"
.ti -1c
.RI "double \fBstrtod\fR (const char *s, char **endptr)"
.br
.RI "\fIConverts a string to a double value (char version).\fR"
.ti -1c
.RI "double \fBstrtod\fR (const wchar_t *s, wchar_t **endptr)"
.br
.RI "\fIConverts a string to a double value (wchar_t version).\fR"
.ti -1c
.RI "long \fBstrtol\fR (const char *s, char **ptr, int base)"
.br
.RI "\fIConverts a string to a long value (char version).\fR"
.ti -1c
.RI "long \fBstrtol\fR (const wchar_t *s, wchar_t **ptr, int base)"
.br
.RI "\fIConverts a string to a long value (wchar_t version).\fR"
.ti -1c
.RI "unsigned long \fBstrtoul\fR (const char *s, char **ptr, int base)"
.br
.RI "\fIConverts a string to an unsigned long value (char version).\fR"
.ti -1c
.RI "unsigned long \fBstrtoul\fR (const wchar_t *s, wchar_t **ptr, int base)"
.br
.RI "\fIConverts a string to an unsigned long value (wchar_t version).\fR"
.in -1c
.in -1c
.SS Static Private Methods

.PP
.RI "\fBEmulation\fR"
.br
These methods are provided for platforms that do not have a native implementation.
.PP
.in +1c
.in +1c
.ti -1c
.RI "char* \fBitoa_emulation\fR (int value, char *string, int radix)"
.br
.RI "\fIEmulated itoa - Converts an integer to a string.\fR"
.ti -1c
.RI "wchar_t* \fBitow_emulation\fR (int value, wchar_t *string, int radix)"
.br
.RI "\fIEmulated itow - Converts an integer to a string.\fR"
.ti -1c
.RI "const void* \fBmemchr_emulation\fR (const void *s, int c, size_t len)"
.br
.RI "\fIEmulated memchr - Finds a character in a buffer.\fR"
.ti -1c
.RI "int \fBstrcasecmp_emulation\fR (const char *s, const char *t)"
.br
.RI "\fIEmulated strcasecmp - Performs a case insensitive comparison of strings.\fR"
.ti -1c
.RI "int \fBstrncasecmp_emulation\fR (const char *s, const char *t, size_t len)"
.br
.RI "\fIEmulated strncasecmp - Performs a case insensitvie comparison of arrays.\fR"
.ti -1c
.RI "size_t \fBstrcspn_emulation\fR (const char *s, const char *reject)"
.br
.RI "\fIEmulated strcspn - Finds a substring in a string.\fR"
.ti -1c
.RI "char* \fBstrchr_emulation\fR (char *s, int c)"
.br
.RI "\fIEmulated strchr (char version) - Finds the first occurance of a character in a string.\fR"
.ti -1c
.RI "const char* \fBstrchr_emulation\fR (const char *s, int c)"
.br
.RI "\fIEmulated strchr (const char version) - Finds the first occurance of a character in a string.\fR"
.ti -1c
.RI "char* \fBstrrchr_emulation\fR (char *s, int c)"
.br
.RI "\fIEmulated strrchr (char version) - Finds the last occurance of a character in a string.\fR"
.ti -1c
.RI "const char* \fBstrrchr_emulation\fR (const char *s, int c)"
.br
.RI "\fIEmulated strrchr (const char version) - Finds the last occurance of a character in a string.\fR"
.ti -1c
.RI "char* \fBstrtok_r_emulation\fR (char *s, const char *tokens, char **lasts)"
.br
.RI "\fIEmulated strtok_r.\fR"
.ti -1c
.RI "wchar_t* \fBwcscat_emulation\fR (wchar_t *destination, const wchar_t *source)"
.br
.RI "\fIEmulated wcscat - Appends a string.\fR"
.ti -1c
.RI "wchar_t* \fBwcschr_emulation\fR (const wchar_t *string, wint_t c)"
.br
.RI "\fIEmulated wcschr - Finds a character in a string.\fR"
.ti -1c
.RI "int \fBwcscmp_emulation\fR (const wchar_t *string1, const wchar_t *string2)"
.br
.RI "\fIEmulated wcscmp - Compares strings.\fR"
.ti -1c
.RI "wchar_t* \fBwcscpy_emulation\fR (wchar_t *destination, const wchar_t *source)"
.br
.RI "\fIEmulated wcscpy - Copies a string.\fR"
.ti -1c
.RI "int \fBwcsicmp_emulation\fR (const wchar_t *string1, const wchar_t *string2)"
.br
.RI "\fIEmulated wcsicmp - Performs a case insensitive comparison of strings.\fR"
.ti -1c
.RI "size_t \fBwcslen_emulation\fR (const wchar_t *string)"
.br
.RI "\fIEmulated wcslen - Returns the length of a string.\fR"
.ti -1c
.RI "wchar_t* \fBwcsncat_emulation\fR (wchar_t *destination, const wchar_t *source, size_t count)"
.br
.RI "\fIEmulated wcscat - Appends a string.\fR"
.ti -1c
.RI "int \fBwcsncmp_emulation\fR (const wchar_t *string1, const wchar_t *string2, size_t len)"
.br
.RI "\fIEmulated wcsncmp - Compares two arrays.\fR"
.ti -1c
.RI "wchar_t* \fBwcsncpy_emulation\fR (wchar_t *destination, const wchar_t *source, size_t len)"
.br
.RI "\fIEmulated wcsncpy - Copies an array.\fR"
.ti -1c
.RI "int \fBwcsnicmp_emulation\fR (const wchar_t *string1, const wchar_t *string2, size_t len)"
.br
.RI "\fIEmulated wcsnicmp - Performs a case insensitive comparison of two arrays.\fR"
.ti -1c
.RI "wchar_t* \fBwcspbrk_emulation\fR (const wchar_t *string, const wchar_t *charset)"
.br
.RI "\fIEmulated wcspbrk - Searches for characters in a string.\fR"
.ti -1c
.RI "wchar_t* \fBwcsrchr_emulation\fR (wchar_t *string, wint_t c)"
.br
.RI "\fIEmulated wcsrchr (wchar_t version) - Finds the last occurance of a character in a string.\fR"
.ti -1c
.RI "const wchar_t* \fBwcsrchr_emulation\fR (const wchar_t *string, wint_t c)"
.br
.RI "\fIEmulated wcsrchr (const wchar_t version) - Finds the last occurance of a character in a string.\fR"
.ti -1c
.RI "size_t \fBwcscspn_emulation\fR (const wchar_t *string, const wchar_t *reject)"
.br
.RI "\fIEmulated wcscspn.\fR"
.ti -1c
.RI "size_t \fBwcsspn_emulation\fR (const wchar_t *string, const wchar_t *charset)"
.br
.RI "\fIEmulated wcsspn.\fR"
.ti -1c
.RI "wchar_t* \fBwcsstr_emulation\fR (const wchar_t *string, const wchar_t *charset)"
.br
.RI "\fIEmulated wcsstr - Performs a case insensitive comparison of two strings.\fR"
.in -1c
.in -1c
.SH DETAILED DESCRIPTION
.PP 
This class includes functions available in string.h and ctype.h.
.PP
.SH MEMBER FUNCTION DOCUMENTATION
.PP 
.SS int ACE_OS_String::ace_isprint (const \fBACE_TCHAR\fR c)\fC [static]\fR
.PP
Returns true if the character is a printable character.
.PP
.SS int ACE_OS_String::ace_isspace (const \fBACE_TCHAR\fR c)\fC [static]\fR
.PP
Returns true if the character is a space character.
.PP
.SS wchar_t * ACE_OS_String::itoa (int value, wchar_t * string, int radix)\fC [static]\fR
.PP
Converts an integer to a string.
.PP
.SS char * ACE_OS_String::itoa (int value, char * string, int radix)\fC [static]\fR
.PP
Converts an integer to a string.
.PP
.SS char * ACE_OS_String::itoa_emulation (int value, char * string, int radix)\fC [static, private]\fR
.PP
Emulated itoa - Converts an integer to a string.
.PP
.SS wchar_t * ACE_OS_String::itow_emulation (int value, wchar_t * string, int radix)\fC [static, private]\fR
.PP
Emulated itow - Converts an integer to a string.
.PP
.SS void * ACE_OS_String::memchr (void * s, int c, size_t len)\fC [static]\fR
.PP
Finds characters in a buffer (void version).
.PP
.SS const void * ACE_OS_String::memchr (const void * s, int c, size_t len)\fC [static]\fR
.PP
Finds characters in a buffer (const void version).
.PP
.SS const void * ACE_OS_String::memchr_emulation (const void * s, int c, size_t len)\fC [static, private]\fR
.PP
Emulated memchr - Finds a character in a buffer.
.PP
.SS int ACE_OS_String::memcmp (const void * t, const void * s, size_t len)\fC [static]\fR
.PP
Compares two buffers.
.PP
.SS void * ACE_OS_String::memcpy (void * t, const void * s, size_t len)\fC [static]\fR
.PP
Copies one buffer to another.
.PP
.SS void * ACE_OS_String::memmove (void * t, const void * s, size_t len)\fC [static]\fR
.PP
Moves one buffer to another.
.PP
.SS void * ACE_OS_String::memset (void * s, int c, size_t len)\fC [static]\fR
.PP
Fills a buffer with a character value.
.PP
.SS int ACE_OS_String::strcasecmp (const wchar_t * s, const wchar_t * t)\fC [static]\fR
.PP
Compares two strings (case insensitive const wchar_t version).
.PP
.SS int ACE_OS_String::strcasecmp (const char * s, const char * t)\fC [static]\fR
.PP
Compares two strings (case insensitive const char version).
.PP
.SS int ACE_OS_String::strcasecmp_emulation (const char * s, const char * t)\fC [static, private]\fR
.PP
Emulated strcasecmp - Performs a case insensitive comparison of strings.
.PP
.SS wchar_t * ACE_OS_String::strcat (wchar_t * s, const wchar_t * t)\fC [static]\fR
.PP
Appends a string to another string (wchar_t version).
.PP
.SS char * ACE_OS_String::strcat (char * s, const char * t)\fC [static]\fR
.PP
Appends a string to another string (char version).
.PP
.SS wchar_t * ACE_OS_String::strchr (wchar_t * s, wint_t c)\fC [static]\fR
.PP
Finds the first occurance of a character in a string (wchar_t version).
.PP
.SS char * ACE_OS_String::strchr (char * s, int c)\fC [static]\fR
.PP
Finds the first occurance of a character in a string (char version).
.PP
.SS const wchar_t * ACE_OS_String::strchr (const wchar_t * s, wint_t c)\fC [static]\fR
.PP
Finds the first occurance of a character in a string (const wchar_t version).
.PP
.SS const char * ACE_OS_String::strchr (const char * s, int c)\fC [static]\fR
.PP
Finds the first occurance of a character in a string (const char version).
.PP
.SS const char * ACE_OS_String::strchr_emulation (const char * s, int c)\fC [static, private]\fR
.PP
Emulated strchr (const char version) - Finds the first occurance of a character in a string.
.PP
.SS char * ACE_OS_String::strchr_emulation (char * s, int c)\fC [static, private]\fR
.PP
Emulated strchr (char version) - Finds the first occurance of a character in a string.
.PP
.SS int ACE_OS_String::strcmp (const wchar_t * s, const wchar_t * t)\fC [static]\fR
.PP
Compares two strings (wchar_t version).
.PP
.SS int ACE_OS_String::strcmp (const char * s, const char * t)\fC [static]\fR
.PP
Compares two strings (char version).
.PP
.SS wchar_t * ACE_OS_String::strcpy (wchar_t * s, const wchar_t * t)\fC [static]\fR
.PP
Copies a string (wchar_t version).
.PP
.SS char * ACE_OS_String::strcpy (char * s, const char * t)\fC [static]\fR
.PP
Copies a string (char version).
.PP
.SS size_t ACE_OS_String::strcspn (const wchar_t * s, const wchar_t * reject)\fC [static]\fR
.PP
Searches for the first substring without any of the specified characters and returns the size of the substring (wchar_t version).
.PP
.SS size_t ACE_OS_String::strcspn (const char * s, const char * reject)\fC [static]\fR
.PP
Searches for the first substring without any of the specified characters and returns the size of the substring (char version).
.PP
.SS size_t ACE_OS_String::strcspn_emulation (const char * s, const char * reject)\fC [static, private]\fR
.PP
Emulated strcspn - Finds a substring in a string.
.PP
.SS wchar_t * ACE_OS_String::strdup (const wchar_t * s)\fC [static]\fR
.PP
Returns a malloced duplicated string (wchar_t version).
.PP
.SS char * ACE_OS_String::strdup (const char * s)\fC [static]\fR
.PP
Returns a malloced duplicated string (char version).
.PP
.SS wchar_t * ACE_OS_String::strecpy (wchar_t * s, const wchar_t * t)\fC [static]\fR
.PP
Copies a string, but returns a pointer to the end of the copied region (wchar_t version).
.PP
.SS char * ACE_OS_String::strecpy (char * des, const char * src)\fC [static]\fR
.PP
Copies a string, but returns a pointer to the end of the copied region (char version).
.PP
.SS char * ACE_OS_String::strerror (int errnum)\fC [static]\fR
.PP
Returns a system error message.
.PP
.SS size_t ACE_OS_String::strlen (const wchar_t * s)\fC [static]\fR
.PP
Finds the length of a string (wchar_t version).
.PP
.SS size_t ACE_OS_String::strlen (const char * s)\fC [static]\fR
.PP
Finds the length of a string (char version).
.PP
.SS int ACE_OS_String::strncasecmp (const wchar_t * s, const wchar_t * t, size_t len)\fC [static]\fR
.PP
Compares two arrays (case insensitive const wchar_t version).
.PP
.SS int ACE_OS_String::strncasecmp (const char * s, const char * t, size_t len)\fC [static]\fR
.PP
Compares two arrays (case insensitive const char version).
.PP
.SS int ACE_OS_String::strncasecmp_emulation (const char * s, const char * t, size_t len)\fC [static, private]\fR
.PP
Emulated strncasecmp - Performs a case insensitvie comparison of arrays.
.PP
.SS wchar_t * ACE_OS_String::strncat (wchar_t * s, const wchar_t * t, size_t len)\fC [static]\fR
.PP
Appends part of a string to another string (wchar_t version).
.PP
.SS char * ACE_OS_String::strncat (char * s, const char * t, size_t len)\fC [static]\fR
.PP
Appends part of a string to another string (char version).
.PP
.SS wchar_t * ACE_OS_String::strnchr (wchar_t * s, wint_t c, size_t len)\fC [static]\fR
.PP
Finds the first occurance of a character in an array (wchar_t version).
.PP
.SS char * ACE_OS_String::strnchr (char * s, int c, size_t len)\fC [static]\fR
.PP
Finds the first occurance of a character in an array (char version).
.PP
.SS const wchar_t * ACE_OS_String::strnchr (const wchar_t * s, wint_t c, size_t len)\fC [static]\fR
.PP
Finds the first occurance of a character in an array (const wchar_t version).
.PP
.SS const char * ACE_OS_String::strnchr (const char * s, int c, size_t len)\fC [static]\fR
.PP
Finds the first occurance of a character in an array (const char version).
.PP
.SS int ACE_OS_String::strncmp (const wchar_t * s, const wchar_t * t, size_t len)\fC [static]\fR
.PP
Compares two arrays (wchar_t version).
.PP
.SS int ACE_OS_String::strncmp (const char * s, const char * t, size_t len)\fC [static]\fR
.PP
Compares two arrays (char version).
.PP
.SS wchar_t * ACE_OS_String::strncpy (wchar_t * s, const wchar_t * t, size_t len)\fC [static]\fR
.PP
Copies an array (wchar_t version).
.PP
.SS char * ACE_OS_String::strncpy (char * s, const char * t, size_t len)\fC [static]\fR
.PP
Copies an array (char version).
.PP
.SS wchar_t * ACE_OS_String::strnstr (wchar_t * s, const wchar_t * t, size_t len)\fC [static]\fR
.PP
Finds the first occurance of a substring in an array (wchar_t version).
.PP
.SS char * ACE_OS_String::strnstr (char * s, const char * t, size_t len)\fC [static]\fR
.PP
Finds the first occurance of a substring in an array (char version).
.PP
.SS const wchar_t * ACE_OS_String::strnstr (const wchar_t * s, const wchar_t * t, size_t len)\fC [static]\fR
.PP
Finds the first occurance of a substring in an array (const wchar_t version).
.PP
.SS const char * ACE_OS_String::strnstr (const char * s, const char * t, size_t len)\fC [static]\fR
.PP
Finds the first occurance of a substring in an array (const char version).
.PP
.SS wchar_t * ACE_OS_String::strpbrk (wchar_t * s1, const wchar_t * s2)\fC [static]\fR
.PP
Searches for characters in a string (wchar_t version).
.PP
.SS char * ACE_OS_String::strpbrk (char * s1, const char * s2)\fC [static]\fR
.PP
Searches for characters in a string (char version).
.PP
.SS const wchar_t * ACE_OS_String::strpbrk (const wchar_t * s1, const wchar_t * s2)\fC [static]\fR
.PP
Searches for characters in a string (const wchar_t version).
.PP
.SS const char * ACE_OS_String::strpbrk (const char * s1, const char * s2)\fC [static]\fR
.PP
Searches for characters in a string (const char version).
.PP
.SS wchar_t * ACE_OS_String::strrchr (wchar_t * s, wint_t c)\fC [static]\fR
.PP
Finds the last occurance of a character in a string (wchar_t version).
.PP
.SS char * ACE_OS_String::strrchr (char * s, int c)\fC [static]\fR
.PP
Finds the last occurance of a character in a string (char version).
.PP
.SS const wchar_t * ACE_OS_String::strrchr (const wchar_t * s, wint_t c)\fC [static]\fR
.PP
Finds the last occurance of a character in a string (const wchar_t version).
.PP
.SS const char * ACE_OS_String::strrchr (const char * s, int c)\fC [static]\fR
.PP
Finds the last occurance of a character in a string (const char version).
.PP
.SS const char * ACE_OS_String::strrchr_emulation (const char * s, int c)\fC [static, private]\fR
.PP
Emulated strrchr (const char version) - Finds the last occurance of a character in a string.
.PP
.SS char * ACE_OS_String::strrchr_emulation (char * s, int c)\fC [static, private]\fR
.PP
Emulated strrchr (char version) - Finds the last occurance of a character in a string.
.PP
.SS wchar_t * ACE_OS_String::strsncpy (wchar_t * dst, const wchar_t * src, size_t maxlen)\fC [static]\fR
.PP
This is a "safe" c string copy function (wchar_t version).
.PP
The function doesn't check for a 0 <dst>, because this will give problems anyway. When <src> is 0 an empty string is made. We do not "touch" *<dst> if maxlen is 0. Returns <dst>. 
.SS char * ACE_OS_String::strsncpy (char * dst, const char * src, size_t maxlen)\fC [static]\fR
.PP
This is a "safe" c string copy function (char version).
.PP
The function doesn't check for a 0 <dst>, because this will give problems anyway. When <src> is 0 an empty string is made. We do not "touch" *<dst> if maxlen is 0. Returns <dst>. 
.SS size_t ACE_OS_String::strspn (const wchar_t * s1, const wchar_t * s2)\fC [static]\fR
.PP
Searches for the first substring containing only the specified characters and returns the size of the substring (wchar_t version).
.PP
.SS size_t ACE_OS_String::strspn (const char * s1, const char * s2)\fC [static]\fR
.PP
Searches for the first substring containing only the specified characters and returns the size of the substring (char version).
.PP
.SS wchar_t * ACE_OS_String::strstr (wchar_t * s, const wchar_t * t)\fC [static]\fR
.PP
Finds the first occurance of a substring in a string (wchar_t version).
.PP
.SS char * ACE_OS_String::strstr (char * s, const char * t)\fC [static]\fR
.PP
Finds the first occurance of a substring in a string (char version).
.PP
.SS const wchar_t * ACE_OS_String::strstr (const wchar_t * s, const wchar_t * t)\fC [static]\fR
.PP
Finds the first occurance of a substring in a string (const wchar_t version).
.PP
.SS const char * ACE_OS_String::strstr (const char * s, const char * t)\fC [static]\fR
.PP
Finds the first occurance of a substring in a string (const char version).
.PP
.SS double ACE_OS_String::strtod (const wchar_t * s, wchar_t ** endptr)\fC [static]\fR
.PP
Converts a string to a double value (wchar_t version).
.PP
.SS double ACE_OS_String::strtod (const char * s, char ** endptr)\fC [static]\fR
.PP
Converts a string to a double value (char version).
.PP
.SS wchar_t * ACE_OS_String::strtok (wchar_t * s, const wchar_t * tokens)\fC [static]\fR
.PP
Finds the next token in a string (wchar_t version).
.PP
.SS char * ACE_OS_String::strtok (char * s, const char * tokens)\fC [static]\fR
.PP
Finds the next token in a string (char version).
.PP
.SS char * ACE_OS_String::strtok_r (char * s, const char * tokens, char ** lasts)\fC [static]\fR
.PP
Finds the next token in a string (safe char version).
.PP
.SS char * ACE_OS_String::strtok_r_emulation (char * s, const char * tokens, char ** lasts)\fC [static, private]\fR
.PP
Emulated strtok_r.
.PP
.SS long ACE_OS_String::strtol (const wchar_t * s, wchar_t ** ptr, int base)\fC [static]\fR
.PP
Converts a string to a long value (wchar_t version).
.PP
.SS long ACE_OS_String::strtol (const char * s, char ** ptr, int base)\fC [static]\fR
.PP
Converts a string to a long value (char version).
.PP
.SS unsigned long ACE_OS_String::strtoul (const wchar_t * s, wchar_t ** ptr, int base)\fC [static]\fR
.PP
Converts a string to an unsigned long value (wchar_t version).
.PP
.SS unsigned long ACE_OS_String::strtoul (const char * s, char ** ptr, int base)\fC [static]\fR
.PP
Converts a string to an unsigned long value (char version).
.PP
.SS wint_t ACE_OS_String::to_lower (wint_t c)\fC [static]\fR
.PP
Converts a character to lower case (wchar_t version).
.PP
.SS int ACE_OS_String::to_lower (int c)\fC [static]\fR
.PP
Converts a character to lower case (char version).
.PP
.SS wchar_t * ACE_OS_String::wcscat_emulation (wchar_t * destination, const wchar_t * source)\fC [static, private]\fR
.PP
Emulated wcscat - Appends a string.
.PP
.SS wchar_t * ACE_OS_String::wcschr_emulation (const wchar_t * string, wint_t c)\fC [static, private]\fR
.PP
Emulated wcschr - Finds a character in a string.
.PP
.SS int ACE_OS_String::wcscmp_emulation (const wchar_t * string1, const wchar_t * string2)\fC [static, private]\fR
.PP
Emulated wcscmp - Compares strings.
.PP
.SS wchar_t * ACE_OS_String::wcscpy_emulation (wchar_t * destination, const wchar_t * source)\fC [static, private]\fR
.PP
Emulated wcscpy - Copies a string.
.PP
.SS size_t ACE_OS_String::wcscspn_emulation (const wchar_t * string, const wchar_t * reject)\fC [static, private]\fR
.PP
Emulated wcscspn.
.PP
.SS int ACE_OS_String::wcsicmp_emulation (const wchar_t * string1, const wchar_t * string2)\fC [static, private]\fR
.PP
Emulated wcsicmp - Performs a case insensitive comparison of strings.
.PP
.SS size_t ACE_OS_String::wcslen_emulation (const wchar_t * string)\fC [static, private]\fR
.PP
Emulated wcslen - Returns the length of a string.
.PP
.SS wchar_t * ACE_OS_String::wcsncat_emulation (wchar_t * destination, const wchar_t * source, size_t count)\fC [static, private]\fR
.PP
Emulated wcscat - Appends a string.
.PP
.SS int ACE_OS_String::wcsncmp_emulation (const wchar_t * string1, const wchar_t * string2, size_t len)\fC [static, private]\fR
.PP
Emulated wcsncmp - Compares two arrays.
.PP
.SS wchar_t * ACE_OS_String::wcsncpy_emulation (wchar_t * destination, const wchar_t * source, size_t len)\fC [static, private]\fR
.PP
Emulated wcsncpy - Copies an array.
.PP
.SS int ACE_OS_String::wcsnicmp_emulation (const wchar_t * string1, const wchar_t * string2, size_t len)\fC [static, private]\fR
.PP
Emulated wcsnicmp - Performs a case insensitive comparison of two arrays.
.PP
.SS wchar_t * ACE_OS_String::wcspbrk_emulation (const wchar_t * string, const wchar_t * charset)\fC [static, private]\fR
.PP
Emulated wcspbrk - Searches for characters in a string.
.PP
.SS const wchar_t * ACE_OS_String::wcsrchr_emulation (const wchar_t * string, wint_t c)\fC [static, private]\fR
.PP
Emulated wcsrchr (const wchar_t version) - Finds the last occurance of a character in a string.
.PP
.SS wchar_t * ACE_OS_String::wcsrchr_emulation (wchar_t * string, wint_t c)\fC [static, private]\fR
.PP
Emulated wcsrchr (wchar_t version) - Finds the last occurance of a character in a string.
.PP
.SS size_t ACE_OS_String::wcsspn_emulation (const wchar_t * string, const wchar_t * charset)\fC [static, private]\fR
.PP
Emulated wcsspn.
.PP
.SS wchar_t * ACE_OS_String::wcsstr_emulation (const wchar_t * string, const wchar_t * charset)\fC [static, private]\fR
.PP
Emulated wcsstr - Performs a case insensitive comparison of two strings.
.PP


.SH AUTHOR
.PP 
Generated automatically by Doxygen for ACE from the source code.