.TH ACE_Refcounted_Recyclable_Handler_Cleanup_Strategy 3 "5 Oct 2001" "ACE" \" -*- nroff -*-
.ad l
.nh
.SH NAME
ACE_Refcounted_Recyclable_Handler_Cleanup_Strategy \- Defines a strategy to be followed for cleaning up entries which are svc_handlers from a container. 
.SH SYNOPSIS
.br
.PP
\fC#include <Cleanup_Strategies_T.h>\fR
.PP
Inherits \fBACE_Cleanup_Strategy< KEY,VALUE,CONTAINER >\fR.
.PP
.SS Public Methods

.in +1c
.ti -1c
.RI "virtual int \fBcleanup\fR (CONTAINER &container, KEY *key, VALUE *value)"
.br
.RI "\fIThe method which will do the cleanup of the entry in the container.\fR"
.in -1c
.SH DETAILED DESCRIPTION
.PP 

.SS template<class KEY, class VALUE, class CONTAINER>  template class ACE_Refcounted_Recyclable_Handler_Cleanup_Strategy
Defines a strategy to be followed for cleaning up entries which are svc_handlers from a container.
.PP
.PP
 The entry to be cleaned up is removed from the container. Here, since we are dealing with recyclable svc_handlers with addresses which are refcountable specifically, we perform a couple of extra operations and do so without any locking. 
.PP
.SH MEMBER FUNCTION DOCUMENTATION
.PP 
.SS template<classKEY, classVALUE, classCONTAINER> int ACE_Refcounted_Recyclable_Handler_Cleanup_Strategy<KEY, VALUE, CONTAINER>::cleanup (CONTAINER & container, KEY * key, VALUE * value)\fC [virtual]\fR
.PP
The method which will do the cleanup of the entry in the container.
.PP
Reimplemented from \fBACE_Cleanup_Strategy\fR.

.SH AUTHOR
.PP 
Generated automatically by Doxygen for ACE from the source code.