.TH ACE_Message_Queue_Reverse_Iterator 3 "5 Oct 2001" "ACE" \" -*- nroff -*-
.ad l
.nh
.SH NAME
ACE_Message_Queue_Reverse_Iterator \- Reverse Iterator for the . 
.SH SYNOPSIS
.br
.PP
\fC#include <Message_Queue_T.h>\fR
.PP
.SS Public Methods

.in +1c
.ti -1c
.RI "\fBACE_Message_Queue_Reverse_Iterator\fR (\fBACE_Message_Queue\fR <ACE_SYNCH_USE> &queue)"
.br
.ti -1c
.RI "int \fBnext\fR (\fBACE_Message_Block\fR *&entry)"
.br
.RI "\fIPass back the <entry> that hasn't been seen in the queue. Returns 0 when all items have been seen, else 1.\fR"
.ti -1c
.RI "int \fBdone\fR (void) const"
.br
.RI "\fIReturns 1 when all items have been seen, else 0.\fR"
.ti -1c
.RI "int \fBadvance\fR (void)"
.br
.RI "\fIMove forward by one element in the queue. Returns 0 when all the items in the set have been seen, else 1.\fR"
.ti -1c
.RI "void \fBdump\fR (void) const"
.br
.RI "\fIDump the state of an object.\fR"
.in -1c
.SS Public Attributes

.in +1c
.ti -1c
.RI "\fBACE_ALLOC_HOOK_DECLARE\fR"
.br
.RI "\fIDeclare the dynamic allocation hooks.\fR"
.in -1c
.SS Private Attributes

.in +1c
.ti -1c
.RI "\fBACE_Message_Queue\fR<ACE_SYNCH_USE>& \fBqueue_\fR"
.br
.RI "\fIMessage_Queue we are iterating over.\fR"
.ti -1c
.RI "\fBACE_Message_Block\fR* \fBcurr_\fR"
.br
.RI "\fIKeeps track of how far we've advanced...\fR"
.in -1c
.SH DETAILED DESCRIPTION
.PP 

.SS template<ACE_SYNCH_DECL>  template class ACE_Message_Queue_Reverse_Iterator
Reverse Iterator for the .
.PP
.SH CONSTRUCTOR & DESTRUCTOR DOCUMENTATION
.PP 
.SS template<ACE_SYNCH_DECL> ACE_Message_Queue_Reverse_Iterator<>::ACE_Message_Queue_Reverse_Iterator<> (\fBACE_Message_Queue\fR< ACE_SYNCH_USE >& queue)
.PP
.SH MEMBER FUNCTION DOCUMENTATION
.PP 
.SS template<ACE_SYNCH_DECL> int ACE_Message_Queue_Reverse_Iterator<>::advance (void)
.PP
Move forward by one element in the queue. Returns 0 when all the items in the set have been seen, else 1.
.PP
.SS template<ACE_SYNCH_DECL> int ACE_Message_Queue_Reverse_Iterator<>::done (void) const
.PP
Returns 1 when all items have been seen, else 0.
.PP
.SS template<ACE_SYNCH_DECL> void ACE_Message_Queue_Reverse_Iterator<>::dump (void) const
.PP
Dump the state of an object.
.PP
.SS template<ACE_SYNCH_DECL> int ACE_Message_Queue_Reverse_Iterator<>::next (\fBACE_Message_Block\fR *& entry)
.PP
Pass back the <entry> that hasn't been seen in the queue. Returns 0 when all items have been seen, else 1.
.PP
.SH MEMBER DATA DOCUMENTATION
.PP 
.SS template<ACE_SYNCH_DECL> ACE_Message_Queue_Reverse_Iterator<>::ACE_ALLOC_HOOK_DECLARE
.PP
Declare the dynamic allocation hooks.
.PP
.SS template<ACE_SYNCH_DECL> \fBACE_Message_Block\fR * ACE_Message_Queue_Reverse_Iterator<>::curr_\fC [private]\fR
.PP
Keeps track of how far we've advanced...
.PP
.SS template<ACE_SYNCH_DECL> \fBACE_Message_Queue\fR< ACE_SYNCH_USE >& ACE_Message_Queue_Reverse_Iterator<>::queue_\fC [private]\fR
.PP
Message_Queue we are iterating over.
.PP


.SH AUTHOR
.PP 
Generated automatically by Doxygen for ACE from the source code.