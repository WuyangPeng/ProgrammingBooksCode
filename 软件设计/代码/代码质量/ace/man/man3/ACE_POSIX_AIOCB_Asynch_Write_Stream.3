.TH ACE_POSIX_AIOCB_Asynch_Write_Stream 3 "5 Oct 2001" "ACE" \" -*- nroff -*-
.ad l
.nh
.SH NAME
ACE_POSIX_AIOCB_Asynch_Write_Stream \- This class implements  for  (Asynchronous I/O Control Blocks) based implementation of Proactor. 
.SH SYNOPSIS
.br
.PP
\fC#include <POSIX_Asynch_IO.h>\fR
.PP
Inherits \fBACE_Asynch_Write_Stream_Impl\fR, and \fBACE_POSIX_AIOCB_Asynch_Operation\fR.
.PP
Inherited by \fBACE_POSIX_AIOCB_Asynch_Write_File\fR.
.PP
.SS Public Methods

.in +1c
.ti -1c
.RI "\fBACE_POSIX_AIOCB_Asynch_Write_Stream\fR (\fBACE_POSIX_AIOCB_Proactor\fR *posix_aiocb_proactor)"
.br
.RI "\fIConstructor.\fR"
.ti -1c
.RI "int \fBwrite\fR (\fBACE_Message_Block\fR &message_block, u_long bytes_to_write, const void *act, int priority, int signal_number = 0)"
.br
.RI "\fIThis starts off an asynchronous write. Upto <bytes_to_write> will be written from the <message_block>.\fR"
.ti -1c
.RI "virtual \fB~ACE_POSIX_AIOCB_Asynch_Write_Stream\fR (void)"
.br
.RI "\fIDestructor.\fR"
.ti -1c
.RI "int \fBopen\fR (\fBACE_Handler\fR &handler, ACE_HANDLE handle, const void *completion_key, \fBACE_Proactor\fR *proactor = 0)"
.br
.ti -1c
.RI "int \fBcancel\fR (void)"
.br
.RI "\fINot implemented. Returns 0.\fR"
.ti -1c
.RI "\fBACE_Proactor\fR* \fBproactor\fR (void) const"
.br
.RI "\fIReturn the underlying proactor.\fR"
.in -1c
.SH DETAILED DESCRIPTION
.PP 
This class implements  for  (Asynchronous I/O Control Blocks) based implementation of Proactor.
.PP
.SH CONSTRUCTOR & DESTRUCTOR DOCUMENTATION
.PP 
.SS ACE_POSIX_AIOCB_Asynch_Write_Stream::ACE_POSIX_AIOCB_Asynch_Write_Stream (\fBACE_POSIX_AIOCB_Proactor\fR * posix_aiocb_proactor)
.PP
Constructor.
.PP
.SS ACE_POSIX_AIOCB_Asynch_Write_Stream::~ACE_POSIX_AIOCB_Asynch_Write_Stream (void)\fC [virtual]\fR
.PP
Destructor.
.PP
.SH MEMBER FUNCTION DOCUMENTATION
.PP 
.SS int ACE_POSIX_AIOCB_Asynch_Write_Stream::cancel (void)
.PP
Not implemented. Returns 0.
.PP
@ 
.PP
Reimplemented from \fBACE_POSIX_Asynch_Operation\fR.
.PP
Reimplemented in \fBACE_POSIX_AIOCB_Asynch_Write_File\fR.
.SS int ACE_POSIX_AIOCB_Asynch_Write_Stream::open (\fBACE_Handler\fR & handler, ACE_HANDLE handle, const void * completion_key, \fBACE_Proactor\fR * proactor = 0)
.PP
Initializes the factory with information which will be used with each asynchronous call. If (<handle> == ACE_INVALID_HANDLE),  will be called on the <handler> to get the correct handle. 
.PP
Reimplemented from \fBACE_POSIX_Asynch_Operation\fR.
.PP
Reimplemented in \fBACE_POSIX_AIOCB_Asynch_Write_File\fR.
.SS \fBACE_Proactor\fR * ACE_POSIX_AIOCB_Asynch_Write_Stream::proactor (void) const
.PP
Return the underlying proactor.
.PP
Reimplemented from \fBACE_POSIX_Asynch_Operation\fR.
.PP
Reimplemented in \fBACE_POSIX_AIOCB_Asynch_Write_File\fR.
.SS int ACE_POSIX_AIOCB_Asynch_Write_Stream::write (\fBACE_Message_Block\fR & message_block, u_long bytes_to_write, const void * act, int priority, int signal_number = 0)
.PP
This starts off an asynchronous write. Upto <bytes_to_write> will be written from the <message_block>.
.PP
Reimplemented in \fBACE_POSIX_AIOCB_Asynch_Write_File\fR.

.SH AUTHOR
.PP 
Generated automatically by Doxygen for ACE from the source code.