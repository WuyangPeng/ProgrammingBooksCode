.TH ACE_POSIX_Asynch_Read_Dgram_Result 3 "5 Oct 2001" "ACE" \" -*- nroff -*-
.ad l
.nh
.SH NAME
ACE_POSIX_Asynch_Read_Dgram_Result \- This is class provides concrete implementation for \fBACE_Asynch_Read_Dgram::Result\fR class. 
.SH SYNOPSIS
.br
.PP
\fC#include <POSIX_Asynch_IO.h>\fR
.PP
Inherits \fBACE_Asynch_Read_Dgram_Result_Impl\fR, and \fBACE_POSIX_Asynch_Result\fR.
.PP
.SS Public Methods

.in +1c
.ti -1c
.RI "u_long \fBbytes_to_read\fR (void) const"
.br
.RI "\fIThe number of bytes which were requested at the start of the asynchronous read.\fR"
.ti -1c
.RI "\fBACE_Message_Block\fR* \fBmessage_block\fR (void) const"
.br
.RI "\fIMessage block which contains the read data.\fR"
.ti -1c
.RI "int \fBremote_address\fR (\fBACE_Addr\fR& addr) const"
.br
.RI "\fIThe address of where the packet came from.\fR"
.ti -1c
.RI "sockaddr* \fBsaddr\fR () const"
.br
.ti -1c
.RI "int \fBflags\fR (void) const"
.br
.RI "\fIThe flags used in the read.\fR"
.ti -1c
.RI "ACE_HANDLE \fBhandle\fR (void) const"
.br
.RI "\fII/O handle used for reading.\fR"
.ti -1c
.RI "u_long \fBbytes_transferred\fR (void) const"
.br
.RI "\fINumber of bytes transferred by the operation.\fR"
.ti -1c
.RI "const void* \fBact\fR (void) const"
.br
.RI "\fIACT associated with the operation.\fR"
.ti -1c
.RI "int \fBsuccess\fR (void) const"
.br
.RI "\fIDid the operation succeed?\fR"
.ti -1c
.RI "const void* \fBcompletion_key\fR (void) const"
.br
.ti -1c
.RI "u_long \fBerror\fR (void) const"
.br
.RI "\fIError value if the operation fail.\fR"
.ti -1c
.RI "ACE_HANDLE \fBevent\fR (void) const"
.br
.RI "\fIEvent associated with the \fBOVERLAPPED\fR structure.\fR"
.ti -1c
.RI "u_long \fBoffset\fR (void) const"
.br
.RI "\fIThis really make sense only when doing file I/O.\fR"
.ti -1c
.RI "u_long \fBoffset_high\fR (void) const"
.br
.RI "\fIOffset_high associated with the \fBOVERLAPPED\fR structure.\fR"
.ti -1c
.RI "int \fBpriority\fR (void) const"
.br
.RI "\fIThe priority of the asynchronous operation. Currently, this is not supported on Win32.\fR"
.ti -1c
.RI "int \fBsignal_number\fR (void) const"
.br
.RI "\fINo-op. Returns 0.\fR"
.ti -1c
.RI "int \fBpost_completion\fR (\fBACE_Proactor_Impl\fR *proactor)"
.br
.RI "\fIPost <this> to the Proactor's completion port.\fR"
.in -1c
.SS Protected Methods

.in +1c
.ti -1c
.RI "\fBACE_POSIX_Asynch_Read_Dgram_Result\fR (\fBACE_Handler\fR &handler, ACE_HANDLE handle, \fBACE_Message_Block\fR *message_block, u_long bytes_to_read, int flags, int protocol_family, const void* act, ACE_HANDLE event, int priority, int signal_number = 0)"
.br
.ti -1c
.RI "virtual void \fBcomplete\fR (u_long bytes_transferred, int success, const void *completion_key, u_long error)"
.br
.RI "\fIProactor will call this method when the read completes.\fR"
.ti -1c
.RI "virtual \fB~ACE_POSIX_Asynch_Read_Dgram_Result\fR (void)"
.br
.RI "\fIDestructor.\fR"
.in -1c
.SS Protected Attributes

.in +1c
.ti -1c
.RI "u_long \fBbytes_to_read_\fR"
.br
.RI "\fIBytes requested when the asynchronous read was initiated.\fR"
.ti -1c
.RI "\fBACE_Message_Block\fR* \fBmessage_block_\fR"
.br
.RI "\fIMessage block for reading the data into.\fR"
.ti -1c
.RI "\fBACE_Addr\fR* \fBremote_address_\fR"
.br
.RI "\fIThe address of where the packet came from.\fR"
.ti -1c
.RI "int \fBaddr_len_\fR"
.br
.ti -1c
.RI "int \fBflags_\fR"
.br
.RI "\fIThe flags used in the read.\fR"
.ti -1c
.RI "ACE_HANDLE \fBhandle_\fR"
.br
.RI "\fII/O handle used for reading.\fR"
.in -1c
.SS Friends

.in +1c
.ti -1c
.RI "class \fBACE_POSIX_AIOCB_Asynch_Read_Dgram\fR"
.br
.ti -1c
.RI "class \fBACE_POSIX_Proactor\fR"
.br
.in -1c
.SH DETAILED DESCRIPTION
.PP 
This is class provides concrete implementation for \fBACE_Asynch_Read_Dgram::Result\fR class.
.PP
.SH CONSTRUCTOR & DESTRUCTOR DOCUMENTATION
.PP 
.SS ACE_POSIX_Asynch_Read_Dgram_Result::ACE_POSIX_Asynch_Read_Dgram_Result (\fBACE_Handler\fR & handler, ACE_HANDLE handle, \fBACE_Message_Block\fR * message_block, u_long bytes_to_read, int flags, int protocol_family, const void * act, ACE_HANDLE event, int priority, int signal_number = 0)\fC [protected]\fR
.PP
.SS ACE_POSIX_Asynch_Read_Dgram_Result::~ACE_POSIX_Asynch_Read_Dgram_Result (void)\fC [protected, virtual]\fR
.PP
Destructor.
.PP
.SH MEMBER FUNCTION DOCUMENTATION
.PP 
.SS const void * ACE_POSIX_Asynch_Read_Dgram_Result::act (void) const
.PP
ACT associated with the operation.
.PP
Reimplemented from \fBACE_POSIX_Asynch_Result\fR.
.SS u_long ACE_POSIX_Asynch_Read_Dgram_Result::bytes_to_read (void) const
.PP
The number of bytes which were requested at the start of the asynchronous read.
.PP
.SS u_long ACE_POSIX_Asynch_Read_Dgram_Result::bytes_transferred (void) const
.PP
Number of bytes transferred by the operation.
.PP
Reimplemented from \fBACE_POSIX_Asynch_Result\fR.
.SS void ACE_POSIX_Asynch_Read_Dgram_Result::complete (u_long bytes_transferred, int success, const void * completion_key, u_long error)\fC [protected, virtual]\fR
.PP
Proactor will call this method when the read completes.
.PP
.SS const void * ACE_POSIX_Asynch_Read_Dgram_Result::completion_key (void) const
.PP
This returns the ACT associated with the handle when it was registered with the I/O completion port. This ACT is not the same as the ACT associated with the asynchronous operation. 
.PP
Reimplemented from \fBACE_POSIX_Asynch_Result\fR.
.SS u_long ACE_POSIX_Asynch_Read_Dgram_Result::error (void) const
.PP
Error value if the operation fail.
.PP
Reimplemented from \fBACE_POSIX_Asynch_Result\fR.
.SS ACE_HANDLE ACE_POSIX_Asynch_Read_Dgram_Result::event (void) const
.PP
Event associated with the \fBOVERLAPPED\fR structure.
.PP
Reimplemented from \fBACE_POSIX_Asynch_Result\fR.
.SS int ACE_POSIX_Asynch_Read_Dgram_Result::flags (void) const
.PP
The flags used in the read.
.PP
.SS ACE_HANDLE ACE_POSIX_Asynch_Read_Dgram_Result::handle (void) const
.PP
I/O handle used for reading.
.PP
.SS \fBACE_Message_Block\fR * ACE_POSIX_Asynch_Read_Dgram_Result::message_block (void) const
.PP
Message block which contains the read data.
.PP
.SS u_long ACE_POSIX_Asynch_Read_Dgram_Result::offset (void) const
.PP
This really make sense only when doing file I/O.
.PP
Reimplemented from \fBACE_POSIX_Asynch_Result\fR.
.SS u_long ACE_POSIX_Asynch_Read_Dgram_Result::offset_high (void) const
.PP
Offset_high associated with the \fBOVERLAPPED\fR structure.
.PP
Reimplemented from \fBACE_POSIX_Asynch_Result\fR.
.SS int ACE_POSIX_Asynch_Read_Dgram_Result::post_completion (\fBACE_Proactor_Impl\fR * proactor)
.PP
Post <this> to the Proactor's completion port.
.PP
Reimplemented from \fBACE_POSIX_Asynch_Result\fR.
.SS int ACE_POSIX_Asynch_Read_Dgram_Result::priority (void) const
.PP
The priority of the asynchronous operation. Currently, this is not supported on Win32.
.PP
Reimplemented from \fBACE_POSIX_Asynch_Result\fR.
.SS int ACE_POSIX_Asynch_Read_Dgram_Result::remote_address (\fBACE_Addr\fR & addr) const
.PP
The address of where the packet came from.
.PP
.SS sockaddr* ACE_POSIX_Asynch_Read_Dgram_Result::saddr () const
.PP
.SS int ACE_POSIX_Asynch_Read_Dgram_Result::signal_number (void) const
.PP
No-op. Returns 0.
.PP
Reimplemented from \fBACE_POSIX_Asynch_Result\fR.
.SS int ACE_POSIX_Asynch_Read_Dgram_Result::success (void) const
.PP
Did the operation succeed?
.PP
Reimplemented from \fBACE_POSIX_Asynch_Result\fR.
.SH FRIENDS AND RELATED FUNCTION DOCUMENTATION
.PP 
.SS class ACE_POSIX_AIOCB_Asynch_Read_Dgram\fC [friend]\fR
.PP
Factory classes will have special permissions.
.PP
.SS class ACE_POSIX_Proactor\fC [friend]\fR
.PP
Proactor class has special permission.
.PP
.SH MEMBER DATA DOCUMENTATION
.PP 
.SS int ACE_POSIX_Asynch_Read_Dgram_Result::addr_len_\fC [protected]\fR
.PP
.SS u_long ACE_POSIX_Asynch_Read_Dgram_Result::bytes_to_read_\fC [protected]\fR
.PP
Bytes requested when the asynchronous read was initiated.
.PP
.SS int ACE_POSIX_Asynch_Read_Dgram_Result::flags_\fC [protected]\fR
.PP
The flags used in the read.
.PP
.SS ACE_HANDLE ACE_POSIX_Asynch_Read_Dgram_Result::handle_\fC [protected]\fR
.PP
I/O handle used for reading.
.PP
.SS \fBACE_Message_Block\fR * ACE_POSIX_Asynch_Read_Dgram_Result::message_block_\fC [protected]\fR
.PP
Message block for reading the data into.
.PP
.SS \fBACE_Addr\fR * ACE_POSIX_Asynch_Read_Dgram_Result::remote_address_\fC [protected]\fR
.PP
The address of where the packet came from.
.PP


.SH AUTHOR
.PP 
Generated automatically by Doxygen for ACE from the source code.