.TH ACE_MEM_Connector 3 "5 Oct 2001" "ACE" \" -*- nroff -*-
.ad l
.nh
.SH NAME
ACE_MEM_Connector \- Defines the format and interface for the connector side of the . 
.SH SYNOPSIS
.br
.PP
\fC#include <MEM_Connector.h>\fR
.PP
Inherits \fBACE_SOCK_Connector\fR.
.PP
.SS Public Types

.in +1c
.ti -1c
.RI "typedef \fBACE_INET_Addr\fR \fBPEER_ADDR\fR"
.br
.ti -1c
.RI "typedef \fBACE_MEM_Stream\fR \fBPEER_STREAM\fR"
.br
.in -1c
.SS Public Methods

.in +1c
.ti -1c
.RI "\fBACE_MEM_Connector\fR (void)"
.br
.RI "\fIDefault constructor.\fR"
.ti -1c
.RI "\fBACE_MEM_Connector\fR (\fBACE_MEM_Stream\fR &new_stream, const \fBACE_INET_Addr\fR &remote_sap, \fBACE_Time_Value\fR *timeout = 0, const \fBACE_Addr\fR &local_sap = \fBACE_Addr::sap_any\fR, int reuse_addr = 0, int flags = 0, int perms = 0, int protocol = 0)"
.br
.ti -1c
.RI "int \fBconnect\fR (\fBACE_MEM_Stream\fR &new_stream, const \fBACE_INET_Addr\fR &remote_sap, \fBACE_Time_Value\fR *timeout = 0, const \fBACE_Addr\fR &local_sap = \fBACE_Addr::sap_any\fR, int reuse_addr = 0, int flags = 0, int perms = 0, int protocol = 0)"
.br
.ti -1c
.RI "\fBACE_MEM_IO::Signal_Strategy\fR \fBpreferred_strategy\fR (void) const"
.br
.ti -1c
.RI "void \fBpreferred_strategy\fR (\fBACE_MEM_IO::Signal_Strategy\fR strategy)"
.br
.ti -1c
.RI "\fBACE_MEM_SAP::MALLOC_OPTIONS\fR& \fBmalloc_options\fR (void)"
.br
.RI "\fIAccessor to underlying malloc options.\fR"
.ti -1c
.RI "void \fBdump\fR (void) const"
.br
.RI "\fIDump the state of an object.\fR"
.in -1c
.SS Public Attributes

.in +1c
.ti -1c
.RI "\fBACE_ALLOC_HOOK_DECLARE\fR"
.br
.RI "\fIDeclare the dynamic allocation hooks.\fR"
.in -1c
.SS Private Attributes

.in +1c
.ti -1c
.RI "\fBACE_MEM_Addr\fR \fBaddress_\fR"
.br
.RI "\fIThe acceptor address this connector is connecting to.\fR"
.ti -1c
.RI "\fBACE_MEM_SAP::MALLOC_OPTIONS\fR \fBmalloc_options_\fR"
.br
.RI "\fIA cached MALLOC_OPTIONS that the MEM_Connector used to initialize the shared memory malloc update connection establishment.\fR"
.ti -1c
.RI "\fBACE_MEM_IO::Signal_Strategy\fR \fBpreferred_strategy_\fR"
.br
.in -1c
.SH DETAILED DESCRIPTION
.PP 
Defines the format and interface for the connector side of the .
.PP
.SH MEMBER TYPEDEF DOCUMENTATION
.PP 
.SS typedef \fBACE_INET_Addr\fR ACE_MEM_Connector::PEER_ADDR
.PP
Reimplemented from \fBACE_SOCK_Connector\fR.
.SS typedef \fBACE_MEM_Stream\fR ACE_MEM_Connector::PEER_STREAM
.PP
Reimplemented from \fBACE_SOCK_Connector\fR.
.SH CONSTRUCTOR & DESTRUCTOR DOCUMENTATION
.PP 
.SS ACE_MEM_Connector::ACE_MEM_Connector (void)
.PP
Default constructor.
.PP
.SS ACE_MEM_Connector::ACE_MEM_Connector (\fBACE_MEM_Stream\fR & new_stream, const \fBACE_INET_Addr\fR & remote_sap, \fBACE_Time_Value\fR * timeout = 0, const \fBACE_Addr\fR & local_sap = \fBACE_Addr::sap_any\fR, int reuse_addr = 0, int flags = 0, int perms = 0, int protocol = 0)
.PP
Actively connect and produce a <new_stream> if things go well. The <remote_sap> is the address that we are trying to connect with. The <timeout> is the amount of time to wait to connect. If it's 0 then we block indefinitely. If *timeout == {0, 0} then the connection is done using non-blocking mode. In this case, if the connection can't be made immediately the value of -1 is returned with <errno == EWOULDBLOCK>. If *timeout > {0, 0} then this is the maximum amount of time to wait before timing out. If the time expires before the connection is made <errno == ETIME>. The <local_sap> is the value of local address to bind to. If it's the default value of <0> then the user is letting the OS do the binding. If <reuse_addr> == 1 then the <local_addr> is reused, even if it hasn't been cleanedup yet. 
.SH MEMBER FUNCTION DOCUMENTATION
.PP 
.SS int ACE_MEM_Connector::connect (\fBACE_MEM_Stream\fR & new_stream, const \fBACE_INET_Addr\fR & remote_sap, \fBACE_Time_Value\fR * timeout = 0, const \fBACE_Addr\fR & local_sap = \fBACE_Addr::sap_any\fR, int reuse_addr = 0, int flags = 0, int perms = 0, int protocol = 0)
.PP
Actively connect and produce a <new_stream> if things go well. The <remote_sap> is the address that we are trying to connect with. The <timeout> is the amount of time to wait to connect. If it's 0 then we block indefinitely. If *timeout == {0, 0} then the connection is done using non-blocking mode. In this case, if the connection can't be made immediately the value of -1 is returned with <errno == EWOULDBLOCK>. If *timeout > {0, 0} then this is the maximum amount of time to wait before timing out. If the time expires before the connection is made <errno == ETIME>. The <local_sap> is the value of local address to bind to. If it's the default value of <0> then the user is letting the OS do the binding. If <reuse_addr> == 1 then the <local_addr> is reused, even if it hasn't been cleanedup yet. 
.SS void ACE_MEM_Connector::dump (void) const
.PP
Dump the state of an object.
.PP
Reimplemented from \fBACE_SOCK_Connector\fR.
.SS \fBACE_MEM_SAP::MALLOC_OPTIONS\fR & ACE_MEM_Connector::malloc_options (void)
.PP
Accessor to underlying malloc options.
.PP
.SS void ACE_MEM_Connector::preferred_strategy (\fBACE_MEM_IO::Signal_Strategy\fR strategy)
.PP
.SS \fBACE_MEM_IO::Signal_Strategy\fR ACE_MEM_Connector::preferred_strategy (void) const
.PP
.SH MEMBER DATA DOCUMENTATION
.PP 
.SS ACE_MEM_Connector::ACE_ALLOC_HOOK_DECLARE
.PP
Declare the dynamic allocation hooks.
.PP
Reimplemented from \fBACE_SOCK_Connector\fR.
.SS \fBACE_MEM_Addr\fR ACE_MEM_Connector::address_\fC [private]\fR
.PP
The acceptor address this connector is connecting to.
.PP
.SS \fBACE_MEM_SAP::MALLOC_OPTIONS\fR ACE_MEM_Connector::malloc_options_\fC [private]\fR
.PP
A cached MALLOC_OPTIONS that the MEM_Connector used to initialize the shared memory malloc update connection establishment.
.PP
.SS \fBACE_MEM_IO::Signal_Strategy\fR ACE_MEM_Connector::preferred_strategy_\fC [private]\fR
.PP


.SH AUTHOR
.PP 
Generated automatically by Doxygen for ACE from the source code.