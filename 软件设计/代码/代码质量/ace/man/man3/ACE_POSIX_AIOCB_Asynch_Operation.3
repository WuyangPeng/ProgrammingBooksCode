.TH ACE_POSIX_AIOCB_Asynch_Operation 3 "5 Oct 2001" "ACE" \" -*- nroff -*-
.ad l
.nh
.SH NAME
ACE_POSIX_AIOCB_Asynch_Operation \- This class implements  for  (Asynchronous I/O Control Blocks) based implementation of Proactor. 
.SH SYNOPSIS
.br
.PP
\fC#include <POSIX_Asynch_IO.h>\fR
.PP
Inherits \fBACE_POSIX_Asynch_Operation\fR.
.PP
Inherited by \fBACE_POSIX_AIOCB_Asynch_Read_Dgram\fR, \fBACE_POSIX_AIOCB_Asynch_Read_Stream\fR, \fBACE_POSIX_AIOCB_Asynch_Transmit_File\fR, \fBACE_POSIX_AIOCB_Asynch_Write_Dgram\fR, and \fBACE_POSIX_AIOCB_Asynch_Write_Stream\fR.
.PP
.SS Public Methods

.in +1c
.ti -1c
.RI "\fBACE_POSIX_AIOCB_Proactor\fR* \fBposix_proactor\fR (void) const"
.br
.RI "\fIReturn the underlying Proactor implementation.\fR"
.in -1c
.SS Protected Methods

.in +1c
.ti -1c
.RI "\fBACE_POSIX_AIOCB_Asynch_Operation\fR (\fBACE_POSIX_AIOCB_Proactor\fR *posix_aiocb_proactor)"
.br
.RI "\fIContructor.\fR"
.ti -1c
.RI "virtual \fB~ACE_POSIX_AIOCB_Asynch_Operation\fR (void)"
.br
.RI "\fIDestructor.\fR"
.ti -1c
.RI "virtual int \fBregister_and_start_aio\fR (\fBACE_POSIX_Asynch_Result\fR *result, int op)"
.br
.RI "\fIThis is the method which does the real work to start aio and should be used instead of shared_read/shared_write <op> means operation : 0 - read , 1 - write.\fR"
.in -1c
.SS Protected Attributes

.in +1c
.ti -1c
.RI "\fBACE_POSIX_AIOCB_Proactor\fR* \fBposix_aiocb_proactor_\fR"
.br
.in -1c
.SH DETAILED DESCRIPTION
.PP 
This class implements  for  (Asynchronous I/O Control Blocks) based implementation of Proactor.
.PP
.SH CONSTRUCTOR & DESTRUCTOR DOCUMENTATION
.PP 
.SS ACE_POSIX_AIOCB_Asynch_Operation::ACE_POSIX_AIOCB_Asynch_Operation (\fBACE_POSIX_AIOCB_Proactor\fR * posix_aiocb_proactor)\fC [protected]\fR
.PP
Contructor.
.PP
.SS ACE_POSIX_AIOCB_Asynch_Operation::~ACE_POSIX_AIOCB_Asynch_Operation (void)\fC [protected, virtual]\fR
.PP
Destructor.
.PP
.SH MEMBER FUNCTION DOCUMENTATION
.PP 
.SS \fBACE_POSIX_AIOCB_Proactor\fR * ACE_POSIX_AIOCB_Asynch_Operation::posix_proactor (void) const
.PP
Return the underlying Proactor implementation.
.PP
.SS int ACE_POSIX_AIOCB_Asynch_Operation::register_and_start_aio (\fBACE_POSIX_Asynch_Result\fR * result, int op)\fC [protected, virtual]\fR
.PP
This is the method which does the real work to start aio and should be used instead of shared_read/shared_write <op> means operation : 0 - read , 1 - write.
.PP
.SH MEMBER DATA DOCUMENTATION
.PP 
.SS \fBACE_POSIX_AIOCB_Proactor\fR * ACE_POSIX_AIOCB_Asynch_Operation::posix_aiocb_proactor_\fC [protected]\fR
.PP
It is easy to get this specific implementation proactor here, since it is the one that creates the correct POSIX_Asynch_* objects. We can use this to get to the implementation proactor directly. 

.SH AUTHOR
.PP 
Generated automatically by Doxygen for ACE from the source code.