.TH ACE_FIFO 3 "5 Oct 2001" "ACE" \" -*- nroff -*-
.ad l
.nh
.SH NAME
ACE_FIFO \- Abstract base class for UNIX FIFOs. 
.SH SYNOPSIS
.br
.PP
\fC#include <FIFO.h>\fR
.PP
Inherits \fBACE_IPC_SAP\fR.
.PP
Inherited by \fBACE_FIFO_Recv\fR, and \fBACE_FIFO_Send\fR.
.PP
.SS Public Methods

.in +1c
.ti -1c
.RI "int \fBopen\fR (const \fBACE_TCHAR\fR *rendezvous, int flags, int perms, LPSECURITY_ATTRIBUTES sa = 0)"
.br
.RI "\fIOpen up the named pipe on the <rendezvous> in accordance with the flags.\fR"
.ti -1c
.RI "int \fBclose\fR (void)"
.br
.RI "\fIClose down the ACE_FIFO without removing the rendezvous point.\fR"
.ti -1c
.RI "int \fBremove\fR (void)"
.br
.RI "\fIClose down the ACE_FIFO and remove the rendezvous point from the file system.\fR"
.ti -1c
.RI "int \fBget_local_addr\fR (const \fBACE_TCHAR\fR *&rendezvous) const"
.br
.RI "\fIReturn the local address of this endpoint.\fR"
.ti -1c
.RI "void \fBdump\fR (void) const"
.br
.RI "\fIDump the state of an object.\fR"
.in -1c
.SS Public Attributes

.in +1c
.ti -1c
.RI "\fBACE_ALLOC_HOOK_DECLARE\fR"
.br
.RI "\fIDeclare the dynamic allocation hooks.\fR"
.in -1c
.SS Protected Methods

.in +1c
.ti -1c
.RI "\fBACE_FIFO\fR (void)"
.br
.RI "\fIDefault constructor.\fR"
.ti -1c
.RI "\fBACE_FIFO\fR (const \fBACE_TCHAR\fR *rendezvous, int flags, int perms, LPSECURITY_ATTRIBUTES sa = 0)"
.br
.RI "\fIOpen up the named pipe on the <rendezvous> in accordance with the flags.\fR"
.in -1c
.SS Private Attributes

.in +1c
.ti -1c
.RI "\fBACE_TCHAR\fR \fBrendezvous_\fR [MAXPATHLEN + 1]"
.br
.RI "\fIRendezvous point in the file system.\fR"
.in -1c
.SH DETAILED DESCRIPTION
.PP 
Abstract base class for UNIX FIFOs.
.PP
.PP
 UNIX FIFOs are also known Named Pipes, which are totally unrelated to Win32 Named Pipes. If you want to use a local IPC mechanism that will be portable to both UNIX and Win32, take a look at the  classes. 
.PP
.SH CONSTRUCTOR & DESTRUCTOR DOCUMENTATION
.PP 
.SS ACE_FIFO::ACE_FIFO (void)\fC [protected]\fR
.PP
Default constructor.
.PP
.SS ACE_FIFO::ACE_FIFO (const \fBACE_TCHAR\fR * rendezvous, int flags, int perms, LPSECURITY_ATTRIBUTES sa = 0)\fC [protected]\fR
.PP
Open up the named pipe on the <rendezvous> in accordance with the flags.
.PP
.SH MEMBER FUNCTION DOCUMENTATION
.PP 
.SS int ACE_FIFO::close (void)
.PP
Close down the ACE_FIFO without removing the rendezvous point.
.PP
Reimplemented in \fBACE_FIFO_Recv\fR.
.SS void ACE_FIFO::dump (void) const
.PP
Dump the state of an object.
.PP
Reimplemented from \fBACE_IPC_SAP\fR.
.PP
Reimplemented in \fBACE_FIFO_Recv\fR, \fBACE_FIFO_Recv_Msg\fR, \fBACE_FIFO_Send\fR, and \fBACE_FIFO_Send_Msg\fR.
.SS int ACE_FIFO::get_local_addr (const \fBACE_TCHAR\fR *& rendezvous) const
.PP
Return the local address of this endpoint.
.PP
.SS int ACE_FIFO::open (const \fBACE_TCHAR\fR * rendezvous, int flags, int perms, LPSECURITY_ATTRIBUTES sa = 0)
.PP
Open up the named pipe on the <rendezvous> in accordance with the flags.
.PP
Reimplemented in \fBACE_FIFO_Send\fR, and \fBACE_FIFO_Send_Msg\fR.
.SS int ACE_FIFO::remove (void)
.PP
Close down the ACE_FIFO and remove the rendezvous point from the file system.
.PP
.SH MEMBER DATA DOCUMENTATION
.PP 
.SS ACE_FIFO::ACE_ALLOC_HOOK_DECLARE
.PP
Declare the dynamic allocation hooks.
.PP
Reimplemented from \fBACE_IPC_SAP\fR.
.PP
Reimplemented in \fBACE_FIFO_Recv\fR, \fBACE_FIFO_Recv_Msg\fR, \fBACE_FIFO_Send\fR, and \fBACE_FIFO_Send_Msg\fR.
.SS \fBACE_TCHAR\fR ACE_FIFO::rendezvous_[MAXPATHLEN+1]\fC [private]\fR
.PP
Rendezvous point in the file system.
.PP


.SH AUTHOR
.PP 
Generated automatically by Doxygen for ACE from the source code.