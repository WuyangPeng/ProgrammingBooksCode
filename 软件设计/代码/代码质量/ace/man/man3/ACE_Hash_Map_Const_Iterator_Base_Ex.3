.TH ACE_Hash_Map_Const_Iterator_Base_Ex 3 "5 Oct 2001" "ACE" \" -*- nroff -*-
.ad l
.nh
.SH NAME
ACE_Hash_Map_Const_Iterator_Base_Ex \- Base const iterator for the . 
.SH SYNOPSIS
.br
.PP
\fC#include <Hash_Map_Manager_T.h>\fR
.PP
Inherited by \fBACE_Hash_Map_Const_Iterator_Ex\fR.
.PP
.SS Public Methods

.in +1c
.ti -1c
.RI "\fBACE_Hash_Map_Const_Iterator_Base_Ex\fR (const \fBACE_Hash_Map_Manager_Ex\fR<EXT_ID, INT_ID, HASH_KEY, COMPARE_KEYS, ACE_LOCK> &mm, int head)"
.br
.RI "\fIContructor. If head != 0, the iterator constructed is positioned at the head of the map, it is positioned at the end otherwise.\fR"
.ti -1c
.RI "int \fBnext\fR (\fBACE_Hash_Map_Entry\fR<EXT_ID, INT_ID> *&next_entry) const"
.br
.RI "\fIPass back the next <entry> that hasn't been seen in the Set. Returns 0 when all items have been seen, else 1.\fR"
.ti -1c
.RI "int \fBdone\fR (void) const"
.br
.RI "\fIReturns 1 when all items have been seen, else 0.\fR"
.ti -1c
.RI "\fBACE_Hash_Map_Entry\fR<EXT_ID, INT_ID>& \fBoperator *\fR (void) const"
.br
.RI "\fIReturns a reference to the interal element <this> is pointing to.\fR"
.ti -1c
.RI "const \fBACE_Hash_Map_Manager_Ex\fR<EXT_ID, INT_ID, HASH_KEY, COMPARE_KEYS, ACE_LOCK>& \fBmap\fR (void)"
.br
.RI "\fIReturns reference the Hash_Map_Manager_Ex that is being iterated over.\fR"
.ti -1c
.RI "int \fBoperator==\fR (const ACE_Hash_Map_Const_Iterator_Base_Ex<EXT_ID, INT_ID, HASH_KEY, COMPARE_KEYS, ACE_LOCK> &) const"
.br
.RI "\fICheck if two iterators point to the same position.\fR"
.ti -1c
.RI "int \fBoperator!=\fR (const ACE_Hash_Map_Const_Iterator_Base_Ex<EXT_ID, INT_ID, HASH_KEY, COMPARE_KEYS, ACE_LOCK> &) const"
.br
.in -1c
.SS Public Attributes

.in +1c
.ti -1c
.RI "\fBACE_ALLOC_HOOK_DECLARE\fR"
.br
.RI "\fIDeclare the dynamic allocation hooks.\fR"
.in -1c
.SS Protected Methods

.in +1c
.ti -1c
.RI "int \fBforward_i\fR (void)"
.br
.RI "\fIMove forward by one element in the set. Returns 0 when there's no more item in the set after the current items, else 1.\fR"
.ti -1c
.RI "int \fBreverse_i\fR (void)"
.br
.RI "\fIMove backward by one element in the set. Returns 0 when there's no more item in the set before the current item, else 1.\fR"
.ti -1c
.RI "void \fBdump_i\fR (void) const"
.br
.RI "\fIDump the state of an object.\fR"
.in -1c
.SS Protected Attributes

.in +1c
.ti -1c
.RI "const \fBACE_Hash_Map_Manager_Ex\fR<EXT_ID, INT_ID, HASH_KEY, COMPARE_KEYS, ACE_LOCK>* \fBmap_man_\fR"
.br
.RI "\fIMap we are iterating over.\fR"
.ti -1c
.RI "\fBssize_t\fR \fBindex_\fR"
.br
.RI "\fIKeeps track of how far we've advanced in the table.\fR"
.ti -1c
.RI "\fBACE_Hash_Map_Entry\fR<EXT_ID, INT_ID>* \fBnext_\fR"
.br
.RI "\fIKeeps track of how far we've advanced in a linked list in each table slot.\fR"
.in -1c
.SH DETAILED DESCRIPTION
.PP 

.SS template<class EXT_ID, class INT_ID, class HASH_KEY, class COMPARE_KEYS, class ACE_LOCK>  template class ACE_Hash_Map_Const_Iterator_Base_Ex
Base const iterator for the .
.PP
.PP
 This class factors out common code from its templatized subclasses. 
.PP
.SH CONSTRUCTOR & DESTRUCTOR DOCUMENTATION
.PP 
.SS template<classEXT_ID, classINT_ID, classHASH_KEY, classCOMPARE_KEYS, classACE_LOCK> ACE_Hash_Map_Const_Iterator_Base_Ex<EXT_ID, INT_ID, HASH_KEY, COMPARE_KEYS, ACE_LOCK>::ACE_Hash_Map_Const_Iterator_Base_Ex<EXT_ID, INT_ID, HASH_KEY, COMPARE_KEYS, ACE_LOCK> (const \fBACE_Hash_Map_Manager_Ex\fR< EXT_ID,INT_ID,HASH_KEY,COMPARE_KEYS,ACE_LOCK >& mm, int head)
.PP
Contructor. If head != 0, the iterator constructed is positioned at the head of the map, it is positioned at the end otherwise.
.PP
.SH MEMBER FUNCTION DOCUMENTATION
.PP 
.SS template<classEXT_ID, classINT_ID, classHASH_KEY, classCOMPARE_KEYS, classACE_LOCK> int ACE_Hash_Map_Const_Iterator_Base_Ex<EXT_ID, INT_ID, HASH_KEY, COMPARE_KEYS, ACE_LOCK>::done (void) const
.PP
Returns 1 when all items have been seen, else 0.
.PP
.SS template<classEXT_ID, classINT_ID, classHASH_KEY, classCOMPARE_KEYS, classACE_LOCK> void ACE_Hash_Map_Const_Iterator_Base_Ex<EXT_ID, INT_ID, HASH_KEY, COMPARE_KEYS, ACE_LOCK>::dump_i (void) const\fC [protected]\fR
.PP
Dump the state of an object.
.PP
.SS template<classEXT_ID, classINT_ID, classHASH_KEY, classCOMPARE_KEYS, classACE_LOCK> int ACE_Hash_Map_Const_Iterator_Base_Ex<EXT_ID, INT_ID, HASH_KEY, COMPARE_KEYS, ACE_LOCK>::forward_i (void)\fC [protected]\fR
.PP
Move forward by one element in the set. Returns 0 when there's no more item in the set after the current items, else 1.
.PP
.SS template<classEXT_ID, classINT_ID, classHASH_KEY, classCOMPARE_KEYS, classACE_LOCK> const \fBACE_Hash_Map_Manager_Ex\fR< EXT_ID,INT_ID,HASH_KEY,COMPARE_KEYS,ACE_LOCK >& ACE_Hash_Map_Const_Iterator_Base_Ex<EXT_ID, INT_ID, HASH_KEY, COMPARE_KEYS, ACE_LOCK>::map (void)
.PP
Returns reference the Hash_Map_Manager_Ex that is being iterated over.
.PP
.SS template<classEXT_ID, classINT_ID, classHASH_KEY, classCOMPARE_KEYS, classACE_LOCK> int ACE_Hash_Map_Const_Iterator_Base_Ex<EXT_ID, INT_ID, HASH_KEY, COMPARE_KEYS, ACE_LOCK>::next (\fBACE_Hash_Map_Entry\fR< EXT_ID,INT_ID >*& next_entry) const
.PP
Pass back the next <entry> that hasn't been seen in the Set. Returns 0 when all items have been seen, else 1.
.PP
.SS template<classEXT_ID, classINT_ID, classHASH_KEY, classCOMPARE_KEYS, classACE_LOCK> \fBACE_Hash_Map_Entry\fR< EXT_ID,INT_ID >& ACE_Hash_Map_Const_Iterator_Base_Ex<EXT_ID, INT_ID, HASH_KEY, COMPARE_KEYS, ACE_LOCK>::operator * (void) const
.PP
Returns a reference to the interal element <this> is pointing to.
.PP
.SS template<classEXT_ID, classINT_ID, classHASH_KEY, classCOMPARE_KEYS, classACE_LOCK> int ACE_Hash_Map_Const_Iterator_Base_Ex<EXT_ID, INT_ID, HASH_KEY, COMPARE_KEYS, ACE_LOCK>::operator!= (const ACE_Hash_Map_Const_Iterator_Base_Ex< EXT_ID,INT_ID,HASH_KEY,COMPARE_KEYS,ACE_LOCK >&) const
.PP
.SS template<classEXT_ID, classINT_ID, classHASH_KEY, classCOMPARE_KEYS, classACE_LOCK> int ACE_Hash_Map_Const_Iterator_Base_Ex<EXT_ID, INT_ID, HASH_KEY, COMPARE_KEYS, ACE_LOCK>::operator== (const ACE_Hash_Map_Const_Iterator_Base_Ex< EXT_ID,INT_ID,HASH_KEY,COMPARE_KEYS,ACE_LOCK >&) const
.PP
Check if two iterators point to the same position.
.PP
.SS template<classEXT_ID, classINT_ID, classHASH_KEY, classCOMPARE_KEYS, classACE_LOCK> int ACE_Hash_Map_Const_Iterator_Base_Ex<EXT_ID, INT_ID, HASH_KEY, COMPARE_KEYS, ACE_LOCK>::reverse_i (void)\fC [protected]\fR
.PP
Move backward by one element in the set. Returns 0 when there's no more item in the set before the current item, else 1.
.PP
.SH MEMBER DATA DOCUMENTATION
.PP 
.SS template<classEXT_ID, classINT_ID, classHASH_KEY, classCOMPARE_KEYS, classACE_LOCK> ACE_Hash_Map_Const_Iterator_Base_Ex<EXT_ID, INT_ID, HASH_KEY, COMPARE_KEYS, ACE_LOCK>::ACE_ALLOC_HOOK_DECLARE
.PP
Declare the dynamic allocation hooks.
.PP
Reimplemented in \fBACE_Hash_Map_Const_Iterator_Ex\fR.
.SS template<classEXT_ID, classINT_ID, classHASH_KEY, classCOMPARE_KEYS, classACE_LOCK> \fBssize_t\fR ACE_Hash_Map_Const_Iterator_Base_Ex<EXT_ID, INT_ID, HASH_KEY, COMPARE_KEYS, ACE_LOCK>::index_\fC [protected]\fR
.PP
Keeps track of how far we've advanced in the table.
.PP
.SS template<classEXT_ID, classINT_ID, classHASH_KEY, classCOMPARE_KEYS, classACE_LOCK> const \fBACE_Hash_Map_Manager_Ex\fR< EXT_ID,INT_ID,HASH_KEY,COMPARE_KEYS,ACE_LOCK >* ACE_Hash_Map_Const_Iterator_Base_Ex<EXT_ID, INT_ID, HASH_KEY, COMPARE_KEYS, ACE_LOCK>::map_man_\fC [protected]\fR
.PP
Map we are iterating over.
.PP
.SS template<classEXT_ID, classINT_ID, classHASH_KEY, classCOMPARE_KEYS, classACE_LOCK> \fBACE_Hash_Map_Entry\fR< EXT_ID,INT_ID >* ACE_Hash_Map_Const_Iterator_Base_Ex<EXT_ID, INT_ID, HASH_KEY, COMPARE_KEYS, ACE_LOCK>::next_\fC [protected]\fR
.PP
Keeps track of how far we've advanced in a linked list in each table slot.
.PP


.SH AUTHOR
.PP 
Generated automatically by Doxygen for ACE from the source code.