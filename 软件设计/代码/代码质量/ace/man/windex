>		ACE_Guard< (3)	- Template specialization of  for the . 
>		ACE_Guard< (3)	- Template specialization of  for the . 
>		ACE_Guard< (3)	- Template specialization of  for the . 
>		ACE_Hash< (3)	- Function object for hashing a char. 
>		ACE_Read_Guard< (3) - 
>		ACE_Write_Guard< (3)	- 
ACE		ACE (3) 	- Contains value added ACE methods that extend the behavior of the UNIX and Win32 OS calls. 
ACE_ARGV	ACE_ARGV (3)	- Transforms a string <buf> into an  style vector of strings or an  style vector of string <buf>, performing environment variable substitutions if necessary. 
ACE_ATM_Addr	ACE_ATM_Addr (3)    - Defines the ATM domain address family address format. 
ACE_Accept_QoS_Params		ACE_Accept_QoS_Params (3)   - Wrapper class that simplifies the information passed to the QoS enabled  method. 
ACE_Accept_Strategy		ACE_Accept_Strategy (3) - Defines the interface for specifying a passive connection acceptance strategy for a SVC_HANDLER. 
ACE_Acceptor	ACE_Acceptor (3)    - Abstract factory for creating a service handler (SVC_HANDLER), accepting into the SVC_HANDLER, and activating the SVC_HANDLER. 
ACE_Acquire_Method		ACE_Acquire_Method (3)	- An enum class. 
ACE_Activation_Queue		ACE_Activation_Queue (3)    - Reifies a method into a request. Subclasses typically represent necessary state and behavior. 
ACE_Active_Map_Manager		ACE_Active_Map_Manager (3)  - Define a map abstraction that associates system generated keys with user specified values. 
ACE_Active_Map_Manager_Adapter	ACE_Active_Map_Manager_Adapter (3)  - Defines a map implementation. 
ACE_Active_Map_Manager_Iterator_Adapter ACE_Active_Map_Manager_Iterator_Adapter (3) - Defines a iterator implementation for the Active_Map_Manager_Adapter. 
ACE_Active_Map_Manager_Key	ACE_Active_Map_Manager_Key (3)	- Data for the Active Object Map Key. 
ACE_Active_Map_Manager_Key	ACE_Active_Map_Manager_Key (3)	- Key used in the Active Object Map. 
ACE_Active_Map_Manager_Reverse_Iterator_Adapter ACE_Active_Map_Manager_Reverse_Iterator_Adapter (3) - Defines a reverse iterator implementation for the Active_Map_Manager_Adapter. 
ACE_Adaptive_Lock		ACE_Adaptive_Lock (3)	- An adaptive general locking class that defers the decision of lock type to run time. 
ACE_Addr	ACE_Addr (3)	- Defines the base class for the "address family independent" address format. 
ACE_Allocator	ACE_Allocator (3)   - Interface for a dynamic memory allocator that uses inheritance and dynamic binding to provide extensible mechanisms for allocating and deallocating memory. 
ACE_Allocator_Adapter		ACE_Allocator_Adapter (3)   - This class is an Adapter that allows the	to use the <Malloc> class below. 
ACE_Arg_Shifter ACE_Arg_Shifter (3) - This ADT shifts known args to the back of the argv vector, so deeper levels of argument parsing can locate the yet unprocessed arguments at the beginning of the vector. 
ACE_Array	ACE_Array (3)	- Implement a dynamic array class. 
ACE_Array_Base	ACE_Array_Base (3)  - Implement a simple dynamic array. 
ACE_Array_Iterator		ACE_Array_Iterator (3)	- Implement an iterator over an ACE_Array. 
ACE_Async_Timer_Queue_Adapter	ACE_Async_Timer_Queue_Adapter (3)   - Adapts a <TQ> to be run asynchronously. 
ACE_Asynch_Accept		ACE_Asynch_Accept (3)	- This class is a factory for starting off asynchronous accepts on a listen handle. This class forwards all methods to its implementation class. 
ACE_Asynch_Accept		ACE_Asynch_Accept (3)	- This is that class which will be passed back to the <handler> when the asynchronous accept completes. 
ACE_Asynch_Accept_Impl		ACE_Asynch_Accept_Impl (3)  - 
ACE_Asynch_Accept_Result_Impl	ACE_Asynch_Accept_Result_Impl (3)   - 
ACE_Asynch_Acceptor		ACE_Asynch_Acceptor (3) - This class is an example of the Acceptor Pattern. This class will accept new connections and create new HANDLER to handle the new connections. 
ACE_Asynch_Operation		ACE_Asynch_Operation (3)    - This is an interface base class for all asynch operations. The resposiblility of this class is to forward all methods to its delegation/implementation class, e.g.,  or . 
ACE_Asynch_Operation_Impl	ACE_Asynch_Operation_Impl (3)	- 
ACE_Asynch_Read_Dgram		ACE_Asynch_Read_Dgram (3)   - This class is a factory for starting off asynchronous reads on a UDP socket. This class forwards all methods to its implementation class. 
ACE_Asynch_Read_Dgram		ACE_Asynch_Read_Dgram (3)   - This is the class which will be passed back to the <handler> when the asynchronous read completes. This class forwards all the methods to the implementation classes. 
ACE_Asynch_Read_Dgram_Impl	ACE_Asynch_Read_Dgram_Impl (3)	- 
ACE_Asynch_Read_Dgram_Result_Impl   ACE_Asynch_Read_Dgram_Result_Impl (3)   - 
ACE_Asynch_Read_File		ACE_Asynch_Read_File (3)    - This class is a factory for starting off asynchronous reads on a file. This class forwards all methods to its implementation class. 
ACE_Asynch_Read_File		ACE_Asynch_Read_File (3)    - This is that class which will be passed back to the <handler> when the asynchronous read completes. This class forwards all the methods to the implementation class. 
ACE_Asynch_Read_File_Impl	ACE_Asynch_Read_File_Impl (3)	- 
ACE_Asynch_Read_File_Result_Impl    ACE_Asynch_Read_File_Result_Impl (3)    - 
ACE_Asynch_Read_Stream		ACE_Asynch_Read_Stream (3)  - This class is a factory for starting off asynchronous reads on a stream. This class forwards all methods to its implementation class. 
ACE_Asynch_Read_Stream		ACE_Asynch_Read_Stream (3)  - This is the class which will be passed back to the <handler> when the asynchronous read completes. This class forwards all the methods to the implementation classes. 
ACE_Asynch_Read_Stream_Impl	ACE_Asynch_Read_Stream_Impl (3) - 
ACE_Asynch_Read_Stream_Result_Impl  ACE_Asynch_Read_Stream_Result_Impl (3)  - 
ACE_Asynch_Result		ACE_Asynch_Result (3)	- An interface base class which allows users access to common information related to an asynchronous operation. 
ACE_Asynch_Result_Impl		ACE_Asynch_Result_Impl (3)  - 
ACE_Asynch_Transmit_File	ACE_Asynch_Transmit_File (3)	- The class defines a data structure that contains pointers to data to send before and after the file data is sent. 
ACE_Asynch_Transmit_File	ACE_Asynch_Transmit_File (3)	- This class is a factory for starting off asynchronous transmit files on a stream. 
ACE_Asynch_Transmit_File	ACE_Asynch_Transmit_File (3)	- This is that class which will be passed back to the <handler> when the asynchronous transmit file completes. 
ACE_Asynch_Transmit_File_Impl	ACE_Asynch_Transmit_File_Impl (3)   - 
ACE_Asynch_Transmit_File_Result_Impl	ACE_Asynch_Transmit_File_Result_Impl (3)    - 
ACE_Asynch_Write_Dgram		ACE_Asynch_Write_Dgram (3)  - 
ACE_Asynch_Write_Dgram		ACE_Asynch_Write_Dgram (3)  - 
ACE_Asynch_Write_Dgram		ACE_Asynch_Write_Dgram (3)  - This class is a factory for starting off asynchronous writes on a UDP socket. This class forwards all methods to its implementation class. 
ACE_Asynch_Write_Dgram_Impl	ACE_Asynch_Write_Dgram_Impl (3) - 
ACE_Asynch_Write_Dgram_Result_Impl  ACE_Asynch_Write_Dgram_Result_Impl (3)  - 
ACE_Asynch_Write_File		ACE_Asynch_Write_File (3)   - This class is a factory for starting off asynchronous writes on a file. This class forwards all methods to its implementation class. 
ACE_Asynch_Write_File		ACE_Asynch_Write_File (3)   - This is that class which will be passed back to the <handler> when the asynchronous write completes. This class forwards all the methods to the implementation class. 
ACE_Asynch_Write_File_Impl	ACE_Asynch_Write_File_Impl (3)	- 
ACE_Asynch_Write_File_Result_Impl   ACE_Asynch_Write_File_Result_Impl (3)   - 
ACE_Asynch_Write_Stream 	ACE_Asynch_Write_Stream (3) - 
ACE_Asynch_Write_Stream 	ACE_Asynch_Write_Stream (3) - 
ACE_Asynch_Write_Stream 	ACE_Asynch_Write_Stream (3) - This class is a factory for starting off asynchronous writes on a stream. This class forwards all methods to its implementation class. 
ACE_Asynch_Write_Stream_Impl	ACE_Asynch_Write_Stream_Impl (3)    - 
ACE_Asynch_Write_Stream_Result_Impl ACE_Asynch_Write_Stream_Result_Impl (3) - 
ACE_At_Thread_Exit		ACE_At_Thread_Exit (3)	- Contains a method to be applied when a thread is terminated. 
ACE_At_Thread_Exit_Func 	ACE_At_Thread_Exit_Func (3) - 
ACE_Atomic_Op	ACE_Atomic_Op (3)   - Transparently parameterizes synchronization into basic arithmetic operations. 
ACE_Auto_Array_Ptr		ACE_Auto_Array_Ptr (3)	- Implements an extension to the draft C++ standard auto_ptr abstraction. 
ACE_Auto_Basic_Array_Ptr	ACE_Auto_Basic_Array_Ptr (3)	- Implements an extension to the draft C++ standard auto_ptr abstraction. This class allows one to work on non-object (basic) types that must be treated as an array, e.g., deallocated via "delete [] foo". 
ACE_Auto_Basic_Ptr		ACE_Auto_Basic_Ptr (3)	- Implements the draft C++ standard auto_ptr abstraction. This class allows one to work on non-object (basic) types. 
ACE_Auto_Event	ACE_Auto_Event (3)  - Auto Events. 
ACE_Auto_IncDec ACE_Auto_IncDec (3) - This class automatically increments and decrements a parameterized counter. 
ACE_Auto_String_Free		ACE_Auto_String_Free (3)    - Simple class to automatically de-allocate strings. 
ACE_Barrier	ACE_Barrier (3) - Implements "barrier synchronization". 
ACE_Base_Thread_Adapter 	ACE_Base_Thread_Adapter (3) - Base class for all the Thread_Adapters. 
ACE_Based_Pointer		ACE_Based_Pointer (3)	- A smart proxy that keeps track of the relative offset of a "pointer" from its base address. 
ACE_Based_Pointer_Basic 	ACE_Based_Pointer_Basic (3) - A proxy that keeps track of the relative offset of a "pointer" from its base address. This class makes it possible to transparently use "pointers" in shared memory as easily as programming with pointers to local memory. In particular, we don't need to ensure that the base addresses of all the pointers are mapped into separate processes at the same absolute memory base address. 
ACE_Based_Pointer_Repository	ACE_Based_Pointer_Repository (3)    - Maps pointers to the base address of the region to which each pointer belongs. 
ACE_Basic_Stats ACE_Basic_Stats (3) - Collect basic stats about a series of samples. 
ACE_Bcast_Node	ACE_Bcast_Node (3)  - Linked list of broadcast interfaces. 
ACE_BoolCapEntry		ACE_BoolCapEntry (3)	- This class implement the ACE Bool Capability subclass. 
ACE_Bound_Ptr_Counter		ACE_Bound_Ptr_Counter (3)   - An ACE_Bound_Ptr_Counter object encapsulates an object reference count. Do not use this class directly, use ACE_Strong_Bound_Ptr or ACE_Weak_Bound_Ptr instead. 
ACE_Bounded_Cached_Connect_Strategy ACE_Bounded_Cached_Connect_Strategy (3) - A connection strategy which caches connections to peers (represented by <SVC_HANDLER> instances), thereby allowing subsequent re-use of unused, but available, connections. This strategy should be used when the cache is bounded by maximum size. 
ACE_Bounded_Set ACE_Bounded_Set (3) - 
ACE_Bounded_Set ACE_Bounded_Set (3) - Implement a simple unordered set of <T> with maximum set at creation time. 
ACE_Bounded_Set_Iterator	ACE_Bounded_Set_Iterator (3)	- Interates through an unordered set. 
ACE_Bounded_Stack		ACE_Bounded_Stack (3)	- Implement a generic LIFO abstract data type. 
ACE_Buffered_Svc_Handler	ACE_Buffered_Svc_Handler (3)	- Defines the interface for a service that exchanges data with its connected peer and supports buffering. 
ACE_CACHE_MAP_MANAGER		ACE_CACHE_MAP_MANAGER (3)   - 
ACE_CDR 	ACE_CDR (3)	- 
ACE_CDR 	ACE_CDR (3)	- 
ACE_CDR 	ACE_CDR (3)	- 
ACE_CDR 	ACE_CDR (3)	- Keep constants and some routines common to both Output and Input CDR streams. 
ACE_CORBA_Ref	ACE_CORBA_Ref (3)   - A wrapper for helping with Orbix object references. 
ACE_CString	ACE_CString (3) - This class provides a wrapper facade for C strings. 
ACE_Cache_Map_Iterator		ACE_Cache_Map_Iterator (3)  - Defines a iterator for the Cache_Map_Manager. 
ACE_Cache_Map_Manager		ACE_Cache_Map_Manager (3)   - Defines a abstraction that will purge entries from a map. 
ACE_Cache_Map_Reverse_Iterator	ACE_Cache_Map_Reverse_Iterator (3)  - Defines a reverse iterator for the Cache_Map_Manager. 
ACE_Cached_Allocator		ACE_Cached_Allocator (3)    - Create a cached memory poll with <n_chunks> chunks each with sizeof (TYPE) size. 
ACE_Cached_Connect_Strategy	ACE_Cached_Connect_Strategy (3) - A connection strategy which caches connections to peers (represented by <SVC_HANDLER> instances), thereby allowing subsequent re-use of unused, but available, connections. 
ACE_Cached_Connect_Strategy_Ex	ACE_Cached_Connect_Strategy_Ex (3)  - A connection strategy which caches connections to peers (represented by <SVC_HANDLER> instances), thereby allowing subsequent re-use of unused, but available, connections. 
ACE_Cached_Mem_Pool_Node	ACE_Cached_Mem_Pool_Node (3)	-  keeps unused memory within a free list. 
ACE_Caching_Strategy		ACE_Caching_Strategy (3)    - This class is an abstract base class for a caching strategy. 
ACE_Caching_Strategy_Adapter	ACE_Caching_Strategy_Adapter (3)    - This class follows the Adaptor pattern and is used to provide External Polymorphism by deriving from ACE_Caching_Strategy. 
ACE_CapEntry	ACE_CapEntry (3)    - This class is the base class for all ACE Capabilities entry subclasses. 
ACE_Capabilities		ACE_Capabilities (3)	- This class implement the ACE Capabilities. 
ACE_Char_Codeset_Translator	ACE_Char_Codeset_Translator (3) - Codeset translation routines common to both Output and Input CDR streams. 
ACE_Cleanup	ACE_Cleanup (3) - Base class for objects that are cleaned by ACE_Object_Manager. 
ACE_Cleanup_Adapter		ACE_Cleanup_Adapter (3) - Adapter for ACE_Cleanup objects that allows them to be readily managed by the ACE_Object_Manager. 
ACE_Cleanup_Info		ACE_Cleanup_Info (3)	- Hold cleanup information for thread/process. 
ACE_Cleanup_Strategy		ACE_Cleanup_Strategy (3)    - Defines a default strategy to be followed for cleaning up entries from a map which is the container. 
ACE_Command_Base		ACE_Command_Base (3)	- Defines an abstract class that allows us to invoke commands without knowing anything about the implementation. 
ACE_Command_Callback		ACE_Command_Callback (3)    - Defines a class template that allows us to invoke a GOF command style callback to an object without knowing anything about the object except its type. 
ACE_Concurrency_Strategy	ACE_Concurrency_Strategy (3)	- Defines the interface for specifying a concurrency strategy for a SVC_HANDLER. 
ACE_Condition	ACE_Condition (3)   - ACE_Condition variable wrapper, which allows threads to block until shared data changes state. 
ACE_Condition_Attributes	ACE_Condition_Attributes (3)	- 
ACE_Condition_Thread_Mutex	ACE_Condition_Thread_Mutex (3)	- ACE_Condition variable wrapper written using ACE_Mutexes This allows threads to block until shared data changes state. A condition variable enables threads to atomically block and test the condition under the protection of a mutual exclu- sion lock (mutex) until the condition is satisfied. That is, the mutex must have been held by the thread before calling wait or signal on the condition. If the condition is false, a thread blocks on a condition variable and atomically releases the mutex that is waiting for the condition to change. If another thread changes the condition, it may wake up waiting threads by signaling the associated condition variable. The waiting threads, upon awakening, reacquire the mutex and re-evaluate the condition. 
ACE_Config_ImpExp_Base		ACE_Config_ImpExp_Base (3)  - Base class for file import/export configuration. 
ACE_Configuration		ACE_Configuration (3)	- Base class for configuration databases. 
ACE_Configuration_ExtId 	ACE_Configuration_ExtId (3) - External ID for the section and value hash. 
ACE_Configuration_Heap		ACE_Configuration_Heap (3)  - The concrete implementation of a allocator based configuration database. 
ACE_Configuration_Section_IntId ACE_Configuration_Section_IntId (3) - The internal ID for a section hash table. 
ACE_Configuration_Section_Key	ACE_Configuration_Section_Key (3)   - Referenced counted wrapper for . 
ACE_Configuration_Section_Key_Heap  ACE_Configuration_Section_Key_Heap (3)  - Internal section key class for heap based configuration database. 
ACE_Configuration_Value_IntId	ACE_Configuration_Value_IntId (3)   - The section hash table internal value class. 
ACE_Configuration_Win32Registry ACE_Configuration_Win32Registry (3) - The win32 registry implementation of a configuration database. 
ACE_Connect_Strategy		ACE_Connect_Strategy (3)    - Defines the interface for specifying an active connection establishment strategy for a SVC_HANDLER. 
ACE_Connection_Recycling_Strategy   ACE_Connection_Recycling_Strategy (3)   - Defines the interface for a connection recycler. 
ACE_Connector	ACE_Connector (3)   - Generic factory for actively connecting clients and creating service handlers (SVC_HANDLERs). 
ACE_Control_Block		ACE_Control_Block (3)	- This class supports "named memory regions" within . 
ACE_Control_Block		ACE_Control_Block (3)	- This information is stored in memory allocated by the <Memory_Pool>. 
ACE_Control_Block		ACE_Control_Block (3)	- This is the control block header. It's used by  to keep track of each chunk of data when it's in the free list or in use. 
ACE_Countdown_Time		ACE_Countdown_Time (3)	- Keeps track of the amount of elapsed time. 
ACE_Creation_Strategy		ACE_Creation_Strategy (3)   - Defines the interface for specifying a creation strategy for a SVC_HANDLER. 
ACE_DEV 	ACE_DEV (3)	- Defines the member functions for the base class of the ACE_DEV abstraction. 
ACE_DEV_Addr	ACE_DEV_Addr (3)    - Defines device address family address format. 
ACE_DEV_Connector		ACE_DEV_Connector (3)	- Defines an active connection factory for the ACE_DEV wrappers. 
ACE_DEV_IO	ACE_DEV_IO (3)	- Read/Write operations on Devices. 
ACE_DLL 	ACE_DLL (3)	- Provides an abstract interface for handling various DLL operations. 
ACE_DLL_Strategy		ACE_DLL_Strategy (3)	- Defines the interface for specifying a creation strategy for a SVC_HANDLER based on dynamic linking of the SVC_HANDLER. 
ACE_DLList	ACE_DLList (3)	- A double-linked list container class. 
ACE_DLList_Iterator		ACE_DLList_Iterator (3) - A double-linked list container class iterator. 
ACE_DLList_Node ACE_DLList_Node (3) - Base implementation of element in a DL list. Needed for ACE_Double_Linked_List. 
ACE_DLList_Reverse_Iterator	ACE_DLList_Reverse_Iterator (3) - A double-linked list container class iterator. 
ACE_DNode	ACE_DNode (3)	- Implementation element in a bilinked list. 
ACE_Data_Block	ACE_Data_Block (3)  - Stores the data payload that is accessed via one or more s. 
ACE_Date_Time	ACE_Date_Time (3)   - System independent representation of date and time. 
ACE_Deadline_Message_Strategy	ACE_Deadline_Message_Strategy (3)   - Deadline based message priority strategy. 
ACE_Dirent	ACE_Dirent (3)	- Define a portable C++ directory-entry iterator based on the POSIX API. 
ACE_Dirent_Selector		ACE_Dirent_Selector (3) - 
ACE_Double_Linked_List		ACE_Double_Linked_List (3)  - A double-linked list implementation. 
ACE_Double_Linked_List_Iterator ACE_Double_Linked_List_Iterator (3) - Implements an iterator for a double linked list ADT. 
ACE_Double_Linked_List_Iterator_Base	ACE_Double_Linked_List_Iterator_Base (3)    - Implements a common base class for iterators for a double linked list ADT. 
ACE_Double_Linked_List_Reverse_Iterator ACE_Double_Linked_List_Reverse_Iterator (3) - Implements a reverse iterator for a double linked list ADT. 
ACE_Dummy_Node	ACE_Dummy_Node (3)  - I forget why this is here... ;-). 
ACE_Dumpable	ACE_Dumpable (3)    - Base class that defines a uniform interface for all object dumping. 
ACE_Dumpable_Adapter		ACE_Dumpable_Adapter (3)    - This class inherits the interface of the abstract ACE_Dumpable class and is instantiated with the implementation of the concrete component class <class Concrete>. 
ACE_Dumpable_Ptr		ACE_Dumpable_Ptr (3)	- A smart pointer stored in the in-memory object database ACE_ODB. The pointee (if any) is deleted when reassigned. 
ACE_Dynamic	ACE_Dynamic (3) - Checks to see if an object was dynamically allocated. 
ACE_Dynamic_Message_Queue	ACE_Dynamic_Message_Queue (3)	- A derived class which adapts the  class in order to maintain dynamic priorities for enqueued	and manage the queue order according to these dynamic priorities. 
ACE_Dynamic_Message_Strategy	ACE_Dynamic_Message_Strategy (3)    - An abstract base class which provides dynamic priority evaluation methods for use by the	class or any other class which needs to manage the priorities of a collection of s dynamically. 
ACE_Dynamic_Node		ACE_Dynamic_Node (3)	- Handle a dynamically linked node. 
ACE_Dynamic_Service		ACE_Dynamic_Service (3) - Provides a general interface to retrieve arbitrary objects from the ACE service repository. 
ACE_Dynamic_Service_Base	ACE_Dynamic_Service_Base (3)	- Base class for all ACE_Dynamic_Service instantiations. 
ACE_EH_Dispatch_Info		ACE_EH_Dispatch_Info (3)    - This structure contains information of the activated event handler. 
ACE_Env_Value	ACE_Env_Value (3)   - Enviroment Variable Value. 
ACE_Equal_To	ACE_Equal_To (3)    - Function object for comparing two objects of the given type for equality. 
ACE_Errno_Guard ACE_Errno_Guard (3) - Provides a wrapper to improve performance when thread-specific errno must be saved and restored in a block of code. 
ACE_Event	ACE_Event (3)	- A wrapper around the Win32 event locking mechanism. 
ACE_Event_Handler		ACE_Event_Handler (3)	- Provides an abstract interface for handling various types of I/O, timer, and signal events. 
ACE_Event_Handler_Handle_Timeout_Upcall ACE_Event_Handler_Handle_Timeout_Upcall (3) - Functor for Timer_Queues. 
ACE_Event_Tuple ACE_Event_Tuple (3) - An ACE_Event_Handler and its associated ACE_HANDLE. 
ACE_FIFO	ACE_FIFO (3)	- Abstract base class for UNIX FIFOs. 
ACE_FIFO_Caching_Strategy	ACE_FIFO_Caching_Strategy (3)	- The First In First Out strategy is implemented wherein each item is ordered. 
ACE_FIFO_Recv	ACE_FIFO_Recv (3)   - Receiver side of the bytestream C++ wrapper for UNIX FIFOs. 
ACE_FIFO_Recv_Msg		ACE_FIFO_Recv_Msg (3)	- Receiver side for the record oriented C++ wrapper for UNIX FIFOs. 
ACE_FIFO_Send	ACE_FIFO_Send (3)   - Sender side for the bytestream C++ wrapper for UNIX FIFOs. 
ACE_FIFO_Send_Msg		ACE_FIFO_Send_Msg (3)	- Sender side for the Record oriented C++ wrapper for UNIX FIFOs. 
ACE_FILE	ACE_FILE (3)	- Defines the core methods of the  abstraction. 
ACE_FILE_Addr	ACE_FILE_Addr (3)   - Defines the FILE address family address format. 
ACE_FILE_Connector		ACE_FILE_Connector (3)	- Defines an active connection factory for the ACE_FILE wrappers. 
ACE_FILE_IO	ACE_FILE_IO (3) - Read/Write operations on Files. 
ACE_FILE_Info	ACE_FILE_Info (3)   - Abstracts basic OS FILE information. 
ACE_File_Lock	ACE_File_Lock (3)   - A wrapper around the UNIX file locking mechanism. 
ACE_Filecache	ACE_Filecache (3)   - A hash table holding the information about entry point into the Cached Virtual Filesystem. On insertion, the reference count is incremented. On destruction, reference count is decremented. 
ACE_Filecache_Handle		ACE_Filecache_Handle (3)    - Abstraction over a real file. This is meant to be the entry point into the Cached Virtual Filesystem. 
ACE_Filecache_Object		ACE_Filecache_Object (3)    - Abstraction over a real file. This is what the Virtual Filesystem contains. This class is not intended for general consumption. Please consult a physician before attempting to use this class. 
ACE_Fixed_Set	ACE_Fixed_Set (3)   - Implement a simple unordered set of <T> with maximum . 
ACE_Fixed_Set_Iterator		ACE_Fixed_Set_Iterator (3)  - Interates through an unordered set. 
ACE_Fixed_Stack ACE_Fixed_Stack (3) - Implement a generic LIFO abstract data type. 
ACE_FlReactor	ACE_FlReactor (3)   - A Reactor implementation that uses the Fast-Light (FL) toolkit for event demultiplexing. This will let us integrate the FL toolkit with ACE and/or TAO. 
ACE_Flag_Manip	ACE_Flag_Manip (3)  - 
ACE_Flow_Spec	ACE_Flow_Spec (3)   - Wrapper class that defines the flow spec QoS information, which is used by IntServ (RSVP) and DiffServ. 
ACE_Free_List	ACE_Free_List (3)   - Implements a free list. 
ACE_Function_Node		ACE_Function_Node (3)	- Keeps track of the symbol name of for a shared function. 
ACE_Future	ACE_Future (3)	- This class implements a ``single write, multiple read'' pattern that can be used to return results from asynchronous method invocations. 
ACE_Future_Holder		ACE_Future_Holder (3)	- Implementation of object which has holds ACE_Future. 
ACE_Future_Observer		ACE_Future_Observer (3) - ACE_Future_Observer<T>. 
ACE_Future_Rep	ACE_Future_Rep (3)  - ACE_Future_Rep<T>. 
ACE_Future_Set	ACE_Future_Set (3)  - This class implements a mechanism which allows the values of a collections of  objects to be accessed by reader threads as they become available. 
ACE_Get_Opt	ACE_Get_Opt (3) - Iterator for parsing command-line arguments. 
ACE_Guard	ACE_Guard (3)	- This data structure is meant to be used within a method or function... It performs automatic aquisition and release of a parameterized synchronization object . 
ACE_Guard<	ACE_Guard< (3)	- Template specialization of  for the . 
ACE_Guard<	ACE_Guard< (3)	- Template specialization of  for the . 
ACE_Handle_Gobbler		ACE_Handle_Gobbler (3)	- This class gobbles up handles. 
ACE_Handle_Ops	ACE_Handle_Ops (3)  - 
ACE_Handle_Set	ACE_Handle_Set (3)  - C++ wrapper facade for the socket <fd_set> abstraction. 
ACE_Handle_Set_Iterator 	ACE_Handle_Set_Iterator (3) - Iterator for the	abstraction. 
ACE_Handler	ACE_Handler (3) - This base class defines the interface for receiving the results of asynchronous operations. 
ACE_Handler_Caching_Utility	ACE_Handler_Caching_Utility (3) - Defines a helper class for the Caching Strategies. 
ACE_Handler_Cleanup_Strategy	ACE_Handler_Cleanup_Strategy (3)    - Defines a strategy to be followed for cleaning up entries which are svc_handlers from a container. 
ACE_Hash	ACE_Hash (3)	- Function object for hashing. 
ACE_Hash<	ACE_Hash< (3)	- Function object for hashing a char. 
ACE_Hash_Cache_Map_Manager	ACE_Hash_Cache_Map_Manager (3)	- Defines a abstraction which will purge entries from a map. The map considered is the ACE_Hash_Map_Manager_Ex. 
ACE_Hash_Map_Bucket_Iterator	ACE_Hash_Map_Bucket_Iterator (3)    - Forward iterator for the	which only traverses a particular bucket. The particular bucket is specified by the <EXT_ID> parameter specified in the constructor. 
ACE_Hash_Map_Const_Iterator	ACE_Hash_Map_Const_Iterator (3) - Wrapper for backward compatibility. 
ACE_Hash_Map_Const_Iterator_Base_Ex ACE_Hash_Map_Const_Iterator_Base_Ex (3) - Base const iterator for the . 
ACE_Hash_Map_Const_Iterator_Ex	ACE_Hash_Map_Const_Iterator_Ex (3)  - Const forward iterator for the . 
ACE_Hash_Map_Entry		ACE_Hash_Map_Entry (3)	- Define an entry in the hash table. 
ACE_Hash_Map_Iterator		ACE_Hash_Map_Iterator (3)   - Wrapper for backward compatibility. 
ACE_Hash_Map_Iterator_Base_Ex	ACE_Hash_Map_Iterator_Base_Ex (3)   - Base iterator for the . 
ACE_Hash_Map_Iterator_Ex	ACE_Hash_Map_Iterator_Ex (3)	- Forward iterator for the . 
ACE_Hash_Map_Manager		ACE_Hash_Map_Manager (3)    - Wrapper for backward compatibility. 
ACE_Hash_Map_Manager_Ex 	ACE_Hash_Map_Manager_Ex (3) - Define a map abstraction that efficiently associates <EXT_ID>s with <INT_ID>s. 
ACE_Hash_Map_Manager_Ex_Adapter ACE_Hash_Map_Manager_Ex_Adapter (3) - Defines a map implementation. 
ACE_Hash_Map_Manager_Ex_Iterator_Adapter    ACE_Hash_Map_Manager_Ex_Iterator_Adapter (3)    - Defines a iterator implementation for the Hash_Map_Manager_Adapter. 
ACE_Hash_Map_Manager_Ex_Reverse_Iterator_Adapter    ACE_Hash_Map_Manager_Ex_Reverse_Iterator_Adapter (3) - Defines a reverse iterator implementation for the Hash_Map_Manager_Adapter. 
ACE_Hash_Map_Reverse_Iterator	ACE_Hash_Map_Reverse_Iterator (3)   - Wrapper for backward compatibility. 
ACE_Hash_Map_Reverse_Iterator_Ex    ACE_Hash_Map_Reverse_Iterator_Ex (3)    - Reverse iterator for the . 
ACE_Hash_Map_With_Allocator	ACE_Hash_Map_With_Allocator (3) - This class is a thin wrapper around ACE_Hash_Map_Manager, which comes handy when ACE_Hash_Map_Manager is to be used with a non-nil ACE_Allocator. This wrapper insures that the appropriate allocator is in place for every operation that accesses or updates the hash map. 
ACE_Hashable	ACE_Hashable (3)    - 
ACE_High_Res_Timer		ACE_High_Res_Timer (3)	- A high resolution timer class wrapper that encapsulates OS-specific high-resolution timers, such as those found on Solaris, AIX, Win32/Pentium, and VxWorks. 
ACE_INET_Addr	ACE_INET_Addr (3)   - Defines a C++ wrapper facade for the Internet domain address family format. 
ACE_IOStream	ACE_IOStream (3)    - A template adapter for creating an iostream-like object using an ACE IPC Stream for the actual I/O. Iostreams use an underlying streambuf object for the IO interface. The iostream class and derivatives provide you with a host of convenient operators that access the streambuf. 
ACE_IO_Cntl_Msg ACE_IO_Cntl_Msg (3) - Data format for IOCTL messages. 
ACE_IO_SAP	ACE_IO_SAP (3)	- Defines the methods for the base class of the  abstraction, which includes  and . 
ACE_IPC_SAP	ACE_IPC_SAP (3) - Defines the member functions for the base class of the ACE_IPC_SAP abstraction. 
ACE_Incremental_Key_Generator	ACE_Incremental_Key_Generator (3)   - Defines a simple incremental key generator. 
ACE_Ini_ImpExp	ACE_Ini_ImpExp (3)  - Imports the configuration database from filename as strings. Allows non-typed values. (no #, dword: hex:, etc. prefixes) and skips whitespace (tabs and spaces) as in standard .ini and .conf files. Values (to right of equal sign) can be double quote delimited to embed tabs and spaces in the string. Caller must convert string to type. 
ACE_Init_ACE	ACE_Init_ACE (3)    - Initialize ACE library services. Can be called only once per program invocation. 
ACE_InputCDR	ACE_InputCDR (3)    - 
ACE_InputCDR	ACE_InputCDR (3)    - 
ACE_InputCDR	ACE_InputCDR (3)    - 
ACE_InputCDR	ACE_InputCDR (3)    - 
ACE_InputCDR	ACE_InputCDR (3)    - 
ACE_InputCDR	ACE_InputCDR (3)    - 
ACE_InputCDR	ACE_InputCDR (3)    - A CDR stream for reading, i.e. for demarshalling. 
ACE_InputCDR	ACE_InputCDR (3)    - Helper class to transfer the contents from one input CDR to another without requiring any extra memory allocations, data copies or too many temporaries. 
ACE_IntCapEntry ACE_IntCapEntry (3) - This class implement the ACE Integer Capability subclass. 
ACE_Intrusive_List		ACE_Intrusive_List (3)	- Implement an intrusive double linked list. 
ACE_Intrusive_List_Node 	ACE_Intrusive_List_Node (3) - Implement the requirements for ACE_Intrusive_List. 
ACE_Iterator	ACE_Iterator (3)    - Defines the iterator interface. 
ACE_Iterator_Impl		ACE_Iterator_Impl (3)	- Defines a abstract iterator. 
ACE_LFU_Caching_Strategy	ACE_LFU_Caching_Strategy (3)	- Defines a Least Frequently Used strategy for which will decide on the item to be removed from the cache. 
ACE_LOCK_SOCK_Acceptor		ACE_LOCK_SOCK_Acceptor (3)  - Specialize  to lock around ;. 
ACE_LRU_Caching_Strategy	ACE_LRU_Caching_Strategy (3)	- Defines a Least Recently Used strategy which will decide on the item to be removed from the cache. 
ACE_LSOCK	ACE_LSOCK (3)	- Create a Local ACE_SOCK, which is used for passing file descriptors. 
ACE_LSOCK_Acceptor		ACE_LSOCK_Acceptor (3)	- Defines the format and interface for the acceptor side of the local ACE_SOCK ACE_Stream. 
ACE_LSOCK_CODgram		ACE_LSOCK_CODgram (3)	- Defines the member functions for the	connected datagram abstraction. 
ACE_LSOCK_Connector		ACE_LSOCK_Connector (3) - Defines the format and interface for the connector side of the . 
ACE_LSOCK_Dgram ACE_LSOCK_Dgram (3) - Create a Local ACE_SOCK datagram. 
ACE_LSOCK_Stream		ACE_LSOCK_Stream (3)	- Create a Local ACE_SOCK stream. 
ACE_Laxity_Message_Strategy	ACE_Laxity_Message_Strategy (3) - Laxity based message priority strategy. 
ACE_Less_Than	ACE_Less_Than (3)   - Function object for determining whether the first object of the given type is less than the second object of the same type. 
ACE_Lib_Find	ACE_Lib_Find (3)    - 
ACE_Lite_MMAP_Memory_Pool	ACE_Lite_MMAP_Memory_Pool (3)	- Make a ``lighter-weight'' memory pool based . 
ACE_Local_Memory_Pool		ACE_Local_Memory_Pool (3)   - Make a memory pool that is based on C++ new/delete. This is useful for integrating existing components that use new/delete into the ACE Malloc scheme... 
ACE_Local_Memory_Pool_Options	ACE_Local_Memory_Pool_Options (3)   - Helper class for Local Memory Pool constructor options. 
ACE_Local_Name_Space		ACE_Local_Name_Space (3)    - Maintaining accesses Local Name Server Database. Allows to add NameBindings, change them, remove them and resolve NameBindings. 
ACE_Location_Node		ACE_Location_Node (3)	- Keep track of where a shared library is located. 
ACE_Lock	ACE_Lock (3)	- This is the abstract base class that contains the uniform locking API that is supported by all the ACE synchronization mechanisms. 
ACE_Lock_Adapter		ACE_Lock_Adapter (3)	- This is an adapter that allows applications to transparently combine the  abstract base class (which contains pure virtual methods) with any of the other concrete ACE synchronization classes (e.g., , , , etc.). 
ACE_Locked_Data_Block		ACE_Locked_Data_Block (3)   - A Data_Block with a concrete locking strategy. 
ACE_Locked_Free_List		ACE_Locked_Free_List (3)    - Implements a free list. 
ACE_Log_Msg	ACE_Log_Msg (3) - Provides a variable length argument message logging abstraction. 
ACE_Log_Msg_Backend		ACE_Log_Msg_Backend (3) - Define the interface for ACE_Log_Msg backend strategies. 
ACE_Log_Msg_Callback		ACE_Log_Msg_Callback (3)    - An interface class used to get logging callbacks. 
ACE_Log_Msg_IPC ACE_Log_Msg_IPC (3) - Defines the interfaces for ACE_Log_Msg backend. 
ACE_Log_Msg_NT_Event_Log	ACE_Log_Msg_NT_Event_Log (3)	- Implements an ACE_Log_Msg_Backend that logs to the WinNT system event log. 
ACE_Log_Record	ACE_Log_Record (3)  - Defines the structure of an ACE logging record. 
ACE_Logging_Strategy		ACE_Logging_Strategy (3)    - This class provides the hooks to control the output produced by any of the network services. 
ACE_MEM_Acceptor		ACE_MEM_Acceptor (3)	- Defines the format and interface for the acceptor side of the local mmap stream. 
ACE_MEM_Addr	ACE_MEM_Addr (3)    - Defines a C++ wrapper facade for the shared memory transport address family format. 
ACE_MEM_Connector		ACE_MEM_Connector (3)	- Defines the format and interface for the connector side of the . 
ACE_MEM_IO	ACE_MEM_IO (3)	- Defines the methods for the ACE shared memeory wrapper I/O routines (e.g., send/recv). The shared memory transport uses ACE_SOCK_* class to implement the signaling mechanism so we can easily use the new mechanism with the Reactor pattern (which uses select under the hood.) ACE_MEM_Acceptor and ACE_MEM_Connector are used to establish connections. When a connection is established, ACE_MEM_Acceptor creates the MMAP file for data exchange and sends the location of the file (complete path name) to ACE_MEM_Connector thru the socket. ACE_MEM_Connector then reads the location of the file off the socket and opens up the same MMAP file. ACE_MEM_Stream at each side then contains a reference to the ACE_Mallo object using the same MMAP file. When sending information using methods provided in this class, ACE_MEM_IO requests a chunk of memory from the MALLOC_TYPE object, copy the data into the shared memory and send the memory offset (from the start of the ACE_Mall oc) across the socket. This action also servers as a signal to the other end. The receiving side then reverses the procedures and copies the information into user buffer. 
ACE_MEM_SAP	ACE_MEM_SAP (3) - Defines the methods of shared memory management for shared memory transport. 
ACE_MEM_SAP_Node		ACE_MEM_SAP_Node (3)	- 
ACE_MEM_Stream	ACE_MEM_Stream (3)  - Defines the methods in the  abstraction. 
ACE_MMAP_Memory_Pool		ACE_MMAP_Memory_Pool (3)    - Make a memory pool that is based on <mmap(2)>. This implementation allows memory to be shared between processes. 
ACE_MMAP_Memory_Pool_Options	ACE_MMAP_Memory_Pool_Options (3)    - Helper class for MMAP Memory Pool constructor options. 
ACE_MT_MEM_IO	ACE_MT_MEM_IO (3)   - 
ACE_MT_MEM_IO	ACE_MT_MEM_IO (3)   - 
ACE_MT_MEM_IO	ACE_MT_MEM_IO (3)   - 
ACE_MT_MEM_IO	ACE_MT_MEM_IO (3)   - 
ACE_Malloc	ACE_Malloc (3)	- 
ACE_Malloc_FIFO_Iterator	ACE_Malloc_FIFO_Iterator (3)	- 
ACE_Malloc_FIFO_Iterator_T	ACE_Malloc_FIFO_Iterator_T (3)	- FIFO iterator for names stored in Malloc'd memory. 
ACE_Malloc_LIFO_Iterator	ACE_Malloc_LIFO_Iterator (3)	- 
ACE_Malloc_LIFO_Iterator_T	ACE_Malloc_LIFO_Iterator_T (3)	- LIFO iterator for names stored in Malloc'd memory. 
ACE_Malloc_T	ACE_Malloc_T (3)    - Define a C++ class that uses parameterized types to provide an extensible mechanism for encapsulating various of dynamic memory management strategies. 
ACE_Managed_Object		ACE_Managed_Object (3)	- Wrapper for interface to allocate an object managed by the ACE_Object_Manager. 
ACE_Managed_Process		ACE_Managed_Process (3) - A process easily managed by ACE_Process_Manager. 
ACE_Manual_Event		ACE_Manual_Event (3)	- Manual Events. 
ACE_Map 	ACE_Map (3)	- Defines a map interface. 
ACE_Map_Const_Iterator		ACE_Map_Const_Iterator (3)  - Forward const iterator for the . 
ACE_Map_Const_Iterator_Base	ACE_Map_Const_Iterator_Base (3) - Const iterator for the . 
ACE_Map_Entry	ACE_Map_Entry (3)   - An entry in the Map. 
ACE_Map_Impl	ACE_Map_Impl (3)    - Defines a map implementation. 
ACE_Map_Impl_Iterator_Adapter	ACE_Map_Impl_Iterator_Adapter (3)   - Defines a iterator implementation for the Map_Impl class. 
ACE_Map_Impl_Reverse_Iterator_Adapter	ACE_Map_Impl_Reverse_Iterator_Adapter (3)   - Defines a reverse iterator implementation for the Map_Impl class. 
ACE_Map_Iterator		ACE_Map_Iterator (3)	- Forward iterator for the . 
ACE_Map_Iterator_Base		ACE_Map_Iterator_Base (3)   - Iterator for the . 
ACE_Map_Manager ACE_Map_Manager (3) - Define a map abstraction that associates <EXT_ID>s with <INT_ID>s. 
ACE_Map_Manager_Adapter 	ACE_Map_Manager_Adapter (3) - Defines a map implementation. 
ACE_Map_Manager_Iterator_Adapter    ACE_Map_Manager_Iterator_Adapter (3)    - Defines a iterator implementation for the Map_Manager_Adapter. 
ACE_Map_Manager_Reverse_Iterator_Adapter    ACE_Map_Manager_Reverse_Iterator_Adapter (3)    - Defines a reverse iterator implementation for the Map Manager. 
ACE_Map_Reverse_Iterator	ACE_Map_Reverse_Iterator (3)	- Reverse Iterator for the . 
ACE_Mem_Map	ACE_Mem_Map (3) - C++ interface OS memory mapping system call. 
ACE_Message_Block		ACE_Message_Block (3)	- Stores messages for use throughout ACE (particularly ). 
ACE_Message_Queue		ACE_Message_Queue (3)	- A threaded message queueing facility, modeled after the queueing facilities in System V STREAMs. 
ACE_Message_Queue_Base		ACE_Message_Queue_Base (3)  - Workaround HP/C++ compiler bug with enums in templates. 
ACE_Message_Queue_Ex		ACE_Message_Queue_Ex (3)    - A threaded message queueing facility, modeled after the queueing facilities in System V STREAMs. 
ACE_Message_Queue_Factory	ACE_Message_Queue_Factory (3)	- ACE_Message_Queue_Factory is a static factory class template which provides a separate factory method for each of the major kinds of priority based message dispatching: static, earliest deadline first (EDF), and minimum laxity first (MLF). 
ACE_Message_Queue_Iterator	ACE_Message_Queue_Iterator (3)	- Iterator for the . 
ACE_Message_Queue_Reverse_Iterator  ACE_Message_Queue_Reverse_Iterator (3)  - Reverse Iterator for the . 
ACE_Method_Request		ACE_Method_Request (3)	- Reifies a method into a request. Subclasses provide the necessary state and behavior. 
ACE_Module	ACE_Module (3)	- An abstraction for managing a bi-directional flow of messages. 
ACE_Module_Base ACE_Module_Base (3) - Workaround HP/C++ compiler bug with enums in templates. 
ACE_Module_Type ACE_Module_Type (3) - Define the methods for handling the configuration of . 
ACE_Msg_WFMO_Reactor		ACE_Msg_WFMO_Reactor (3)    - An OO event demultiplexor and event handler dispatcher for Win32 <MsgWaitForMultipleObjects>. 
ACE_Mutex	ACE_Mutex (3)	-  wrapper (valid in same process or across processes (depending on TYPE flag)). 
ACE_NOOP_Concurrency_Strategy	ACE_NOOP_Concurrency_Strategy (3)   - Implements a no-op activation strategy in order to avoid calling open on a svc_handler multiple times. 
ACE_NOOP_Creation_Strategy	ACE_NOOP_Creation_Strategy (3)	- Implements a no-op creation strategy in order to defer decisions regarding creation to some later point in time, such as in connect or accept strategy. 
ACE_NS_Internal ACE_NS_Internal (3) - This class and ACE_NS_String are used as Adapters to work with the Map_Manager. 
ACE_NS_String	ACE_NS_String (3)   - This class and ACE_NS_Internal are used as Adapters to work with the Map_Manager. 
ACE_NT_Service	ACE_NT_Service (3)  - Provide the base class which defines the interface for controlling an NT service. 
ACE_Name_Binding		ACE_Name_Binding (3)	- Maintains a mapping from name to value and type. 
ACE_Name_Options		ACE_Name_Options (3)	- Manages the options for the ACE Name_Server. 
ACE_Name_Proxy	ACE_Name_Proxy (3)  - Proxy for dealing with remote server process managing NET_LOCAL NameBindings. 
ACE_Name_Reply	ACE_Name_Reply (3)  - 
ACE_Name_Reply	ACE_Name_Reply (3)  - Message format for delivering replies from the ACE_Name Server. 
ACE_Name_Request		ACE_Name_Request (3)	- 
ACE_Name_Request		ACE_Name_Request (3)	- Message format for delivering requests to the ACE_Name Server. 
ACE_Name_Space	ACE_Name_Space (3)  - Abstract base class that provides an abstract interface to the database without exposing any implemenation details. 
ACE_Name_Space_Map		ACE_Name_Space_Map (3)	- This class serves as a Proxy that ensures our process always has the appropriate allocator in place for every operation that accesses or updates the Map Manager. 
ACE_Naming_Context		ACE_Naming_Context (3)	- Maintaining accesses Name Server Databases. Allows to add NameBindings, change them, remove them and resolve NameBindings. 
ACE_New_Allocator		ACE_New_Allocator (3)	- Defines a class that provided a simple implementation of memory allocation. 
ACE_Node	ACE_Node (3)	- Implementation element in a Queue, Set, and Stack. 
ACE_Noop_Key_Generator		ACE_Noop_Key_Generator (3)  - Defines a noop key generator. 
ACE_Noop_Token	ACE_Guard< (3)	- Template specialization of  for the . 
ACE_Noop_Token	ACE_Noop_Token (3)  - 
ACE_Notification_Buffer 	ACE_Notification_Buffer (3) - Simple wrapper for passing s and s between threads. 
ACE_Notification_Strategy	ACE_Notification_Strategy (3)	- Abstract class used for notifing an interested party. 
ACE_Null_Barrier		ACE_Null_Barrier (3)	- Implements "NULL barrier synchronization". 
ACE_Null_Caching_Strategy	ACE_Null_Caching_Strategy (3)	- The is a special caching strategy which doesnt have the purging feature. 
ACE_Null_Caching_Utility	ACE_Null_Caching_Utility (3)	- Defines a dummy helper class for the Caching Strategies. 
ACE_Null_Cleanup_Strategy	ACE_Null_Cleanup_Strategy (3)	- Defines a do-nothing implementation of the cleanup strategy. 
ACE_Null_Condition		ACE_Null_Condition (3)	- Implement a do nothing  variable wrapper, i.e., all methods are no ops. This class is necessary since some C++ compilers are *very* lame... 
ACE_Null_Mutex	ACE_Guard< (3)	- Template specialization of  for the . 
ACE_Null_Mutex	ACE_Null_Mutex (3)  - Implement a do nothing , i.e., all the methods are no ops. 
ACE_Null_Mutex	ACE_Read_Guard< (3) - 
ACE_Null_Mutex	ACE_Write_Guard< (3)	- 
ACE_Null_Semaphore		ACE_Null_Semaphore (3)	- Implement a do nothing , i.e., all the methods are no ops. 
ACE_ODB 	ACE_ODB (3)	- 
ACE_ODB 	ACE_ODB (3)	- This is the object database (ODB) that keeps track of all live ACE objects. 
ACE_OS		ACE_OS (3)	- OS file locking structure. 
ACE_OS		ACE_OS (3)	- This class defines an OS independent programming API that shields developers from nonportable aspects of writing efficient system programs on Win32, POSIX and other versions of UNIX, and various real-time operating systems. 
ACE_OS_Dirent	ACE_OS_Dirent (3)   - This class is a wrapper for the dirent.h operations. 
ACE_OS_Exit_Info		ACE_OS_Exit_Info (3)	- Hold Object Manager cleanup (exit) information. 
ACE_OS_Log_Msg_Attributes	ACE_OS_Log_Msg_Attributes (3)	- The attributes required by ACE_Log_Msg. 
ACE_OS_Memory	ACE_OS_Memory (3)   - This class is a wrapper for dynamic memory operations. 
ACE_OS_Object_Manager		ACE_OS_Object_Manager (3)   - 
ACE_OS_String	ACE_OS_String (3)   - This class includes functions available in string.h and ctype.h. 
ACE_OS_TLI	ACE_OS_TLI (3)	- This class is a wrapper for the TLI operations. 
ACE_OS_Thread_Adapter		ACE_OS_Thread_Adapter (3)   - Converts a C++ function into a function  function that can be called from a thread creation routine (e.g., <pthread_create> or <_beginthreadex>) that expects an extern "C" entry point. This class also makes it possible to transparently provide hooks to register a thread with an . 
ACE_OS_Thread_Descriptor	ACE_OS_Thread_Descriptor (3)	- Parent class of all ACE_Thread_Descriptor classes. = Container for ACE_Thread_Descriptor members that are used in ACE_OS. 
ACE_Obchunk	ACE_Obchunk (3) - Defines the state that represents a "chunk" of memory. Evenything in this class is public because it is designed as an internal structure of Obstack_T and users are not supposed to use this class directly. 
ACE_Object_Manager		ACE_Object_Manager (3)	- Manager for ACE library services and singleton cleanup. 
ACE_Object_Manager_Base 	ACE_Object_Manager_Base (3) - Base class for ACE_Object_Manager(s). 
ACE_Object_Node ACE_Object_Node (3) - Keeps track of the symbol name for a shared object. 
ACE_Obstack	ACE_Obstack (3) - Define a simple "mark and release" memory allocation utility. 
ACE_Obstack_T	ACE_Obstack_T (3)   - 
ACE_Oneshot_Acceptor		ACE_Oneshot_Acceptor (3)    - Generic factory for passively connecting clients and creating exactly one service handler (SVC_HANDLER). 
ACE_Ordered_MultiSet		ACE_Ordered_MultiSet (3)    - Implement a simple ordered multiset of <T> of unbounded size that allows duplicates. This class template requires that < operator semantics be defined for the parameterized type <T>, but does not impose any restriction on how that ordering operator is implemented. 
ACE_Ordered_MultiSet_Iterator	ACE_Ordered_MultiSet_Iterator (3)   - Implement a bidirectional iterator over an ordered multiset. This class template requires that < operator semantics be defined for the parameterized type <T>, but does not impose any restriction on how that ordering operator is implemented. 
ACE_OutputCDR	ACE_OutputCDR (3)   - 
ACE_OutputCDR	ACE_OutputCDR (3)   - 
ACE_OutputCDR	ACE_OutputCDR (3)   - 
ACE_OutputCDR	ACE_OutputCDR (3)   - 
ACE_OutputCDR	ACE_OutputCDR (3)   - 
ACE_OutputCDR	ACE_OutputCDR (3)   - 
ACE_OutputCDR	ACE_OutputCDR (3)   - A CDR stream for writing, i.e. for marshalling. 
ACE_PI_Control_Block		ACE_PI_Control_Block (3)    - This class supports "named memory regions" within . 
ACE_PI_Control_Block		ACE_PI_Control_Block (3)    - This information is stored in memory allocated by the <Memory_Pool>. 
ACE_PI_Control_Block		ACE_PI_Control_Block (3)    - This is the control block header. It's used by  to keep track of each chunk of data when it's in the free list or in use. 
ACE_POSIX_AIOCB_Asynch_Operation    ACE_POSIX_AIOCB_Asynch_Operation (3)    - This class implements  for  (Asynchronous I/O Control Blocks) based implementation of Proactor. 
ACE_POSIX_AIOCB_Asynch_Read_Dgram   ACE_POSIX_AIOCB_Asynch_Read_Dgram (3)   - This class is a factory for starting off asynchronous reads on a UDP socket. 
ACE_POSIX_AIOCB_Asynch_Read_File    ACE_POSIX_AIOCB_Asynch_Read_File (3)    - This class is a factory for starting off asynchronous reads on a file. This class implements  for  (Asynchronous I/O Control Blocks) based implementation of Proactor. 
ACE_POSIX_AIOCB_Asynch_Read_Stream  ACE_POSIX_AIOCB_Asynch_Read_Stream (3)  - 
ACE_POSIX_AIOCB_Asynch_Transmit_File	ACE_POSIX_AIOCB_Asynch_Transmit_File (3)    - Implementation for transmit_file will make use of POSIX_AIOCB_Asynch_Transmit_Handler. 
ACE_POSIX_AIOCB_Asynch_Write_Dgram  ACE_POSIX_AIOCB_Asynch_Write_Dgram (3)  - This class is a factory for starting off asynchronous writes on a UDP socket. 
ACE_POSIX_AIOCB_Asynch_Write_File   ACE_POSIX_AIOCB_Asynch_Write_File (3)   - 
ACE_POSIX_AIOCB_Asynch_Write_Stream ACE_POSIX_AIOCB_Asynch_Write_Stream (3) - This class implements  for  (Asynchronous I/O Control Blocks) based implementation of Proactor. 
ACE_POSIX_AIOCB_Proactor	ACE_POSIX_AIOCB_Proactor (3)	- This Proactor makes use of Asynchronous I/O Control Blocks (AIOCB) to notify/get the completion status of the  operations issued. 
ACE_POSIX_Asynch_Accept 	ACE_POSIX_Asynch_Accept (3) - 
ACE_POSIX_Asynch_Accept_Handler ACE_POSIX_Asynch_Accept_Handler (3) - 
ACE_POSIX_Asynch_Accept_Result	ACE_POSIX_Asynch_Accept_Result (3)  - This is that class which will be passed back to the <handler> when the asynchronous accept completes. 
ACE_POSIX_Asynch_Operation	ACE_POSIX_Asynch_Operation (3)	- This class abstracts out the common things needed for implementing  for POSIX platforms. Specific implementations such as <POSIX_AIOCB_Asynch_Operation> can derive from this class. 
ACE_POSIX_Asynch_Read_Dgram_Result  ACE_POSIX_Asynch_Read_Dgram_Result (3)  - This is class provides concrete implementation for ACE_Asynch_Read_Dgram::Result class. 
ACE_POSIX_Asynch_Read_File_Result   ACE_POSIX_Asynch_Read_File_Result (3)   - This class provides concrete implementation for  class for POSIX platforms. 
ACE_POSIX_Asynch_Read_Stream_Result ACE_POSIX_Asynch_Read_Stream_Result (3) - This class provides concrete implementation for  class for POSIX platforms. 
ACE_POSIX_Asynch_Result 	ACE_POSIX_Asynch_Result (3) - 
ACE_POSIX_Asynch_Timer		ACE_POSIX_Asynch_Timer (3)  - This class is posted to the completion port when a timer expires. When the <complete method> of this object is called, the <handler>'s <handle_timeout> method will be called. 
ACE_POSIX_Asynch_Transmit_File_Result	ACE_POSIX_Asynch_Transmit_File_Result (3)   - This is that class which will be passed back to the <handler> when the asynchronous transmit file completes. 
ACE_POSIX_Asynch_Write_Dgram_Result ACE_POSIX_Asynch_Write_Dgram_Result (3) - 
ACE_POSIX_Asynch_Write_File_Result  ACE_POSIX_Asynch_Write_File_Result (3)  - This class provides implementation for  for POSIX platforms. 
ACE_POSIX_Asynch_Write_Stream_Result	ACE_POSIX_Asynch_Write_Stream_Result (3)    - This class provides concrete implementation for  on POSIX platforms. 
ACE_POSIX_Proactor		ACE_POSIX_Proactor (3)	- POSIX implementation of the Proactor. 
ACE_POSIX_SIG_Proactor		ACE_POSIX_SIG_Proactor (3)  - This Proactor implementation does compeltion querying using POSIX Real Time signals. <sigtimedwait>/<sigwaitinfo> call is used to get the notify/get the completions. The real-time signals that are going to be used with this Proactor should be given apriori in the constructor, so that those signals can be masked from asynchornous delivery. 
ACE_POSIX__Asynch_Write_Dgram_Result	ACE_POSIX__Asynch_Write_Dgram_Result (3)    - This is class provides concrete implementation for ACE_Asynch_Write_Dgram::Result class. 
ACE_Pagefile_Memory_Pool	ACE_Pagefile_Memory_Pool (3)	- Attributes that are meaningful in local storage only. 
ACE_Pagefile_Memory_Pool	ACE_Pagefile_Memory_Pool (3)	- Make a memory pool that is based on "anonymous" memory regions allocated from the Win32 page file. 
ACE_Pagefile_Memory_Pool	ACE_Pagefile_Memory_Pool (3)	- Pool statistics. 
ACE_Pagefile_Memory_Pool_Options    ACE_Pagefile_Memory_Pool_Options (3)    - Helper class for Pagefile Memory Pool constructor options. 
ACE_Pair	ACE_Pair (3)	- Defines a pair. 
ACE_Pair_Caching_Utility	ACE_Pair_Caching_Utility (3)	- Defines a helper class for the Caching Strategies. 
ACE_Parse_Node	ACE_Parse_Node (3)  - Provide the base of the object hierarchy that defines the parse tree of Service Nodes. 
ACE_Pipe	ACE_Pipe (3)	- Provides a bidirectional "pipe" abstraction that is portable to Windows NT, SVR4 UNIX, and BSD UNIX. 
ACE_Pointer_Hash		ACE_Pointer_Hash (3)	- Function object for hashing pointers. 
ACE_Predefined_Naming_Contexts	ACE_Predefined_Naming_Contexts (3)  - A factory for predefined registries, which exist by default on Win32 platforms. 
ACE_Priority_Reactor		ACE_Priority_Reactor (3)    - Implements priority based dispatching. 
ACE_Proactor	ACE_Proactor (3)    - A manager for asynchronous event demultiplexing. 
ACE_Proactor_Handle_Timeout_Upcall  ACE_Proactor_Handle_Timeout_Upcall (3)  - Functor for . 
ACE_Proactor_Impl		ACE_Proactor_Impl (3)	- A manager for asynchronous event demultiplexing. This class is the base class for all the concrete implementation classes. 
ACE_Process	ACE_Process (3) - Process. 
ACE_Process_Descriptor		ACE_Process_Descriptor (3)  - Information describing each process that's controlled by an . 
ACE_Process_Manager		ACE_Process_Manager (3) - Manages a group of processes. 
ACE_Process_Mutex		ACE_Process_Mutex (3)	- A wrapper for mutexes that can be used across processes on the same host machine, as well as within a process, of course. 
ACE_Process_Options		ACE_Process_Options (3) - Process Options. 
ACE_Process_Semaphore		ACE_Process_Semaphore (3)   - Wrapper for Dijkstra style general semaphores that work across processes. 
ACE_Process_Strategy		ACE_Process_Strategy (3)    - Defines the interface for specifying a concurrency strategy for a <SVC_HANDLER> based on multiprocessing. 
ACE_Profile_Timer		ACE_Profile_Timer (3)	- Keeps track of the various user, system, and elapsed (real) times. 
ACE_Profile_Timer		ACE_Profile_Timer (3)	- This class provides both a timing mechanism and a mechanism for reporting the resource usage of a process. 
ACE_Protocol_Info		ACE_Protocol_Info (3)	- 
ACE_QoS 	ACE_QoS (3)	- Wrapper class that holds the sender and receiver flow spec information, which is used by IntServ (RSVP) and DiffServ. 
ACE_QoS_Params	ACE_QoS_Params (3)  - Wrapper class that simplifies the information passed to the QoS enabled  and  methods. 
ACE_QtReactor	ACE_QtReactor (3)   - An object-oriented event demultiplexor and event handler dispatcher that uses the Qt Library. This class declaration also uses the extension facilities provided by the Qt. So, readers of the class declaration should not be upset with the appearence of the Keywords like Q_OBJECT, private slots etc. They are specific to Qt which uses these as a call back methods implementation mechanism. 
ACE_RB_Tree	ACE_RB_Tree (3) - Implements a Red-Black Tree ADT, according to T. H. Corman, C. E. Leiserson, and R. L. Rivest, "Introduction to Algorithms" 1990, MIT, chapter 14. 
ACE_RB_Tree_Base		ACE_RB_Tree_Base (3)	- 
ACE_RB_Tree_Iterator		ACE_RB_Tree_Iterator (3)    - Implements an iterator for a Red-Black Tree ADT. 
ACE_RB_Tree_Iterator_Base	ACE_RB_Tree_Iterator_Base (3)	- Implements a common base class for iterators for a Red-Black Tree ADT. 
ACE_RB_Tree_Node		ACE_RB_Tree_Node (3)	- Implements a node in a Red-Black Tree ADT. 
ACE_RB_Tree_Node_Base		ACE_RB_Tree_Node_Base (3)   - 
ACE_RB_Tree_Reverse_Iterator	ACE_RB_Tree_Reverse_Iterator (3)    - Implements a reverse iterator for a Red-Black Tree ADT. 
ACE_RW_Mutex	ACE_RW_Mutex (3)    - Wrapper for readers/writer locks. 
ACE_RW_Process_Mutex		ACE_RW_Process_Mutex (3)    - Wrapper for readers/writer locks that exist across processes. 
ACE_RW_Thread_Mutex		ACE_RW_Thread_Mutex (3) - Wrapper for readers/writer locks that exist within a process. 
ACE_Reactive_MEM_IO		ACE_Reactive_MEM_IO (3) - 
ACE_Reactive_Strategy		ACE_Reactive_Strategy (3)   - Defines the interface for specifying a Reactive concurrency strategy for a SVC_HANDLER. 
ACE_Reactor	ACE_Reactor (3) - The responsibility of this class is to forward all methods to its delegation/implementation class, e.g.,  or . 
ACE_Reactor_Impl		ACE_Reactor_Impl (3)	- An abstract class for implementing the Reactor Pattern. 
ACE_Reactor_Notification_Strategy   ACE_Reactor_Notification_Strategy (3)   - Used to notify an ACE_Reactor. 
ACE_Reactor_Notify		ACE_Reactor_Notify (3)	- Abstract class for unblocking an  from its event loop. 
ACE_Read_Buffer ACE_Read_Buffer (3) - Efficiently reads an artibrarily large buffer from an input stream up to and including a termination character. Also performs search/replace on single occurrences a character in the buffer using the principles of Integrated Layer Processing. 
ACE_Read_Guard	ACE_Read_Guard (3)  - This class is similar to class , though it acquires/releases a read lock automatically (naturally, the  it is instantiated with must support the appropriate API). 
ACE_Read_Guard< ACE_Read_Guard< (3) - 
ACE_Recursive_Thread_Mutex	ACE_Recursive_Thread_Mutex (3)	- Implement a C++ wrapper that allows nested acquisition and release of a mutex that occurs in the same thread. 
ACE_Recyclable	ACE_Recyclable (3)  - 
ACE_Recyclable_Handler_Caching_Utility	ACE_Recyclable_Handler_Caching_Utility (3)  - Defines a helper class for the Caching Strategies. 
ACE_Recyclable_Handler_Cleanup_Strategy ACE_Recyclable_Handler_Cleanup_Strategy (3) - Defines a strategy to be followed for cleaning up entries which are svc_handlers from a container. 
ACE_Recycling_Strategy		ACE_Recycling_Strategy (3)  - Defines the interface (and default implementation) for specifying a recycling strategy for a SVC_HANDLER. 
ACE_Refcountable		ACE_Refcountable (3)	- 
ACE_Refcounted_Auto_Ptr 	ACE_Refcounted_Auto_Ptr (3) - This class implements support for a reference counted auto_ptr. Assigning or copying instances of an ACE_Refcounted_Auto_Ptr will automatically increment the reference count. When the last instance that references a ACE_Refcounted_Auto_Ptr instance is destroyed or overwritten, it will invoke delete on its underlying pointer. 
ACE_Refcounted_Auto_Ptr_Rep	ACE_Refcounted_Auto_Ptr_Rep (3) - An ACE_Refcounted_Auto_Ptr_Rep<X, ACE_LOCK> object incapsulates a pointer to an object of type X. It is pointed to by ACE_Refcounted_Auto_Ptr<X, ACE_LOCK> object[s] and only accessible through them. 
ACE_Refcounted_Hash_Recyclable	ACE_Refcounted_Hash_Recyclable (3)  - 
ACE_Refcounted_Recyclable_Handler_Caching_Utility   ACE_Refcounted_Recyclable_Handler_Caching_Utility (3) - Defines a helper class for the Caching Strategies. 
ACE_Refcounted_Recyclable_Handler_Cleanup_Strategy  ACE_Refcounted_Recyclable_Handler_Cleanup_Strategy (3) - Defines a strategy to be followed for cleaning up entries which are svc_handlers from a container. 
ACE_Reference_Pair		ACE_Reference_Pair (3)	- Defines a pair that only hold references. 
ACE_Registry	ACE_Registry (3)    - 
ACE_Registry	ACE_Registry (3)    - 
ACE_Registry	ACE_Registry (3)    - 
ACE_Registry	ACE_Registry (3)    - 
ACE_Registry	ACE_Registry (3)    - 
ACE_Registry	ACE_Registry (3)    - A Name Server implementation. 
ACE_Registry	ACE_Registry (3)    - An context representation. 
ACE_Registry	ACE_Registry (3)    - An iterator. 
ACE_Registry	ACE_Registry (3)    - An object representation. 
ACE_Registry	ACE_Registry (3)    - International string. 
ACE_Registry_ImpExp		ACE_Registry_ImpExp (3) - Configuration object that imports/exports data to a file formatted using the Win32 Registry file export format. This format looks like [Section] "key"="String Data" "key"=dword: numeric data "key"=hex: binary data. 
ACE_Remote_Name_Space		ACE_Remote_Name_Space (3)   - Maintaining accesses Remote Name Server Database. Allows to add NameBindings, change them, remove them and resolve NameBindings. 
ACE_Remove_Node ACE_Remove_Node (3) - Remove a Service Node. 
ACE_Resume_Node ACE_Resume_Node (3) - Resume a Service Node. 
ACE_Reverse_Iterator		ACE_Reverse_Iterator (3)    - Defines the reverse iterator interface. 
ACE_Reverse_Iterator_Impl	ACE_Reverse_Iterator_Impl (3)	- Defines a abstract reverse iterator. 
ACE_Reverse_Lock		ACE_Reverse_Lock (3)	- A reverse (or anti) lock. 
ACE_SELECT_REACTOR_MUTEX	ACE_SELECT_REACTOR_MUTEX (3)	- 
ACE_SOCK	ACE_SOCK (3)	- An abstract class that forms the basis for more specific classes, such as  and . Do not instantiate this class. 
ACE_SOCK_Acceptor		ACE_SOCK_Acceptor (3)	- Defines a factory that creates new s passively. 
ACE_SOCK_CODgram		ACE_SOCK_CODgram (3)	- Defines the member functions for the ACE_SOCK connected datagram abstraction. 
ACE_SOCK_Connector		ACE_SOCK_Connector (3)	- Defines a factory that creates new s actively. 
ACE_SOCK_Dgram	ACE_SOCK_Dgram (3)  - Defines the member functions for the ACE_SOCK datagram abstraction. 
ACE_SOCK_Dgram_Bcast		ACE_SOCK_Dgram_Bcast (3)    - Defines the member functions for the ACE_SOCK datagram abstraction. 
ACE_SOCK_Dgram_Mcast		ACE_SOCK_Dgram_Mcast (3)    - Defines the member functions for the ACE socket wrapper for UDP/IP multicast. 
ACE_SOCK_Dgram_SC		ACE_SOCK_Dgram_SC (3)	- "Dgram_SC" is short for "Datagram Self-Contained.". 
ACE_SOCK_IO	ACE_SOCK_IO (3) - Defines the methods for the ACE socket wrapper I/O routines (e.g., send/recv). 
ACE_SOCK_Stream ACE_SOCK_Stream (3) - Defines the methods in the  abstraction. 
ACE_SPIPE	ACE_SPIPE (3)	- Defines the member functions for the base class of the ACE_SPIPE abstraction. 
ACE_SPIPE_Acceptor		ACE_SPIPE_Acceptor (3)	- Defines the format and interface for the listener side of the ACE_SPIPE_Stream. 
ACE_SPIPE_Addr	ACE_SPIPE_Addr (3)  - Contains security attributes. 
ACE_SPIPE_Addr	ACE_SPIPE_Addr (3)  - Defines the SVR4 STREAM pipe address family address format. 
ACE_SPIPE_Connector		ACE_SPIPE_Connector (3) - Defines an active connection factory for the STREAM pipe wrappers. 
ACE_SPIPE_Stream		ACE_SPIPE_Stream (3)	- Define an ACE_SPIPE_Stream. 
ACE_SString	ACE_SString (3) - A very Simple String	class. This is not a general-purpose string class, and you should probably consider using  is you don't understand why this class exists... 
ACE_SV_Message	ACE_SV_Message (3)  - Defines the header file for the C++ wrapper for message queues. 
ACE_SV_Message_Queue		ACE_SV_Message_Queue (3)    - Defines the header file for the C++ wrapper for System V IPC message queues. 
ACE_SV_Semaphore_Complex	ACE_SV_Semaphore_Complex (3)	- This is a more complex semaphore wrapper that handles race conditions for initialization correctly... 
ACE_SV_Semaphore_Simple 	ACE_SV_Semaphore_Simple (3) - This is a simple semaphore package that assumes there are no race conditions for initialization (i.e., the order of process startup must be well defined). 
ACE_SV_Shared_Memory		ACE_SV_Shared_Memory (3)    - This is a wrapper for System V shared memory. 
ACE_Sample_History		ACE_Sample_History (3)	- Save multiple samples in an array. 
ACE_Sbrk_Memory_Pool		ACE_Sbrk_Memory_Pool (3)    - Make a memory pool that is based on <sbrk(2)>. 
ACE_Sbrk_Memory_Pool_Options	ACE_Sbrk_Memory_Pool_Options (3)    - Helper class for Sbrk Memory Pool constructor options. 
ACE_Sched_Params		ACE_Sched_Params (3)	- Container for scheduling-related parameters. 
ACE_Sched_Priority_Iterator	ACE_Sched_Priority_Iterator (3) - An iterator over the OS-defined scheduling priorities. 
ACE_Schedule_All_Reactive_Strategy  ACE_Schedule_All_Reactive_Strategy (3)  - Defines the interface for specifying how to suspend and resume a single-threaded reactive service . 
ACE_Schedule_All_Threaded_Strategy  ACE_Schedule_All_Threaded_Strategy (3)  - Defines the interface for specifying how to suspend and resume a multithreaded service . 
ACE_Scheduling_Strategy 	ACE_Scheduling_Strategy (3) - Defines the interface for specifying how to suspend and resume a service . 
ACE_Section_Key_Internal	ACE_Section_Key_Internal (3)	- A base class for internal handles to section keys for configuration implementations. 
ACE_Section_Key_Win32		ACE_Section_Key_Win32 (3)   - The Win32 registry implementation of an internal section key. 
ACE_Select_Reactor_Handle_Set	ACE_Select_Reactor_Handle_Set (3)   - Track handles we are interested for various events. 
ACE_Select_Reactor_Handler_Repository	ACE_Select_Reactor_Handler_Repository (3)   - Used to map s onto the appropriate  *. 
ACE_Select_Reactor_Handler_Repository_Iterator	ACE_Select_Reactor_Handler_Repository_Iterator (3)  - Iterate through the . 
ACE_Select_Reactor_Impl 	ACE_Select_Reactor_Impl (3) - This class simply defines how Select_Reactor's basic interface functions should look like and provides a common base class for <Select_Reactor> using various locking mechanism. 
ACE_Select_Reactor_Notify	ACE_Select_Reactor_Notify (3)	- Unblock the  from its event loop. 
ACE_Select_Reactor_T		ACE_Select_Reactor_T (3)    - An object oriented event demultiplexor and event handler dispatcher. 
ACE_Select_Reactor_Token_T	ACE_Select_Reactor_Token_T (3)	- Used as a synchronization mechanism to coordinate concurrent access to a Select_Reactor object. 
ACE_Select_Reactor_Token_T<	ACE_Guard< (3)	- Template specialization of  for the . 
ACE_Semaphore	ACE_Semaphore (3)   - Wrapper for Dijkstra style general semaphores. 
ACE_Service_Config		ACE_Service_Config (3)	- Supplies common server operations for dynamic and static configuration of services. 
ACE_Service_Handler		ACE_Service_Handler (3) - This base class defines the interface for the ACE_Asynch_Acceptor to call into when new connection are accepted. 
ACE_Service_Manager		ACE_Service_Manager (3) - Provide a standard ACE service for managing all the services configured in an . 
ACE_Service_Object		ACE_Service_Object (3)	- Provide the abstract base class common to all service implementations. 
ACE_Service_Object_Ptr		ACE_Service_Object_Ptr (3)  - This is a smart pointer that holds onto the associated  * until the current scope is left, at which point the object's <fini> hook is called and the service_object_ gets deleted. 
ACE_Service_Object_Type 	ACE_Service_Object_Type (3) - Define the methods for handling the configuration of . 
ACE_Service_Repository		ACE_Service_Repository (3)  - Contains all the services offered by a Service Configurator-based application. 
ACE_Service_Repository_Iterator ACE_Service_Repository_Iterator (3) - Iterate through the . 
ACE_Service_Type		ACE_Service_Type (3)	- Keeps track of information related to the various  subclasses. 
ACE_Service_Type_Impl		ACE_Service_Type_Impl (3)   - The abstract base class of the hierarchy that defines the contents of the . The subclasses of this class allow the configuration of , , and . 
ACE_Shared_Memory		ACE_Shared_Memory (3)	- This base class adapts both System V shared memory and "BSD" mmap to a common API. 
ACE_Shared_Memory_MM		ACE_Shared_Memory_MM (3)    - Shared memory wrapper based on MMAP. 
ACE_Shared_Memory_Pool		ACE_Shared_Memory_Pool (3)  - 
ACE_Shared_Memory_Pool		ACE_Shared_Memory_Pool (3)  - Make a memory pool that is based on System V shared memory (shmget(2) etc.). This implementation allows memory to be shared between processes. If your platform doesn't support System V shared memory (e.g., Win32 and many RTOS platforms do not) then you should use ACE_MMAP_Memory_Pool instead of this class. In fact, you should probably use ACE_MMAP_Memory_Pool on platforms that *do* support System V shared memory since it provides more powerful features, such as persistent backing store and greatly scalability. 
ACE_Shared_Memory_Pool_Options	ACE_Shared_Memory_Pool_Options (3)  - Helper class for Shared Memory Pool constructor options. 
ACE_Shared_Memory_SV		ACE_Shared_Memory_SV (3)    - Shared memory wrapper based on System V shared memory. 
ACE_Shared_Object		ACE_Shared_Object (3)	- Provide the abstract base class used to access dynamic linking facilities. 
ACE_Sig_Action	ACE_Sig_Action (3)  - C++ wrapper facade for the <sigaction> struct. 
ACE_Sig_Adapter ACE_Sig_Adapter (3) - Provide an adapter that transforms various types of signal handlers into the scheme used by the . 
ACE_Sig_Guard	ACE_Sig_Guard (3)   - Hold signals in MASK for duration of a C++ statement block. Note that a "0" for mask causes all signals to be held. 
ACE_Sig_Handler ACE_Sig_Handler (3) - This is the main dispatcher of signals for ACE. It improves the existing UNIX signal handling mechanism by allowing C++ objects to handle signals in a way that avoids the use of global/static variables and functions. 
ACE_Sig_Handlers		ACE_Sig_Handlers (3)	- This is an alternative signal handling dispatcher for ACE. It allows a list of signal handlers to be registered for each signal. It also makes SA_RESTART the default mode. 
ACE_Sig_Set	ACE_Sig_Set (3) - Provide a C++ wrapper for the C sigset_t interface. 
ACE_Singleton	ACE_Singleton (3)   - A Singleton Adapter uses the Adapter pattern to turn ordinary classes into Singletons optimized with the Double-Checked Locking optimization pattern. 
ACE_Singleton_Strategy		ACE_Singleton_Strategy (3)  - Defines the interface for specifying a creation strategy for a <SVC_HANDLER> that always returns the same <SVC_HANDLER> (i.e., it's a Singleton). 
ACE_Sock_Connect		ACE_Sock_Connect (3)	- 
ACE_Static_Allocator		ACE_Static_Allocator (3)    - Defines a class that provided a highly optimized memory management scheme for allocating memory statically. 
ACE_Static_Allocator_Base	ACE_Static_Allocator_Base (3)	- Defines a class that provided a highly optimized memory management scheme for allocating memory statically. 
ACE_Static_Function_Node	ACE_Static_Function_Node (3)	- Keeps track of the symbol name for a function that is not linked in from a DLL, but is statically linked with the application. 
ACE_Static_Node ACE_Static_Node (3) - Handle a statically linked node. 
ACE_Static_Object_Lock		ACE_Static_Object_Lock (3)  - Provide an interface to access a global lock. 
ACE_Static_Svc_Descriptor	ACE_Static_Svc_Descriptor (3)	- Holds the information necessary to describe a statically linked Svc. 
ACE_Stats	ACE_Stats (3)	- Provides simple statistical analysis. 
ACE_Stats_Value ACE_Stats_Value (3) - Helper class for ACE_Stats. 
ACE_Str_Buf	ACE_Str_Buf (3) - Simple wrapper for STREAM pipes strbuf. 
ACE_Strategy_Acceptor		ACE_Strategy_Acceptor (3)   - Abstract factory for creating a service handler (SVC_HANDLER), accepting into the SVC_HANDLER, and activating the SVC_HANDLER. 
ACE_Strategy_Connector		ACE_Strategy_Connector (3)  - Abstract factory for creating a service handler (SVC_HANDLER), connecting the SVC_HANDLER, and activating the SVC_HANDLER. 
ACE_Stream	ACE_Stream (3)	- This class is the primary abstraction for the ASX framework. It is moduled after System V Stream. 
ACE_Stream_Head ACE_Stream_Head (3) - Standard module that acts as the head of a ustream. 
ACE_Stream_Iterator		ACE_Stream_Iterator (3) - Iterate through an . 
ACE_Stream_Node ACE_Stream_Node (3) - Handle a Stream. 
ACE_Stream_Tail ACE_Stream_Tail (3) - Standard module that acts as the head of a ustream. 
ACE_Stream_Type ACE_Stream_Type (3) - Define the methods for handling the configuration of . 
ACE_Streambuf	ACE_Streambuf (3)   - Create your custom streambuf by providing and ACE_*_Stream object to this template. I have tested it with ACE_SOCK_Stream and it should work fine for others as well. 
ACE_Streambuf_T ACE_Streambuf_T (3) - 
ACE_StringCapEntry		ACE_StringCapEntry (3)	- This class implement the ACE String Capability subclass. 
ACE_Strong_Bound_Ptr		ACE_Strong_Bound_Ptr (3)    - This class implements support for a reference counted pointer. Assigning or copying instances of an ACE_Strong_Bound_Ptr will automatically increment the reference count of the underlying object. When the last instance of an ACE_Strong_Bound_Ptr that references a particular object is destroyed or overwritten, it will invoke delete on its underlying pointer. 
ACE_Sub_Barrier ACE_Sub_Barrier (3) - 
ACE_Suspend_Node		ACE_Suspend_Node (3)	- Suspend a Service Node. 
ACE_Svc_Conf_Lexer_Guard	ACE_Svc_Conf_Lexer_Guard (3)	- "Guard" that ensures lexer buffer stack manipulation is exception-safe. 
ACE_Svc_Handler ACE_Svc_Handler (3) - Defines the interface for a service that exchanges data with its connected peer. 
ACE_Svc_Tuple	ACE_Svc_Tuple (3)   - Holds the ACE_Svc_Handler and its argument and  until an asynchronous connection completes. 
ACE_Synch_Options		ACE_Synch_Options (3)	- Contains the values of options used to determine the synchronous and asynchronous behavior. 
ACE_System_Time ACE_System_Time (3) - Defines the timer services of the OS interface to access the system time either on the local host or on the central time server in the network. 
ACE_TLI 	ACE_TLI (3)	- Defines the member functions for the base class of the ACE_TLI abstraction. 
ACE_TLI_Acceptor		ACE_TLI_Acceptor (3)	- Defines the member functions for ACE_TLI_Acceptor abstraction. 
ACE_TLI_Connector		ACE_TLI_Connector (3)	- Defines an active connection factory for the ACE_TLI C++ wrappers. 
ACE_TLI_Stream	ACE_TLI_Stream (3)  - Defines the member functions for ACE_TLI_Stream abstraction. 
ACE_TP_Reactor	ACE_TP_Reactor (3)  - Specialization of Select Reactor to support thread-pool based event dispatching. 
ACE_TP_Token_Guard		ACE_TP_Token_Guard (3)	- A helper class that helps grabbing, releasing and waiting on tokens for a thread that tries calling handle_events (). 
ACE_TSS 	ACE_TSS (3)	- Allows objects that are "physically" in thread specific storage (i.e., private to a thread) to be accessed as though they were "logically" global to a program. 
ACE_TSS_Adapter ACE_TSS_Adapter (3) - This class encapsulates a TSS object and its associated C++ destructor function. It is used by the ACE_TSS... methods (in Synch_T.cpp) in order to allow an extern "C" cleanup routine to be used. Needed by the "frigging" MVS C++ compiler. 
ACE_TSS_Info	ACE_TSS_Info (3)    - Thread Specific Key management. 
ACE_TSS_Keys	ACE_TSS_Keys (3)    - Collection of in-use flags for a thread's TSS keys. For internal use only by ACE_TSS_Cleanup; it is public because some compilers can't use nested classes for template instantiation parameters. 
ACE_TSS_Ref	ACE_TSS_Ref (3) - "Reference count" for thread-specific storage keys. 
ACE_TSS_Singleton		ACE_TSS_Singleton (3)	- This class uses the Adapter pattern to turn ordinary classes into Thread-specific Singletons optimized with the Double-Checked Locking optimization pattern. 
ACE_TSS_Type_Adapter		ACE_TSS_Type_Adapter (3)    - Adapter that allows built-in types to be used with ACE_TSS. 
ACE_TTY_IO	ACE_TTY_IO (3)	- 
ACE_TTY_IO	ACE_TTY_IO (3)	- Class definitions for platform specific TTY features. 
ACE_Task	ACE_Task (3)	- Primary interface for application message processing, as well as input and output message queueing. 
ACE_Task_Base	ACE_Task_Base (3)   - Direct base class for the ACE_Task template. 
ACE_Task_Flags	ACE_Task_Flags (3)  - These flags are used within the ACE_Task. 
ACE_Test_and_Set		ACE_Test_and_Set (3)	- Implements the classic ``test and set'' operation. 
ACE_Thread	ACE_Thread (3)	- Provides a wrapper for threads. 
ACE_Thread_Adapter		ACE_Thread_Adapter (3)	- Converts a C++ function into a function  function that can be called from a thread creation routine (e.g., <pthread_create> or <_beginthreadex>) that expects an extern "C" entry point. This class also makes it possible to transparently provide hooks to register a thread with an . 
ACE_Thread_Barrier		ACE_Thread_Barrier (3)	- Implements "barrier synchronization" using ACE_Thread_Mutexes! 
ACE_Thread_Condition		ACE_Thread_Condition (3)    - ACE_Condition variable wrapper that works within processes. 
ACE_Thread_Control		ACE_Thread_Control (3)	- Used to keep track of a thread's activities within its entry point function. 
ACE_Thread_Descriptor		ACE_Thread_Descriptor (3)   - Information for controlling threads that run under the control of the <Thread_Manager>. 
ACE_Thread_Descriptor_Base	ACE_Thread_Descriptor_Base (3)	- Basic information for thread descriptors. These information gets extracted out because we need it after a thread is terminated. 
ACE_Thread_Exit ACE_Thread_Exit (3) - Keep exit information for a Thread in thread specific storage. so that the thread-specific exit hooks will get called no matter how the thread exits (e.g., via , C++ or Win32 exception, "falling off the end" of the thread entry point function, etc.). 
ACE_Thread_Exit_Maybe		ACE_Thread_Exit_Maybe (3)   - A version of ACE_Thread_Exit that is created dynamically under the hood if the flag is set to TRUE. 
ACE_Thread_Hook ACE_Thread_Hook (3) - This class makes it possible to provide user-defined "start" hooks that are called before the thread entry point function is invoked. 
ACE_Thread_ID	ACE_Thread_ID (3)   - Defines a platform-independent thread ID. 
ACE_Thread_Manager		ACE_Thread_Manager (3)	- Manages a pool of threads. 
ACE_Thread_Mutex		ACE_Thread_Mutex (3)	- ACE_Thread_Mutex wrapper (only valid for threads in the same process). 
ACE_Thread_Semaphore		ACE_Thread_Semaphore (3)    - Wrapper for Dijkstra style general semaphores that work only within one process. 
ACE_Thread_Strategy		ACE_Thread_Strategy (3) - Defines the interface for specifying a concurrency strategy for a <SVC_HANDLER> based on multithreading. 
ACE_Thread_Timer_Queue_Adapter	ACE_Thread_Timer_Queue_Adapter (3)  - Adapts a Timer_Queue using a separate thread for dispatching. 
ACE_Throughput_Stats		ACE_Throughput_Stats (3)    - A simple class to make throughput and latency analysis. 
ACE_Thru_Task	ACE_Thru_Task (3)   - Standard module that acts as a "no op", simply passing on all data to its adjacent neighbor. 
ACE_Time_Request		ACE_Time_Request (3)	- 
ACE_Time_Request		ACE_Time_Request (3)	- Message format for delivering requests to the ACE_Time Server. 
ACE_Time_Value	ACE_Time_Value (3)  - Operations on "timeval" structures, which express time in <secs> and <usecs>. 
ACE_Timer_Hash_Iterator_T	ACE_Timer_Hash_Iterator_T (3)	- Iterates over an . 
ACE_Timer_Hash_T		ACE_Timer_Hash_T (3)	- Provides a hash table of <BUCKET>s as an implementation for a timer queue. 
ACE_Timer_Hash_Upcall		ACE_Timer_Hash_Upcall (3)   - Functor for Timer_Hash. 
ACE_Timer_Heap_Iterator_T	ACE_Timer_Heap_Iterator_T (3)	- Iterates over an . 
ACE_Timer_Heap_T		ACE_Timer_Heap_T (3)	- Provides a very fast and predictable timer implementation. 
ACE_Timer_List_Iterator_T	ACE_Timer_List_Iterator_T (3)	- Iterates over an . 
ACE_Timer_List_T		ACE_Timer_List_T (3)	- Provides a simple implementation of timers. 
ACE_Timer_Node_Dispatch_Info_T	ACE_Timer_Node_Dispatch_Info_T (3)  - Maintains generated dispatch information for Timer nodes. 
ACE_Timer_Node_T		ACE_Timer_Node_T (3)	- Maintains the state associated with a Timer entry. 
ACE_Timer_Queue_Iterator_T	ACE_Timer_Queue_Iterator_T (3)	- Generic interface for iterating over a subclass of . 
ACE_Timer_Queue_T		ACE_Timer_Queue_T (3)	- Provides an interface to timers. 
ACE_Timer_Wheel_Iterator_T	ACE_Timer_Wheel_Iterator_T (3)	- Iterates over an . 
ACE_Timer_Wheel_T		ACE_Timer_Wheel_T (3)	- Provides a Timing Wheel version of Timer Queue. 
ACE_TkReactor	ACE_TkReactor (3)   - An object-oriented event demultiplexor and event handler dispatcher that uses the Tk functions. 
ACE_TkReactorID ACE_TkReactorID (3) - This little class is necessary due to the way that Microsoft implements sockets to be pointers rather than indices. 
ACE_TkReactor_Input_Callback	ACE_TkReactor_Input_Callback (3)    - 
ACE_Token	ACE_Token (3)	- 
ACE_Token	ACE_Token (3)	- 
ACE_Token	ACE_Token (3)	- Class that acquires, renews, and releases a synchronization token that is serviced in strict FIFO ordering and that also supports (1) recursion and (2) readers/writer semantics. 
ACE_Tokenizer	ACE_Tokenizer (3)   - Delimiter Entry. 
ACE_Tokenizer	ACE_Tokenizer (3)   - Preserve Entry. 
ACE_Tokenizer	ACE_Tokenizer (3)   - Tokenizer. 
ACE_Trace	ACE_Trace (3)	- A C++ trace facility that keeps track of which methods are entered and exited. 
ACE_Typed_SV_Message		ACE_Typed_SV_Message (3)    - Defines the header file for the C++ wrapper for System V message queues. 
ACE_Typed_SV_Message_Queue	ACE_Typed_SV_Message_Queue (3)	- Defines the header file for the C++ wrapper facade for typed message queues. 
ACE_UNIX_Addr	ACE_UNIX_Addr (3)   - Defines the ``UNIX domain address family'' address format. 
ACE_UPIPE_Acceptor		ACE_UPIPE_Acceptor (3)	- Defines the format and interface for the listener side of the ACE_UPIPE_Stream. 
ACE_UPIPE_Connector		ACE_UPIPE_Connector (3) - Defines an active connection factory for the	wrappers. 
ACE_UPIPE_Stream		ACE_UPIPE_Stream (3)	- Defines the method that transfer data on a UPIPE. 
ACE_Unbounded_Queue		ACE_Unbounded_Queue (3) - A Queue of "infinite" length. 
ACE_Unbounded_Queue_Iterator	ACE_Unbounded_Queue_Iterator (3)    - Implement an iterator over an unbounded queue. 
ACE_Unbounded_Set		ACE_Unbounded_Set (3)	- Implement a simple unordered set of <T> of unbounded size. 
ACE_Unbounded_Set_Const_Iterator    ACE_Unbounded_Set_Const_Iterator (3)    - Implement an const iterator over an unbounded set. 
ACE_Unbounded_Set_Iterator	ACE_Unbounded_Set_Iterator (3)	- Implement an iterator over an unbounded set. 
ACE_Unbounded_Stack		ACE_Unbounded_Stack (3) - Implement a generic LIFO abstract data type. 
ACE_Unbounded_Stack_Iterator	ACE_Unbounded_Stack_Iterator (3)    - Implement an iterator over an unbounded Stack. 
ACE_Unmanaged_Singleton 	ACE_Unmanaged_Singleton (3) - Same as , except does _not_ register with  for destruction. 
ACE_Unmanaged_TSS_Singleton	ACE_Unmanaged_TSS_Singleton (3) - Same as , except does _not_ register with  for destruction. 
ACE_WChar_Codeset_Translator	ACE_WChar_Codeset_Translator (3)    - Codeset translation routines common to both Output and Input CDR streams. 
ACE_WFMO_Reactor		ACE_WFMO_Reactor (3)	- An object oriented event demultiplexor and event handler WFMO_Reactor for Win32 WaitForMultipleObjects. 
ACE_WFMO_Reactor_Handler_Repository ACE_WFMO_Reactor_Handler_Repository (3) - This struct contains the necessary information for every <Event_Handler> entry. The reason the event is not in this structure is because we need to pass an event array into WaitForMultipleObjects and therefore keeping the events seperate makes sense. 
ACE_WFMO_Reactor_Handler_Repository ACE_WFMO_Reactor_Handler_Repository (3) - This structure inherits from the common structure to add information for <to_be_added> entries. 
ACE_WFMO_Reactor_Handler_Repository ACE_WFMO_Reactor_Handler_Repository (3) - This structure inherits from the common structure to add information for current entries. 
ACE_WFMO_Reactor_Handler_Repository ACE_WFMO_Reactor_Handler_Repository (3) - This structure inherits from the common structure to add information for suspended entries. 
ACE_WFMO_Reactor_Handler_Repository ACE_WFMO_Reactor_Handler_Repository (3) - Used to map s onto the appropriate  * and other information. 
ACE_WFMO_Reactor_Notify 	ACE_WFMO_Reactor_Notify (3) - Unblock the  from its event loop, passing it an optional	to dispatch. 
ACE_WIN32_Asynch_Accept 	ACE_WIN32_Asynch_Accept (3) - This class is a factory for starting off asynchronous accepts on a listen handle. 
ACE_WIN32_Asynch_Accept_Result	ACE_WIN32_Asynch_Accept_Result (3)  - This class implements ACE_Asynch_Accept::Result for WIN32 platform. 
ACE_WIN32_Asynch_Operation	ACE_WIN32_Asynch_Operation (3)	- This class abstracts out the common things needed for implementing Asynch_Operation for WIN32 platform. 
ACE_WIN32_Asynch_Read_Dgram	ACE_WIN32_Asynch_Read_Dgram (3) - This class is a factory for starting off asynchronous reads on a UDP socket. 
ACE_WIN32_Asynch_Read_Dgram_Result  ACE_WIN32_Asynch_Read_Dgram_Result (3)  - This is class provides concrete implementation for ACE_Asynch_Read_Dgram::Result class. 
ACE_WIN32_Asynch_Read_File	ACE_WIN32_Asynch_Read_File (3)	- This class is a factory for starting off asynchronous reads on a file. 
ACE_WIN32_Asynch_Read_File_Result   ACE_WIN32_Asynch_Read_File_Result (3)   - This is class provides concrete implementation for ACE_Asynch_Read_File::Result class. 
ACE_WIN32_Asynch_Read_Stream	ACE_WIN32_Asynch_Read_Stream (3)    - This class is a factory for starting off asynchronous reads on a stream. 
ACE_WIN32_Asynch_Read_Stream_Result ACE_WIN32_Asynch_Read_Stream_Result (3) - This is class provides concrete implementation for ACE_Asynch_Read_Stream::Result class. 
ACE_WIN32_Asynch_Result 	ACE_WIN32_Asynch_Result (3) - An abstract class which adds information to the OVERLAPPED structure to make it more useful. 
ACE_WIN32_Asynch_Timer		ACE_WIN32_Asynch_Timer (3)  - This class is posted to the completion port when a timer expires. When the complete method of this object is called, the <handler>'s handle_timeout method will be called. 
ACE_WIN32_Asynch_Transmit_File	ACE_WIN32_Asynch_Transmit_File (3)  - This class is a factory for starting off asynchronous transmit files on a stream. 
ACE_WIN32_Asynch_Transmit_File_Result	ACE_WIN32_Asynch_Transmit_File_Result (3)   - This class implements ACE_Asynch_Transmit_File::Result for WIN32 platforms. 
ACE_WIN32_Asynch_Write_Dgram	ACE_WIN32_Asynch_Write_Dgram (3)    - This class is a factory for starting off asynchronous writes on a UDP socket. 
ACE_WIN32_Asynch_Write_Dgram_Result ACE_WIN32_Asynch_Write_Dgram_Result (3) - This is class provides concrete implementation for ACE_Asynch_Write_Dgram::Result class. 
ACE_WIN32_Asynch_Write_File	ACE_WIN32_Asynch_Write_File (3) - This class is a factory for starting off asynchronous writes on a file. 
ACE_WIN32_Asynch_Write_File_Result  ACE_WIN32_Asynch_Write_File_Result (3)  - This class provides implementation for ACE_Asynch_Write_File_Result for WIN32 platforms. 
ACE_WIN32_Asynch_Write_Stream	ACE_WIN32_Asynch_Write_Stream (3)   - This class is a factory for starting off asynchronous writes on a stream. 
ACE_WIN32_Asynch_Write_Stream_Result	ACE_WIN32_Asynch_Write_Stream_Result (3)    - This is class provides concrete implementation for ACE_Asynch_Write_Stream::Result class. 
ACE_WIN32_Proactor		ACE_WIN32_Proactor (3)	- A manager for asynchronous event demultiplexing. 
ACE_WString	ACE_WString (3) - This class provides a wrapper facade for C wide strings. 
ACE_Wakeup_All_Threads_Handler	ACE_Wakeup_All_Threads_Handler (3)  - This is a helper class whose sole purpose is to handle events on wakeup_all_threads_>. 
ACE_Weak_Bound_Ptr		ACE_Weak_Bound_Ptr (3)	- This class implements support for a weak pointer that complements ACE_Strong_Bound_Ptr. Unlike ACE_Strong_Bound_Ptr, assigning or copying instances of an ACE_Weak_Bound_Ptr will not automatically increment the reference count of the underlying object. What ACE_Weak_Bound_Ptr does is preserve the knowledge that the object is in fact reference counted, and thus provides an alternative to raw pointers where non-ownership associations must be maintained. When the last instance of an ACE_Strong_Bound_Ptr that references a particular object is destroyed or overwritten, the corresponding ACE_Weak_Bound_Ptr instances are set to null. 
ACE_Write_Guard ACE_Write_Guard (3) - This class is similar to class , though it acquires/releases a write lock automatically (naturally, the  it is instantiated with must support the appropriate API). 
ACE_Write_Guard<		ACE_Write_Guard< (3)	- 
ACE_XtReactor	ACE_XtReactor (3)   - An object-oriented event demultiplexor and event handler dispatcher that uses the X Toolkit functions. 
ACE_XtReactorID ACE_XtReactorID (3) - This little class is necessary due to the way that Microsoft implements sockets to be pointers rather than indices. 
ACE_YYSTYPE	ACE_YYSTYPE (3) - 
ACE_export_h	ACE_export_h (3)    - 
ACE_h		ACE_h (3)	- 
ACE_recursive_thread_mutex_t	ACE_recursive_thread_mutex_t (3)    - Implement a thin C++ wrapper that allows nested acquisition and release of a mutex that occurs in the same thread. 
ARGV_h		ARGV_h (3)	- 
ATM_Acceptor_h	ATM_Acceptor_h (3)  - 
ATM_Addr_h	ATM_Addr_h (3)	- 
ATM_Connector_h ATM_Connector_h (3) - 
ATM_Params_h	ATM_Params_h (3)    - 
ATM_QoS_h	ATM_QoS_h (3)	- 
ATM_Stream_h	ATM_Stream_h (3)    - 
Acceptor_h	Acceptor_h (3)	- 
Activation_Queue_h		Activation_Queue_h (3)	- 
Active_Map_Manager_T_h		Active_Map_Manager_T_h (3)  - 
Active_Map_Manager_h		Active_Map_Manager_h (3)    - 
Addr_h		Addr_h (3)	- 
Arg_Shifter_h	Arg_Shifter_h (3)   - 
Array_Base_h	Array_Base_h (3)    - 
Array_h 	Array_h (3)	- 
Asynch_Acceptor_h		Asynch_Acceptor_h (3)	- 
Asynch_IO_Impl_h		Asynch_IO_Impl_h (3)	- 
Asynch_IO_h	Asynch_IO_h (3) - 
Auto_IncDec_T_h Auto_IncDec_T_h (3) - 
Auto_Ptr_h	Auto_Ptr_h (3)	- 
Base_Thread_Adapter_h		Base_Thread_Adapter_h (3)   - 
Based_Pointer_Repository_h	Based_Pointer_Repository_h (3)	- 
Based_Pointer_T_h		Based_Pointer_T_h (3)	- 
Basic_Stats_h	Basic_Stats_h (3)   - 
Basic_Types_h	Basic_Types_h (3)   - 
Bound_Ptr_h	Bound_Ptr_h (3) - 
CDR_Base_h	CDR_Base_h (3)	- 
CDR_Stream_h	CDR_Stream_h (3)    - 
CORBA_Handler_h CORBA_Handler_h (3) - 
CORBA_Ref_h	CORBA_Ref_h (3) - 
CORBA_macros_h	CORBA_macros_h (3)  - 
Cache_Map_Manager_T_h		Cache_Map_Manager_T_h (3)   - 
Cached_Connect_Strategy_T_h	Cached_Connect_Strategy_T_h (3) - 
Caching_Strategies_T_h		Caching_Strategies_T_h (3)  - 
Caching_Utility_T_h		Caching_Utility_T_h (3) - 
Capabilities_h	Capabilities_h (3)  - 
Cleanup_Strategies_T_h		Cleanup_Strategies_T_h (3)  - 
Codeset_IBM1047_h		Codeset_IBM1047_h (3)	- 
Configuration_Import_Export_h	Configuration_Import_Export_h (3)   - 
Configuration_h Configuration_h (3) - 
Connector_h	Connector_h (3) - 
Containers_T_h	Containers_T_h (3)  - 
Containers_h	Containers_h (3)    - 
DEV_Addr_h	DEV_Addr_h (3)	- 
DEV_Connector_h DEV_Connector_h (3) - 
DEV_IO_h	DEV_IO_h (3)	- 
DEV_h		DEV_h (3)	- 
DLL_h		DLL_h (3)	- 
Date_Time_h	Date_Time_h (3) - 
Dirent_Selector_h		Dirent_Selector_h (3)	- 
Dirent_h	Dirent_h (3)	- 
Dump_T_h	Dump_T_h (3)	- 
Dump_h		Dump_h (3)	- 
Dynamic_Service_Base_h		Dynamic_Service_Base_h (3)  - 
Dynamic_Service_h		Dynamic_Service_h (3)	- 
Dynamic_h	Dynamic_h (3)	- 
Env_Value_T_h	Env_Value_T_h (3)   - 
Event_Handler_T_h		Event_Handler_T_h (3)	- 
Event_Handler_h Event_Handler_h (3) - 
FIFO_Recv_Msg_h FIFO_Recv_Msg_h (3) - 
FIFO_Recv_h	FIFO_Recv_h (3) - 
FIFO_Send_Msg_h FIFO_Send_Msg_h (3) - 
FIFO_Send_h	FIFO_Send_h (3) - 
FIFO_h		FIFO_h (3)	- 
FILE_Addr_h	FILE_Addr_h (3) - 
FILE_Connector_h		FILE_Connector_h (3)	- 
FILE_IO_h	FILE_IO_h (3)	- 
FILE_h		FILE_h (3)	- 
File_Lock_h	File_Lock_h (3) - 
Filecache_h	Filecache_h (3) - 
FlReactor_h	FlReactor_h (3) - 
Flag_Manip_h	Flag_Manip_h (3)    - 
Free_List_h	Free_List_h (3) - 
Functor_T_h	Functor_T_h (3) - 
Functor_h	Functor_h (3)	- 
Future_Set_h	Future_Set_h (3)    - 
Future_h	Future_h (3)	- 
Get_Opt_h	Get_Opt_h (3)	- 
Handle_Gobbler_h		Handle_Gobbler_h (3)	- 
Handle_Ops_h	Handle_Ops_h (3)    - 
Handle_Set_h	Handle_Set_h (3)    - 
Hash_Cache_Map_Manager_T_h	Hash_Cache_Map_Manager_T_h (3)	- 
Hash_Map_Manager_T_h		Hash_Map_Manager_T_h (3)    - 
Hash_Map_Manager_h		Hash_Map_Manager_h (3)	- 
Hash_Map_With_Allocator_T_h	Hash_Map_With_Allocator_T_h (3) - 
High_Res_Timer_h		High_Res_Timer_h (3)	- 
INET_Addr_h	INET_Addr_h (3) - 
IOStream_T_h	IOStream_T_h (3)    - 
IOStream_h	IOStream_h (3)	- 
IO_Cntl_Msg_h	IO_Cntl_Msg_h (3)   - 
IO_SAP_h	IO_SAP_h (3)	- 
IPC_SAP_h	IPC_SAP_h (3)	- 
Init_ACE_h	Init_ACE_h (3)	- 
Intrusive_List_Node_h		Intrusive_List_Node_h (3)   - 
Intrusive_List_h		Intrusive_List_h (3)	- 
LOCK_SOCK_Acceptor_h		LOCK_SOCK_Acceptor_h (3)    - 
LSOCK_Acceptor_h		LSOCK_Acceptor_h (3)	- 
LSOCK_CODgram_h LSOCK_CODgram_h (3) - 
LSOCK_Connector_h		LSOCK_Connector_h (3)	- 
LSOCK_Dgram_h	LSOCK_Dgram_h (3)   - 
LSOCK_Stream_h	LSOCK_Stream_h (3)  - 
LSOCK_h 	LSOCK_h (3)	- 
Lib_Find_h	Lib_Find_h (3)	- 
Local_Name_Space_T_h		Local_Name_Space_T_h (3)    - 
Local_Name_Space_h		Local_Name_Space_h (3)	- 
Local_Tokens_h	Local_Tokens_h (3)  - 
Log_Msg_Backend_h		Log_Msg_Backend_h (3)	- 
Log_Msg_Callback_h		Log_Msg_Callback_h (3)	- 
Log_Msg_IPC_h	Log_Msg_IPC_h (3)   - 
Log_Msg_NT_Event_Log_h		Log_Msg_NT_Event_Log_h (3)  - 
Log_Msg_UNIX_Syslog_h		Log_Msg_UNIX_Syslog_h (3)   - 
Log_Msg_h	Log_Msg_h (3)	- 
Log_Priority_h	Log_Priority_h (3)  - 
Log_Record_h	Log_Record_h (3)    - 
Logging_Strategy_h		Logging_Strategy_h (3)	- 
MEM_Acceptor_h	MEM_Acceptor_h (3)  - 
MEM_Addr_h	MEM_Addr_h (3)	- 
MEM_Connector_h MEM_Connector_h (3) - 
MEM_IO_h	MEM_IO_h (3)	- 
MEM_SAP_h	MEM_SAP_h (3)	- 
MEM_Stream_h	MEM_Stream_h (3)    - 
Malloc_Allocator_h		Malloc_Allocator_h (3)	- 
Malloc_Base_h	Malloc_Base_h (3)   - 
Malloc_T_h	Malloc_T_h (3)	- 
Malloc_h	Malloc_h (3)	- 
Managed_Object_h		Managed_Object_h (3)	- 
Map_Manager_h	Map_Manager_h (3)   - 
Map_T_h 	Map_T_h (3)	- 
Map_h		Map_h (3)	- 
Mem_Map_h	Mem_Map_h (3)	- 
Memory_Pool_h	Memory_Pool_h (3)   - 
Message_Block_T_h		Message_Block_T_h (3)	- 
Message_Block_h Message_Block_h (3) - 
Message_Queue_T_h		Message_Queue_T_h (3)	- 
Message_Queue_h Message_Queue_h (3) - 
Method_Object_h Method_Object_h (3) - 
Method_Request_h		Method_Request_h (3)	- 
Min_Max_h	Min_Max_h (3)	- 
Module_h	Module_h (3)	- 
Msg_WFMO_Reactor_h		Msg_WFMO_Reactor_h (3)	- 
Multiplexor_h	Multiplexor_h (3)   - 
NT_Service_h	NT_Service_h (3)    - 
Name_Proxy_h	Name_Proxy_h (3)    - 
Name_Request_Reply_h		Name_Request_Reply_h (3)    - 
Name_Space_h	Name_Space_h (3)    - 
Naming_Context_h		Naming_Context_h (3)	- 
Node_h		Node_h (3)	- 
OS_Dirent_h	OS_Dirent_h (3) - 
OS_Errno_h	OS_Errno_h (3)	- 
OS_Export_h	OS_Export_h (3) - 
OS_Log_Msg_Attributes_h 	OS_Log_Msg_Attributes_h (3) - 
OS_Memory_h	OS_Memory_h (3) - 
OS_String_h	OS_String_h (3) - Contains definition of class ACE_OS_String. 
OS_TLI_h	OS_TLI_h (3)	- 
OS_Thread_Adapter_h		OS_Thread_Adapter_h (3) - 
OS_h		OS_h (3)	- 
OVERLAPPED	OVERLAPPED (3)	- 
Obchunk_h	Obchunk_h (3)	- 
Object_Manager_h		Object_Manager_h (3)	- 
Obstack_T_h	Obstack_T_h (3) - 
Obstack_h	Obstack_h (3)	- 
PI_Malloc_h	PI_Malloc_h (3) - 
POSIX_Asynch_IO_h		POSIX_Asynch_IO_h (3)	- 
POSIX_Proactor_h		POSIX_Proactor_h (3)	- 
Pair_T_h	Pair_T_h (3)	- 
Pair_h		Pair_h (3)	- 
Parse_Node_h	Parse_Node_h (3)    - 
Pipe_h		Pipe_h (3)	- 
Priority_Reactor_h		Priority_Reactor_h (3)	- 
Proactor_Impl_h Proactor_Impl_h (3) - 
Proactor_h	Proactor_h (3)	- 
Process_Manager_h		Process_Manager_h (3)	- 
Process_Mutex_h Process_Mutex_h (3) - 
Process_Semaphore_h		Process_Semaphore_h (3) - 
Process_h	Process_h (3)	- 
Profile_Timer_h Profile_Timer_h (3) - 
QObject 	QObject (3)	- 
QtReactor_h	QtReactor_h (3) - 
RB_Tree_h	RB_Tree_h (3)	- 
RW_Process_Mutex_h		RW_Process_Mutex_h (3)	- 
Reactor_Impl_h	Reactor_Impl_h (3)  - 
Reactor_h	Reactor_h (3)	- 
Read_Buffer_h	Read_Buffer_h (3)   - 
Refcounted_Auto_Ptr_h		Refcounted_Auto_Ptr_h (3)   - 
Registry_Name_Space_h		Registry_Name_Space_h (3)   - 
Registry_h	Registry_h (3)	- 
Remote_Name_Space_h		Remote_Name_Space_h (3) - 
Remote_Tokens_h Remote_Tokens_h (3) - 
SOCK_Acceptor_h SOCK_Acceptor_h (3) - 
SOCK_CODgram_h	SOCK_CODgram_h (3)  - 
SOCK_Connector_h		SOCK_Connector_h (3)	- 
SOCK_Dgram_Bcast_h		SOCK_Dgram_Bcast_h (3)	- 
SOCK_Dgram_Mcast_h		SOCK_Dgram_Mcast_h (3)	- 
SOCK_Dgram_h	SOCK_Dgram_h (3)    - 
SOCK_IO_h	SOCK_IO_h (3)	- 
SOCK_Stream_h	SOCK_Stream_h (3)   - 
SOCK_h		SOCK_h (3)	- 
SPIPE_Acceptor_h		SPIPE_Acceptor_h (3)	- 
SPIPE_Addr_h	SPIPE_Addr_h (3)    - 
SPIPE_Connector_h		SPIPE_Connector_h (3)	- 
SPIPE_Stream_h	SPIPE_Stream_h (3)  - 
SPIPE_h 	SPIPE_h (3)	- 
SString_h	SString_h (3)	- 
STREAM		STREAM (3)	- 
SUN_Proactor_h	SUN_Proactor_h (3)  - 
SV_Message_Queue_h		SV_Message_Queue_h (3)	- 
SV_Message_h	SV_Message_h (3)    - 
SV_Semaphore_Complex_h		SV_Semaphore_Complex_h (3)  - 
SV_Semaphore_Simple_h		SV_Semaphore_Simple_h (3)   - 
SV_Shared_Memory_h		SV_Shared_Memory_h (3)	- 
Sample_History_h		Sample_History_h (3)	- 
Sched_Params_h	Sched_Params_h (3)  - 
Select_Reactor_Base_h		Select_Reactor_Base_h (3)   - 
Select_Reactor_T_h		Select_Reactor_T_h (3)	- 
Select_Reactor_h		Select_Reactor_h (3)	- 
Service_Config_h		Service_Config_h (3)	- 
Service_Manager_h		Service_Manager_h (3)	- 
Service_Object_h		Service_Object_h (3)	- 
Service_Repository_h		Service_Repository_h (3)    - 
Service_Templates_h		Service_Templates_h (3) - 
Service_Types_h Service_Types_h (3) - 
Shared_Memory_MM_h		Shared_Memory_MM_h (3)	- 
Shared_Memory_SV_h		Shared_Memory_SV_h (3)	- 
Shared_Memory_h Shared_Memory_h (3) - 
Shared_Object_h Shared_Object_h (3) - 
Signal_h	Signal_h (3)	- 
Singleton_h	Singleton_h (3) -  
Sock_Connect_h	Sock_Connect_h (3)  - 
Stats_h 	Stats_h (3)	- 
Strategies_T_h	Strategies_T_h (3)  - 
Strategies_h	Strategies_h (3)    - 
Stream_Modules_h		Stream_Modules_h (3)	- 
Stream_h	Stream_h (3)	- 
Svc_Conf_Lexer_Guard_h		Svc_Conf_Lexer_Guard_h (3)  - 
Svc_Conf_Tokens_h		Svc_Conf_Tokens_h (3)	- 
Svc_Conf_h	Svc_Conf_h (3)	- 
Svc_Handler_h	Svc_Handler_h (3)   - 
Synch_Options_h Synch_Options_h (3) - 
Synch_T_h	Synch_T_h (3)	- 
Synch_h 	Synch_h (3)	- 
System_Time_h	System_Time_h (3)   - 
TLI_Acceptor_h	TLI_Acceptor_h (3)  - 
TLI_Connector_h TLI_Connector_h (3) - 
TLI_Stream_h	TLI_Stream_h (3)    - 
TLI_h		TLI_h (3)	- 
TP_Reactor_h	TP_Reactor_h (3)    - 
TTY_IO_h	TTY_IO_h (3)	- 
Task_T_h	Task_T_h (3)	- 
Task_h		Task_h (3)	- 
Test_and_Set_h	Test_and_Set_h (3)  - 
Thread_Adapter_h		Thread_Adapter_h (3)	- 
Thread_Control_h		Thread_Control_h (3)	- 
Thread_Exit_h	Thread_Exit_h (3)   - 
Thread_Hook_h	Thread_Hook_h (3)   - 
Thread_Manager_h		Thread_Manager_h (3)	- 
Thread_h	Thread_h (3)	- 
Time_Request_Reply_h		Time_Request_Reply_h (3)    - 
Time_Value_h	Time_Value_h (3)    - 
Timeprobe_T_h	Timeprobe_T_h (3)   - 
Timeprobe_h	Timeprobe_h (3) - 
Timer_Hash_T_h	Timer_Hash_T_h (3)  - 
Timer_Hash_h	Timer_Hash_h (3)    - 
Timer_Heap_T_h	Timer_Heap_T_h (3)  - 
Timer_Heap_h	Timer_Heap_h (3)    - 
Timer_List_T_h	Timer_List_T_h (3)  - 
Timer_List_h	Timer_List_h (3)    - 
Timer_Queue_Adapters_h		Timer_Queue_Adapters_h (3)  - 
Timer_Queue_T_h Timer_Queue_T_h (3) - 
Timer_Queue_h	Timer_Queue_h (3)   - 
Timer_Wheel_T_h Timer_Wheel_T_h (3) - 
Timer_Wheel_h	Timer_Wheel_h (3)   - 
TkReactor_h	TkReactor_h (3) - 
Token_Collection_h		Token_Collection_h (3)	- 
Token_Invariants_h		Token_Invariants_h (3)	- 
Token_Manager_h Token_Manager_h (3) - 
Token_Request_Reply_h		Token_Request_Reply_h (3)   - 
Token_h 	Token_h (3)	- 
Trace_h 	Trace_h (3)	- 
Typed_SV_Message_Queue_h	Typed_SV_Message_Queue_h (3)	- 
Typed_SV_Message_h		Typed_SV_Message_h (3)	- 
UNIX_Addr_h	UNIX_Addr_h (3) - 
UPIPE_Acceptor_h		UPIPE_Acceptor_h (3)	- 
UPIPE_Addr_h	UPIPE_Addr_h (3)    - 
UPIPE_Connector_h		UPIPE_Connector_h (3)	- 
UPIPE_Stream_h	UPIPE_Stream_h (3)  - 
Unbounded_Queue_h		Unbounded_Queue_h (3)	- 
Unbounded_Set_h Unbounded_Set_h (3) - 
Version_h	Version_h (3)	- 
WFMO_Reactor_h	WFMO_Reactor_h (3)  - 
WIN32_Asynch_IO_h		WIN32_Asynch_IO_h (3)	- 
WIN32_Proactor_h		WIN32_Proactor_h (3)	- 
XTI_ATM_Mcast_h XTI_ATM_Mcast_h (3) - 
XtReactor_h	XtReactor_h (3) - 
_WSANETWORKEVENTS		_WSANETWORKEVENTS (3)	- 
ace_wchar_h	ace_wchar_h (3) - 
aiocb		aiocb (3)	- 
auto_ptr	auto_ptr (3)	- Implements the draft C++ standard auto_ptr abstraction. 
cancel_state	cancel_state (3)    - 
char		ACE_Hash< (3)	- Function object for hashing a char. 
dirent		dirent (3)	- 
iosfwd_h	iosfwd_h (3)	- 
iostream	iostream (3)	- 
iovec		iovec (3)	- 
ip_mreq 	ip_mreq (3)	- 
msghdr		msghdr (3)	- 
msqid_ds	msqid_ds (3)	- 
post_h		post_h (3)	- 
pre_h		pre_h (3)	- 
rusage		rusage (3)	- 
semun		semun (3)	- 
shmaddr 	shmaddr (3)	- 
siginfo_t	siginfo_t (3)	- 
strbuf		strbuf (3)	- 
streambuf	streambuf (3)	- 
streams_h	streams_h (3)	- 
svc_export_h	svc_export_h (3)    - 
timespec	timespec (3)	- 
