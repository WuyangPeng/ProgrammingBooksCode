<html>
<head>
	<link rel="stylesheet" type="text/css" href="demogldocsv13.css">
<title>DemoGL SDK:Reference:Functions:DEMOGL_TextureCreateFromFBRegion</title>
</head>
<body>
<table WIDTH="100%" BORDER="0" cellpadding="0" cellspacing="0">
<tr>
	<td bgColor="#e8e8e8">
	DemoGL::Reference::Functions::<b>DEMOGL_TextureCreateFromFBRegion</b>
	</td>
</tr>
</table>
<br CLEAR="ALL">
<dl>
<dt><h4>DEMOGL_TextureCreateFromFBRegion</h4>
<dd>DEMOGL_TextureCreateFromFBRegion creates a new texture in the texture store of DemoGL with the data from a given region in the 
	backbuffer of the color buffer. The region is (iX,iY) - ((iX + iWidth + (2*iBorder)),(iY + iHeight + (2*iBorder)))
	<p>
	<pre>
<b>GLuint</b>
DEMOGL_TextureCreateFromFBRegion(
	<b>const int</b> <i>iX</i>,
	<b>const int</b> <i>iY</i>,
	<b>const int</b> <i>iWidth</i>,
	<b>const int</b> <i>iHeight</i>,
	<b>const char</b> *<i>pszIdentName</i>,
	<b>const int</b> <i>iBorder</i>,
	<b>const GLint</b> <i>iWrapS</i>, 
	<b>const GLint</b> <i>iWrapT</i>,
	<b>const GLint</b> <i>iMinFilter</i>,
	<b>const GLint</b> <i>iMagFilter</i>,
	<b>const GLint</b> <i>iTexUploadHint</i>,
	<b>const int</b> <i>iDimensions</i>
);
	</pre>
<dt><b>Parameters.</b>
<dd><dl>
	<dt><i>iX</i>
	<dd>Specifies the X-coordinate of the left lower corner of the region of the backbuffer which should be read for the texture data. This
		is a screencoordinate in pixels, starting from the left of the screen.
	<dt><i>iY</i>
	<dd>Specifies the Y-coordinate of the left lower corner of the region of the backbuffer which should be read for the texture data. This
		is a screencoordinate in pixels, starting from the bottom of the screen.
	<dt><i>iWidth</i>
	<dd>Specifies the width of the texture, which pixeldata is stored in the buffer pointed by <i>pbyBuffer</i> in pixels.
		Must be 2<i><sup>n</sup></i>&nbsp;+&nbsp;2(<i>iBorder</i>) for some integer <i>n</i>. 
	<dt><i>iHeight</i>
	<dd>Specifies the height of the texture, which pixeldata is stored in the buffer pointed by <i>pbyBuffer</i> in pixels.
		Must be 2<i><sup>n</sup></i>&nbsp;+&nbsp;2(<i>iBorder</i>) for some integer <i>n</i>. 
	<dt><i>pszIdentName</i>
	<dd>Pointer to a zero-terminated string which represents the name of the texture so other effects which will load the same
		texture by specifying the same name will receive a reference to this texture instead. Normally textures are globally referenced
		by the filename of the file with the texturedata, for textures created from a buffer there is no file, so you can specify any
		string as IdentName.
	<dt><i>iBorder</i>
	<dd>Specifies the width of the textureborder in OpenGL for this texture, normally 0 or 1.
	<dt><i>iWrapS</i>
	<dd>Sets the wrap parameter for texture coordinate <i>s</i> to either GL_CLAMP or 
		GL_REPEAT. GL_CLAMP causes <i>s</i> coordinates to be clamped to the range [0,1] 
		and is useful for preventing wrapping artifacts when mapping a single image onto 
		an object. GL_REPEAT causes the integer part of the <i>s</i> coordinate to be 
		ignored; OpenGL uses only the fractional part, thereby creating a repeating 
		pattern. Border texture elements are accessed only if wrapping is set to 
		GL_CLAMP. Initially, GL_TEXTURE_WRAP_S is set to GL_REPEAT.
	<dt><i>iWrapT</i>
	<dd>As <i>iWrapS</i> but now for texture coordinate <i>t</i>.
	<dt><i>iMinFilter</i>
	<dd>Sets the texture minifying function. Can be one of the following values:
		<p>
		<table BORDER="1" WIDTH="80%" cellpadding="4" cellspacing="1">
		<tr vAlign="top">
		<th BGCOLOR="#e8e8e8" align="left" width="48%">Value</th>
		<th BGCOLOR="#e8e8e8" align="left" width="52%">Meaning</th></tr>
		<tr vAlign="top">
			<td width="48%">GL_NEAREST </td>
			<td width="52%">Returns the value of the texture element that is nearest (in 
				Manhattan distance) to the center of the pixel being textured. 
			</td>
		</tr>
		<tr vAlign="top">
			<td width="48%">GL_LINEAR</td>
			<td width="52%">
				Returns the weighted average of the four texture elements that 
				are closest to the center of the pixel being textured. These can include border 
				texture elements, depending on the values of <i>iWrapS</i>, <i>iWrapT</i>,
				and on the exact mapping. GL_NEAREST is generally faster than 
				GL_LINEAR, but it can produce textured images with sharper edges because the 
				transition between texture elements is not as smooth. 
			</td>
		</tr>
		<tr vAlign="top">
			<td width="48%">GL_NEAREST_MIPMAP_NEAREST</td>
			<td width="52%">Chooses the mipmap that most closely matches the size of the 
				pixel being textured and uses the GL_NEAREST criterion (the texture element 
				nearest to the center of the pixel) to produce a texture value. 
			</td>
		</tr>
		<tr vAlign="top">
			<td width="48%">GL_LINEAR_MIPMAP_NEAREST</td>
			<td width="52%">Chooses the mipmap that most closely matches the size of the 
				pixel being textured and uses the GL_LINEAR criterion (a weighted average of the 
				four texture elements that are closest to the center of the pixel) to produce a 
				texture value. 
			</td>
		</tr>
		<tr vAlign="top">
			<td width="48%">GL_NEAREST_MIPMAP_LINEAR</td>
			<td width="52%">Chooses the two mipmaps that most closely match the size of the 
				pixel being textured and uses the GL_NEAREST criterion (the texture element 
				nearest to the center of the pixel) to produce a texture value from each mipmap. 
				The final texture value is a weighted average of those two values. 
			</td>
		</tr>
		<tr vAlign="top">
			<td width="48%">GL_LINEAR_MIPMAP_LINEAR</td>
			<td width="52%">Chooses the two mipmaps that most closely match the size of the 
				pixel being textured and uses the GL_LINEAR criterion (a weighted average of the 
				four texture elements that are closest to the center of the pixel) to produce a 
				texture value from each mipmap. The final texture value is a weighted average of 
				those two values.
			</td>
		</tr>
		</table>
		<p>
	<dt><i>iMagFilter</i>
	<dd>Sets the texture magnification function. The texture magnification function is used when the pixel being textured maps to 
		an area less than or equal to one texture element. It sets the texture 	magnification function to either GL_NEAREST or GL_LINEAR.
	<dt><i>iTexUploadHint</i>
	<dd>Specifies the upload hint which should be used when DemoGL uploads the texture data to OpenGL.
		This hint is ment for the situation when the user has selected 16bit textures ONLY. In this
		situation normally DemoGL selects GL_RGBA4 as texturehint for the upload process to OpenGL, so you'll get better
		alphachannel support. If this isn't necessary in a situation, because the texture doesn't use
		the alphavalues, you can specify an overruling hint for DemoGL to pass on to OpenGL in 16bit. A
		good hint for nonalpha textures is GL_RGB5_A1. In situations where the user has selected 32bit textures
		(recommended, since the driver will transform these to 16bit if necessary and will dither, which
		gives better results) this hint is ignored and GL_RGBA8 is used. If DemoGL should use the default
		hint for this texture whenever it has to, set iTexUploadHint to DGL_TEXHINT_USEDEFAULT.
	<dt><i>iDimensions</i>
	<dd>Specifies the amount of dimensions of the texture, needed for the upload process of the texture data to OpenGL.
		Can be one of the following values: DGL_TEXTUREDIMENSION_1D for 1D textures (only <i>iWidth</i> is used),
		DGL_TEXTUREDIMENSION_2D for	2D textures (only <i>iWidth</i> and <i>iHeight</i> are used) or DGL_TEXTUREDIMENSION_3D
		for 3D textures, which are currently not implemented in full in DemoGL.
	</dl>
<p>
<dt><b>Return values.</b>
<dd>If the function succeeds, it returns the TextureID, or <i>texture name</i>, usable with functions in OpenGL like glBindTexture.<br>
	If the function failes, 0 is returned.
	<p>
<dt><b>Remarks.</b>
<dd>Support for 3D textures is not fully implemented in DemoGL due to the lack of OpenGL 1.2 support in the Windows OpenGL implementation.
	When you load a texture with a filename the same as <i>pszIdentName</i> DemoGL will increase the reference counter to the texture already
	created. Textures created with <b>DEMOGL_TextureCreateFromFBRegion</b> can't be unuploaded because they can't be re-uploaded again later.
	The actual texture data is not stored in main memory but only copied from the framebuffer to the texture storage on the card using
	OpenGL. DemoGL itself doesn't hold a copy of the texturedata. You also can't get a pointer to this texture data when you call
	<a HREF="ref_functions_DEMOGL_TextureGetData.htm" target="main">DEMOGL_TextureGetData</a>.
<p>
<dt><b>Example.</b>
<dd><p>
<dt><b>Requirements.</b>
<dd>DemoGL v1.3 (build 0112 or higher)
	<p>
<dt><b>See also.</b>
<dd><a HREF="ref_functions_DEMOGL_TextureDelete.htm" target="main">DEMOGL_TextureDelete</a>,
	<a HREF="ref_functions_DEMOGL_TextureGetData.htm" target="main">DEMOGL_TextureGetData</a>,
	<a HREF="ref_functions_DEMOGL_TextureLoad.htm" target="main">DEMOGL_TextureLoad</a>,
	<a HREF="ref_functions_DEMOGL_TextureUnUpload.htm" target="main">DEMOGL_TextureUnUpload</a>,
	<a HREF="ref_functions_DEMOGL_TextureUpload.htm" target="main">DEMOGL_TextureUpload</a>
</dl>
<!-- footer -->
<center>
<hr>
<p class="SmallFontREF">
	Last changed on 01-jun-2001<br><br>
	©1999-2001 <a href="http://www.sd.nl" target="_blank">Solutions Design</a>
</center>
<br><br>
</body>
</html>
