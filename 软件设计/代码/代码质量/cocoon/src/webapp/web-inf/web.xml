<?xml version="1.0" encoding="ISO-8859-1"?>

<!--
  This is the web-app configurations that allow Cocoon to work under
  Apache Tomcat. Please, follow the installation section of the
  documentation for more information about installing Cocoon on Tomcat
-->

<!DOCTYPE web-app
    PUBLIC "-//Sun Microsystems, Inc.//DTD Web Application 2.2//EN"
    "http://java.sun.com/j2ee/dtds/web-app_2_2.dtd">

<web-app>
  <display-name>Cocoon2 Demo</display-name>
  <description>Demo application for Cocoon2</description>
  <servlet>
    <servlet-name>Cocoon2</servlet-name>
    <display-name>Cocoon2</display-name>
    <description>The main Cocoon2 servlet</description>

    <!--
      In cases you're facing class loader problems you can alternatively
      use the following servlet-class instead of the normal one

      <servlet-class>org.apache.cocoon.servlet.ParanoidCocoonServlet</servlet-class>

    -->
    <servlet-class>org.apache.cocoon.servlet.CocoonServlet</servlet-class>

    <!--
      This parameter points to the main configuration file for Cocoon.
      Note that the path is specified in absolute notation but it will be
      resolved relative to the servlets webapp context path
    -->
    <init-param>
      <param-name>configurations</param-name>
      <param-value>/cocoon.xconf</param-value>
    </init-param>

    <!--
      This parameter tells cocoon to load all the required libraries into
      it's own classloader instead of trusting the Servlet Vendor's
      classloader.  If you experience strange classloader issues,
      try setting this parameter to "true".
    -->
    <init-param>
      <param-name>init-classloader</param-name>
      <param-value>false</param-value>
    </init-param>

    <!--
      This parameter indicates the configuration file of the LogKit management
    -->
    <init-param>
      <param-name>logkit-config</param-name>
      <param-value>/WEB-INF/logkit.xconf</param-value>
    </init-param>

    <!--
      This parameter indicates the category id of the logger from the LogKit 
      configuration used by the CocoonServlet. 
    -->
    <init-param>
      <param-name>servlet-logger</param-name>
      <param-value>access</param-value>
    </init-param>

    <!--
      This parameter indicates the category id of the logger from the LogKit
      management configuration for the Cocoon engine.
      This logger is used for all components described in the cocoon.xconf 
      and sitemap.xmap file not having specified a logger with the 
      logger="..." attribute in the component configuration file.
    -->
    <init-param>
      <param-name>cocoon-logger</param-name>
      <param-value>core</param-value>
    </init-param>

    <!--
      This parameter indicates the log level to use throughout startup of the system.
      As soon as the logkit.xconf the setting of the logkit.xconf configuration is
      used instead! Only for startup and if the logkit.xconf is not readable/available
      this log level is of importance.
 
      Available levels are:
        DEBUG:        prints all level of log messages.
        INFO:         prints all level of log messages except DEBUG ones.
        WARN:         prints all level of log messages except DEBUG and INFO ones.
        ERROR:        prints all level of log messages except DEBUG, INFO and WARN ones.
        FATAL-ERROR: prints only log messages of this level
    -->
    <init-param>
      <param-name>log-level</param-name>
      <param-value>DEBUG</param-value>
    </init-param>

    <!-- 
      Allow reinstantiating (reloading) of the cocoon instance. If this is
      set to "yes" or "true", a new cocoon instance can be created using
      the request parameter "cocoon-reload".
    -->
    <init-param>
      <param-name>allow-reload</param-name>
      <param-value>yes</param-value>
    </init-param>
  
    <!-- 
      This parameter is used to list classes that should be loaded
      at initialization time of the servlet.
      Usually this classes are JDBC Drivers used
    -->
    <init-param>
      <param-name>load-class</param-name>
      <param-value>
        <!-- For IBM WebSphere: 
        com.ibm.servlet.classloader.Handler -->

        <!-- For Database Driver: -->
        @database-driver@
        
        <!-- For parent ComponentManager sample:
        org.apache.cocoon.samples.parentcm.Configurator
        -->
      </param-value>
    </init-param>
  
    <!-- 
      This parameter allows to specify where Cocoon should put files 
      which are uploaded by the upload.xsp sample. The path specified 
      is always relative to the context path of the servlet. 
      The default directory is "upload-dir" in the work-directory

    <init-param>
      <param-name>upload-directory</param-name>
      <param-value>/WEB-INF/work/upload-dir</param-value>
    </init-param>
    -->

    <!-- 
      This parameter allows to specify where Cocoon should put files 
      which are cached by the storing class. The path specified 
      is always relative to the context path of the servlet. 
      The default directory is "cache-dir" in the work-directory

    <init-param>
      <param-name>cache-directory</param-name>
      <param-value>/WEB-INF/work/cache-dir</param-value>
    </init-param>
    -->
  
    <!-- 
      This parameter allows to specify where Cocoon should put it's
      working files. The path specified is always relative to the 
      context path of the Cocoon servlet. 
      Usually it is obtained from the servlet engine.

    <init-param>
      <param-name>work-directory</param-name>
      <param-value>/WEB-INF/work</param-value>
    </init-param>
    -->

    <!--
      This parameter allows to specify additional directories or jars
      which Cocoon should put into it's own classpath.
      Note that you must separate them using the platforms path.separator
      (":" for *nix and ";" for Windows systems). Also note that absolute
      pathes are take as such but relative pathes are rooted at the context
      root of the Cocoon servlet.

    <init-param>
      <param-name>extra-classpath</param-name>
      <param-value>WEB-INF/extra-classes1:/[YOU-ABSOLUTE-PATH-TO]/own.jar</param-value>
    </init-param>
    -->

    <!--
      This parameter allows you to select the parent component manager.
      The class will be instantiated via the constructor that takes a single
      String as a parameter. That String will be equal to the text after the
      '/'.

      Cocoon honors the Loggable and Initializable interfaces for this class,
      if it implements them.
    
      If you uncomment the following lines the parent CM is set to the Parent CM sample, which will look up 
      a configuration via JNDI at org/apache/cocoon/samples/parentcm/ParentCMConfiguration
      and use it.
    <init-param>
      <param-name>parent-component-manager</param-name>
      <param-value>org.apache.cocoon.samples.parentcm.ParentComponentManager/org/apache/cocoon/samples/parentcm/ParentCMConfiguration</param-value>
    </init-param>
    -->

    <!-- 
      If you set this parameter to 'true' or 'yes', Cocoon will add processing
      time to the end of each response. Value 'hide' adds processing time as an HTML
      comment. By default, processing time is not added (corresponds to value 'no').

    <init-param>
      <param-name>show-time</param-name>
      <param-value>hide</param-value>
    </init-param>
    -->

    <!--
      This parameter allows you to startup Cocoon2 immediately after startup
      of your servlet engine.
    -->
    <load-on-startup>1</load-on-startup>
  </servlet>

  <!--
    Cocoon handles all the URL space assigned to the webapp using its sitemap.
    It is recommended to leave it unchanged. Under some circumstances though
    (like integration with proprietary webapps or servlets) you might have 
    to change this parameter.
  -->
  <servlet-mapping>
    <servlet-name>Cocoon2</servlet-name>
    <url-pattern>/</url-pattern>
  </servlet-mapping>
</web-app>
