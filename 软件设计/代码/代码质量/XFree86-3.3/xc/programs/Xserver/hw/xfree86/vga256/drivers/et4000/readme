
"I just thought it would be usefull if we had some kind of TODO and BUGS
files in the distribution as it would make it easier to see what is needed
to be done and what could be done better, instead of browsing through the
sourcecode. And we whould be able to se the progress literally by the ever
decreasing TODO file :-)"


## BUGS:

All Tseng cards:

* We definitely NEED to fix that color-expansion problem. See Appendix A
below for a detailed explanation.

* There are still some problems with the HW-cursor. The error message about
"wrong color selected" is disabled, and the limitation documented. Better
would be to have a way to dynamically switch to software-cursor mode if the
color can not be made. HW cursor doesn't work in DoubleScan modes yet (only
half of the cursor displayed)

* text font sometimes corrupted when going back to text mode. This may be
related to the order in which registers are restored: the ARK driver first
restores extended registers before restoring the standard registers for
excactly this reason.


ET6000:

* The trapezoid code is disabled because it doesn't comply with the way the
non-accelerated ("cfb") code does things. This needs to be fixed.


ET-4000(W32):

* The ET4000 can also do CPU-to-screen color expansion, and the code for
that is present in the current 3.2A code, albeit disabled. At this point,
this method sometimes causes a complete (hardware) system hang. This happens
when the ET4000 expects more data than it is getting. Probably a programming
error, either in the ET4000 code, or the XAA code. Someone needs to fix
this: it is much faster than scanline-screen-to-screen color expansion. And
it may also provide a useful workaround for the scanline color expansion
problems. It should work: it works in the XF86_W32 server... The problems
could have been due to a bug in XAA that also caused problems on other chips
when using non-TE fonts. Since this bug is now fixed, CPU-to-screen color
expansion may even work now.

* There is a fundamental limitation in the W32 chips regarding color
expansion: it _always_ expands colors from 1 to 8 bit. That means
"out-of-the-box" for 8bpp, but trouble in 16/24/32 bpp modes. Maybe XAA
needs to be extended to support chips that can only do 8bpp color expansion.
This seems to be a very large change, with benefit for only a few chips.
There is already support in XAA for doing acceleration in 24bpp using the
8bpp acceleration primitives, so maybe someone needs to add the same for
16bpp. Of course, this is useless unless we _have_ 16/24/32bpp first.
Another option is to expand the bitmap in the Tseng acceleration code
before rendering it. That's a lot easier to do.

* The W32i doesn't work accelerated in the current Tseng driver. At least
 not correct. WARNING: trying it may cause a complete system hang. Prepare.

* Hardware cursor support for the W32 is still lacking color support. We
need to reserve color cells #0 and #255 to make this work. From discussions
on the beta list, it seems the best solution is to allocate these cells
read-write, and then use them for the HW cursor. We MUST however document
that this will break some clients which depend on a fixed color in cell #0,
and some others that rely on the presence of 256 color cells. It will also
cause cursor color problems when someone uses a local color map.


## TODO:

All cards:

* The accelerator on the Tseng devices is capable of much more. Especially
the pattern support if not used most of the time: It can render a pattern in
just about every accelerated operation. This means patterned lines, bitblts,
screencopies, etc. are possible.


ET4000:

* support needs to be added for several clockchips and RAMDACs:
	- CH8398 clockchip support (doesn't support programmable clockchip yet)
	- 8-bit RAMDAC support for >8bpp modes: Sierra DACs and possibly others

* SuperProbe could use an update. It doesn't detect some of the RAMDACs that
are detected by the driver. It also doesn't have the enhanced ET6000 memory
detection code that is in the driver (the 2.25 MB problem).


ET-6000:

* someone might want to look at how the bitBLT engine of the ET6000 is
constructed, and come up with some fancy ways of abusing it. We're still
only using a small part of it (I'm thinking about the compare map and the
extensions to the MIX hardware compared to the ET4000).

* Apart from the things mentionned above, I think the ET6000 server is
pretty complete. SOme optimisations could possibly be added. Like for
example some assembler code for calculating a framebuffer address from X/Y
coordinates. That would help to speed up small blits.


=======================================================================
APPENDIX A: the color expansion problem
----------------------------------------

As suggested in the data book, we're doing font rendering using the
color-expansion (MIX map) capabilities of the Tseng accelerator.

We're using a ping-pong buffer scheme (triple buffering actually) in
off-screen memory to store one scanline worth of font data at a time. each
of these scanlines is "blitted" to on-screen memory using the accelerator.
The scanline is the MIX map, and there's also a 4x1 solid foreground color
(SRC map), and a 4x1 solid background color (PAT map). 

Basically, the flow is as follows:

	- setup accelerator for font-expansion
	
	- store scanline 1 in off-screen memory buffer 1
	
	- start operation
	
	- store scanline 2 in off-screen memory buffer 2
	
	- start operation
	
	- store scanline 3 in off-screen memory buffer 3
	
	- start operation
	
	- store scanline 4 in off-screen memory buffer 1
	
	- start operation
	
	... etc, until the whole line of text is drawn.
	
There is no explicit "waiting" for the accelerator to finish an operation
before starting a new one, because it has been set up to add "wait-states"
when the queue is full. We're aiming to use concurrency between the
accelerator and the storing of scanlines in the buffers. Anyway, waiting
after each operation doesn't help.

Now, in 99% of all cases, text is rendered OK. But in some cases, we're
seeing severe font corruption.

What we're seeing is this: sometimes, exactly 32 pixels of a scanline are
rendered with the scanline data that was there BEFORE, instead of the one
that was just written into the scanline buffer. In other words, 32 pixels of
line 2 (for example) are rendered at line 5. The rest of the scanline can be
OK (i.e. data from scanline 5 is actually written there).

Here's an attempt at showing you what _should_ have been rendered:

1
2   #####################################################################
3
4
5
6   #####################################################################
7
8
9
10  #####################################################################
11
12
13
14  #####################################################################
15



and what _is_ rendered sometimes (only an example):

1  
2   #####################################################################
3
4
5 
6   ########################                                #############
7
8
9
10  #####################################################################
11
12
13  ########################
14  #####################################################################
15  

At line 6, 32 pixels of the "black" scanline data from line 3 is rendered
instead of the actual full-white that would normally have to be there. At
line 13, the opposite happened (data from line 10 rendered at line 13). This
32-pixel width of the "bug" is independent of the color depth: we're seeing
this at 8bpp as well as at 16bpp, 24bpp and 32bpp. 32 pixels each time.

Remember, we're talking triple-buffering here, so the "wrongly" rendered
data is in fact the data that was in the scanline-buffer from the PREVIOUS
operation that used that buffer.

In fact, my best explanation is that sometimes, a whole DWORD (32 bits) of
data isn't in the video memory yet by the time the accelerator starts
rendering with it.

But the data _is_ being written to there by the driver software, because if
you restart the scanline-operation again, without writing any more data to
the scanline buffers (only the MIX address and the destination address are
reprogrammed to restart the scanline color expansion operation -- see code
in tseng_acl.c), data _is_ rendered correctly.



I have investigated this as far as I possibly can. I checked if the data was
actually written in video memory. It was. I checked all kinds of PCI-related
things, like write-gathering or write-reordering of the PCI chipset, etc. I
disabled all possible enhanced features, both on the PCI chipset, inside the
CPU, and on the ET6000.

What strikes me, is that the exact same problems are seen on ET4000W32p as
on the ET6000. This immediately rules out any special features that were
only added with the ET6000, like problems with the MDRAM cache buffers, etc.
It seems to be a generic problem to all Tseng accelerators.

The exact same higher-level code is being used for other chipsets as well
(i.e. the system of writing scanlines of data to off-screen memory and
making the accelerator expand it into on-screen memory), and there are no
problems on these other chipsets. The acceleration architecture we're using
is completely device-independent up to the point where each chip needs to
provide a

	SetupForScanlineScreenToScreenColorExpand()

and a

	SubsequentScanlineScreenToScreenColorExpand()
function.

Since the higher-level code is being used by other chip drivers as well, it
seems to be OK.

So the problem is either in those device-dependent functions, or in the
hardware itself.


I have found one kludge to work around this problem, and it should (?) tell
you a lot about the problem: if I start each scanline-colorexpand operation
TWICE, rendering is suddenly perfect (at least there are so little rendering
errors that I haven't seen any yet).


I am including the two device-depending functions so that you may be able to
follow what I'm saying here:



One entire line of text is drawn by calling the Setup() function ONCE. All
scanlines of text (16 of them in case of a 8x16 font) are drawn by filling
the off-screen scanline buffers and calling the Subsequent() function.






$XFree86: xc/programs/Xserver/hw/xfree86/vga256/drivers/et4000/README,v 1.1.2.2 1997/05/24 08:36:13 dawes Exp $
