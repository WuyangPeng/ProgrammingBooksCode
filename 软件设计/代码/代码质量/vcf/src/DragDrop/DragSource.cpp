/**
*Copyright (c) 2000-2001, Jim Crafton
*All rights reserved.
*Redistribution and use in source and binary forms, with or without
*modification, are permitted provided that the following conditions
*are met:
*	Redistributions of source code must retain the above copyright
*	notice, this list of conditions and the following disclaimer.
*
*	Redistributions in binary form must reproduce the above copyright
*	notice, this list of conditions and the following disclaimer in 
*	the documentation and/or other materials provided with the distribution.
*
*THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" 
*AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
*LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
*A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS
*OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
*EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
*PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
*PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
*LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
*NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS 
*SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*
*NB: This software will not save the world.
*/

/* Generated by Together */
#include "ApplicationKit.h"


using namespace VCF;


DragSource::DragSource()
{
	INIT_EVENT_HANDLER_LIST(SourceBegin)
	INIT_EVENT_HANDLER_LIST(SourceDropped)
	INIT_EVENT_HANDLER_LIST(SourceEnd)
	INIT_EVENT_HANDLER_LIST(SourceGiveFeedback)
	INIT_EVENT_HANDLER_LIST(SourceCanContinueDragOp)

	this->m_dragDropPeer =  UIToolkit::getDefaultUIToolkit()->createDragDropPeer();
	m_dragDropPeer->setDragSource( this );
	m_actionType = DRAG_ACTION_COPY;
}

DragSource::~DragSource()
{
	delete m_dragDropPeer;
}



void DragSource::startDragDrop( ClipboardDataObject* data )
{	
	if ( NULL != this->m_dragDropPeer ){
		DragEvent event( this, data );
	
		m_clipboardDataObject = data;
		this->copyDataToClipboard();

		fireOnSourceBegin( &event );

		m_dragDropPeer->startDragDrop( m_clipboardDataObject );
		//notify the end of the darg drop op
		fireOnSourceEnd( &event );
			
	}
}

void DragSource::copyDataToClipboard()
{
	//copy the data to the clipboard
	Clipboard* systemClipboard = UIToolkit::getDefaultUIToolkit()->getSystemClipboard();
	if ( NULL != systemClipboard ){
		systemClipboard->setContents( m_clipboardDataObject );			
	}
}

void DragSource::setActionType( const DragActionType& actionType )
{
	m_actionType = actionType;
}

DragActionType DragSource::getActionType()
{
	return this->m_actionType;
}
