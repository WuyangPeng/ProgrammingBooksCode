/**
*Copyright (c) 2000-2001, Jim Crafton
*All rights reserved.
*Redistribution and use in source and binary forms, with or without
*modification, are permitted provided that the following conditions
*are met:
*	Redistributions of source code must retain the above copyright
*	notice, this list of conditions and the following disclaimer.
*
*	Redistributions in binary form must reproduce the above copyright
*	notice, this list of conditions and the following disclaimer in 
*	the documentation and/or other materials provided with the distribution.
*
*THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" 
*AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
*LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
*A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS
*OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
*EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
*PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
*PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
*LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
*NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS 
*SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*
*NB: This software will not save the world.
*/

/* Generated by Together */

#include "ApplicationKit.h"
#include "TextControl.h"
#include "DefaultTextModel.h"

using namespace VCF;

TextControl::TextControl( const bool& multiLineControl )
{
	m_model = new DefaultTextModel();

	m_Peer =	UIToolkit::getDefaultUIToolkit()->createTextPeer( this, multiLineControl );
	m_textPeer = dynamic_cast<TextPeer*>(m_Peer );	

	setColor(  GraphicsToolkit::getDefaultGraphicsToolkit()->getSystemColor( SYSCOLOR_WINDOW ) );

	if ( NULL == this->m_textPeer ){
		throw InvalidPeer(MAKE_ERROR_MSG(NO_PEER), __LINE__);
	};
	this->init();
}

TextControl::~TextControl()
{
	if ( NULL != m_model ){
		delete m_model;
		m_model = NULL;
	}
}

void TextControl::init()
{
	
	this->setFocus( true );
	this->setEnabled( true );
}

void TextControl::setTextModel( TextModel * model )
{
	if ( NULL != m_model ){
		delete m_model;
		m_model = NULL;
	}
	this->m_model = model;
}

TextModel* TextControl::getTextModel()
{
	return this->m_model;
}

unsigned long TextControl::getCaretPosition()
{
	if ( NULL == this->m_textPeer ){
		throw InvalidPeer(MAKE_ERROR_MSG(NO_PEER), __LINE__);
	};	
	unsigned long result = 0;
	result = m_textPeer->getCaretPosition();
	return result;

}
