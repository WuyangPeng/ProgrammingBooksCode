/**
*Copyright (c) 2000-2001, Jim Crafton
*All rights reserved.
*Redistribution and use in source and binary forms, with or without
*modification, are permitted provided that the following conditions
*are met:
*	Redistributions of source code must retain the above copyright
*	notice, this list of conditions and the following disclaimer.
*
*	Redistributions in binary form must reproduce the above copyright
*	notice, this list of conditions and the following disclaimer in 
*	the documentation and/or other materials provided with the distribution.
*
*THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" 
*AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
*LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
*A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS
*OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
*EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
*PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
*PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
*LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
*NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS 
*SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*
*NB: This software will not save the world.
*/

/* Generated by Together */

#ifndef MEMORYSTREAM_H
#define MEMORYSTREAM_H


namespace VCF{


/**
*A MemoryStream a stream for in memory data for both reading 
*and writing 
*/
class FRAMEWORK_API MemoryStream : public VCF::InputStream, public VCF::OutputStream, public VCF::Object {	
public:
	MemoryStream();

	/**
	*This constructor is used in stream chaining.
	*The flow goes from the MemoryStream to the outStream.
	*So if a write is called on the MemoryStream, it simply
	*passes it to the outStream's write() method
	*/
	MemoryStream( OutputStream* outStream );

	/**
	*This constructor is used in stream chaining.
	*The flow goes from the MemoryStream to the inStream.
	*So if a read is called on the MemoryStream, it simply
	*passes it to the inStream's read() method
	*/
	MemoryStream( InputStream* inStream );

	virtual ~MemoryStream();

	virtual char* getBuffer(){ 
		return NULL;
	};

	virtual void seek(const unsigned long& offset, const SeekType& offsetFrom);

    virtual unsigned long getSize();

	virtual void write( Persistable* persistableObject );

	virtual void write( char* bytesToWrite, unsigned long sizeOfBytes );

	virtual void read( char* bytesToRead, unsigned long sizeOfBytes );	

	void init();
private:
	CharMemStream m_stream;
	OutputStream* m_outputStream;
	InputStream* m_inputStream;
	unsigned long m_size;
};

};

#endif //MEMORYSTREAM_H