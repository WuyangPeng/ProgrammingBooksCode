/**
*Copyright (c) 2000-2001, Jim Crafton
*All rights reserved.
*Redistribution and use in source and binary forms, with or without
*modification, are permitted provided that the following conditions
*are met:
*	Redistributions of source code must retain the above copyright
*	notice, this list of conditions and the following disclaimer.
*
*	Redistributions in binary form must reproduce the above copyright
*	notice, this list of conditions and the following disclaimer in 
*	the documentation and/or other materials provided with the distribution.
*
*THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" 
*AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
*LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
*A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS
*OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
*EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
*PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
*PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
*LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
*NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS 
*SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*
*NB: This software will not save the world.
*/

/* Generated by Together */




#ifndef CLIPBOARD_H
#define CLIPBOARD_H


namespace VCF{


class DataObject;
class ClipboardDataObject;
class ClipboardPeer;


class APPKIT_API Clipboard : public Object{
public:
	
	Clipboard();
	
	virtual ~Clipboard();

	EVENT_HANDLER_LIST(ClipboardContentsChanged)
	EVENT_HANDLER_LIST(ClipboardItemCopied)
	EVENT_HANDLER_LIST(ClipboardItemPasted)

	ADD_EVENT(ClipboardContentsChanged)
	ADD_EVENT(ClipboardItemCopied)
	ADD_EVENT(ClipboardItemPasted)

	REMOVE_EVENT(ClipboardContentsChanged)
	REMOVE_EVENT(ClipboardItemCopied)
	REMOVE_EVENT(ClipboardItemPasted)

	FIRE_EVENT(ClipboardContentsChanged,ClipboardEvent)
	FIRE_EVENT(ClipboardItemCopied,ClipboardEvent)
	FIRE_EVENT(ClipboardItemPasted,ClipboardEvent)
	

    bool hasDataType(const unsigned long & dataType);

    void setContents( ClipboardDataObject* dataObject );
	ClipboardDataObject* getContents();

    void deleteDataObject( ClipboardDataObject* dataObject );

    


private:
    ClipboardDataObject* m_dataObject;
	ClipboardPeer * m_clipboardPeer;
};

}
#endif //CLIPBOARD_H