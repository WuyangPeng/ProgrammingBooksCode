/**
*Copyright (c) 2000-2001, Jim Crafton
*All rights reserved.
*Redistribution and use in source and binary forms, with or without
*modification, are permitted provided that the following conditions
*are met:
*	Redistributions of source code must retain the above copyright
*	notice, this list of conditions and the following disclaimer.
*
*	Redistributions in binary form must reproduce the above copyright
*	notice, this list of conditions and the following disclaimer in 
*	the documentation and/or other materials provided with the distribution.
*
*THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" 
*AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
*LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
*A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS
*OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
*EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
*PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
*PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
*LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
*NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS 
*SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*
*NB: This software will not save the world.
*/

/* Generated by Together */


#ifndef CLIPBOARDDATAOBJECT_H
#define CLIPBOARDDATAOBJECT_H


namespace VCF{

class DataObjectPeer;

class DataType;


/**
*represents a data object in the clipboard
*Can be streamed out to a stream
*/
class APPKIT_API ClipboardDataObject : public Object, public Persistable{

public:    
	ClipboardDataObject( const char* dataToInitWith, const unsigned long& dataSize, const unsigned long& dataType );

	virtual ~ClipboardDataObject();	
	
	void init();

	void addSupportedDataType( const unsigned long & dataType );

	bool isTypeSupported( const unsigned long & dataType );

	virtual void saveToStream( OutputStream * stream );

    virtual void loadFromStream( InputStream * stream );	
	
	Enumerator<DataType*> * getSupportedDataTypes();

private:
    /**
     * @supplierCardinality 1* 
     */
	std::vector<DataType*> m_types;
	EnumeratorContainer<std::vector<DataType*>, DataType* > m_typesContainer;
	
	char* m_rawData;	
	unsigned long m_dataSize;
};

};
#endif //CLIPBOARDDATAOBJECT_H