/**
*Copyright (c) 2000-2001, Jim Crafton
*All rights reserved.
*Redistribution and use in source and binary forms, with or without
*modification, are permitted provided that the following conditions
*are met:
*	Redistributions of source code must retain the above copyright
*	notice, this list of conditions and the following disclaimer.
*
*	Redistributions in binary form must reproduce the above copyright
*	notice, this list of conditions and the following disclaimer in 
*	the documentation and/or other materials provided with the distribution.
*
*THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" 
*AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
*LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
*A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS
*OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
*EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
*PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
*PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
*LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
*NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS 
*SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*
*NB: This software will not save the world.
*/

/* Generated by Together */


#ifndef UITOOLKIT_H
#define UITOOLKIT_H                         




enum ComponentType{
        CT_DEFAULT=0,
        CT_LIGHTWEIGHT,
        CT_HEAVYWEIGHT
};

namespace VCF{

#define STANDARD_CATEGORY		"Standard"
#define ADDITIONAL_CATEGORY		"Additional"
#define SYSTEM_CATEGORY			"System"
#define DIALOG_CATEGORY			"Dialogs"
#define NETWORKING_CATEGORY		"Networking"

class ListviewPeer;
class ComboBoxPeer;
class TextPeer;
class RichTextPeer;
class ControlPeer;
class TreePeer;
class ButtonPeer;
class ScrollbarPeer;
class TabbedPagesPeer;
class HeaderPeer;
class DialogPeer;
class WindowPeer;
class ToolbarPeer;
class ClipboardPeer;
class DragDropPeer;
class DataObjectPeer;
class DropTargetPeer;
class Component;
class ContextPeer;
class ApplicationPeer;
class TextControl;
class TreeControl;
class ListViewControl;
class Dialog;
class MenuItem;
class MenuItemPeer;
class MenuBar;
class MenuBarPeer;
class ComboBoxControl;
class CommandButton;
class CommonFileDialogPeer;
class CommonColorDialogPeer;
class Color;
class Clipboard;
class GraphicsToolkit;
class PopupMenuPeer;
class PopupMenu;
class Frame;
class Control;
class CommonFolderBrowseDialogPeer;
class CommonFontDialogPeer;

class DesktopPeer;
class Desktop;

class ComponentInfo;

class ScrollPeer;

class HTMLBrowserPeer;

class APPKIT_API UIToolkit : public Object {
public:

    UIToolkit();

	virtual ~UIToolkit();

	void init();
	/**
	*Initializes the toolkit. the default toolkit is created and any other initialization
	*functions called
	*/
	static void initToolKit();
	
	/**
	*cleans up the toolkit instance and deletes it
	*/
	static void closeToolkit();
	/**
	*creates a new instance of a ControlPeer
	*the component passed in represents the component the implmenter will get attached to.
	*/
    virtual ControlPeer* createControlPeer( Control* component, ComponentType componentType=CT_DEFAULT);

	virtual ContextPeer* createContextPeer( Control* component );
	
	virtual ContextPeer* createContextPeer( const long& contextID );

	virtual ContextPeer* createContextPeer( const unsigned long& width, const unsigned long& height );

    virtual ListviewPeer* createListViewPeer( ListViewControl* component, ComponentType componentType=CT_DEFAULT);

    virtual TreePeer* createTreePeer( TreeControl* component, ComponentType componentType=CT_DEFAULT);    

    virtual ComboBoxPeer* createComboBoxPeer( ComboBoxControl* component, ComponentType componentType=CT_DEFAULT);

    virtual TextPeer* createTextPeer( TextControl* component, const bool& isMultiLineControl, ComponentType componentType=CT_DEFAULT);

    virtual RichTextPeer* createRTFPeer( ComponentType componentType=CT_DEFAULT);

    virtual ScrollbarPeer* createScrollbarPeer( ComponentType componentType=CT_DEFAULT);

    virtual ButtonPeer* createButtonPeer( CommandButton* component, ComponentType componentType=CT_DEFAULT);
	
    virtual HeaderPeer* createHeaderPeer( ComponentType componentType=CT_DEFAULT);

    virtual TabbedPagesPeer* createTabsheetsPeer( ComponentType componentType=CT_DEFAULT);

    virtual DialogPeer* createDialogPeer( Frame* owner, Dialog* component, ComponentType componentType=CT_DEFAULT);

	virtual DialogPeer* createDialogPeer();    

    virtual WindowPeer* createWindowPeer( Control* component, ComponentType componentType=CT_DEFAULT);
    
	virtual MenuItemPeer* createMenuItemPeer( MenuItem* item );

	virtual MenuBarPeer* createMenuBarPeer( MenuBar* menuBar );

	virtual PopupMenuPeer* createPopupMenuPeer( PopupMenu* popupMenu );

    virtual ClipboardPeer* createClipboardPeer();

    virtual DragDropPeer* createDragDropPeer(); 

	virtual DataObjectPeer* createDataObjectPeer();

	virtual DropTargetPeer* createDropTargetPeer();

	virtual ApplicationPeer* createApplicationPeer();

	virtual Clipboard* getSystemClipboard();				
	
	virtual CommonFileDialogPeer* createCommonFileOpenDialogPeer( Control* owner );

	virtual CommonFolderBrowseDialogPeer* createCommonFolderBrowseDialogPeer( Control* owner );

	virtual CommonFileDialogPeer* createCommonFileSaveDialogPeer( Control* owner );

	virtual CommonColorDialogPeer* createCommonColorDialogPeer( Control* owner );

	virtual CommonFontDialogPeer* createCommonFontDialogPeer( Control* owner );

	virtual DesktopPeer* createDesktopPeer( Desktop* desktop );

	virtual ScrollPeer* createScrollPeer( Control* control );

	virtual CursorPeer* createCursorPeer( Cursor* cursor );

	void registerComponentInfo( const String& componentUUID, ComponentInfo* info );
	
	void removeComponentInfo( ComponentInfo* info );

	ComponentInfo* getComponentInfo( const String& componentUUID );
	
	ComponentInfo* getComponentInfo( Class* componentClass );

	static UIToolkit* getDefaultUIToolkit() throw(NoToolKitFoundException);

protected:	
	std::map<String,ComponentInfo*> m_componentInfoMap;

private:    
	static UIToolkit* toolKitInstance;

	Clipboard* m_systemClipboard;
	
    GraphicsToolkit * m_graphicsToolKit;	
};

};
#endif //UITOOLKIT_H
