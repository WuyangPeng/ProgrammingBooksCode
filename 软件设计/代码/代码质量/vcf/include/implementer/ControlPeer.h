/* Generated by Together */

#ifndef CONTROL_PEER_H
#define CONTROL_PEER_H


namespace VCF{

class Control;

class Font;

class Rect;

class Cursor;

/** The base Peer interface. 
 *   In the Visual Control Framework Peers are the equivalent of Peers in Java. 
 *   Peers can be either light weight or heavyweight. 
 *  Heavyweight Peers are based on native widgets are consume a certain amount of resources.
 *   On Win32 heavweight Peers have their own window handle and graphics context.
 * 
 * Lightweight Peers use the window handle and graphics context of the parents. 
 * Frame Peers, such as WindowPeer and DialogPeer MUST be based on heavyweight controls.
 * @interface */

class APPKIT_API ControlPeer {
public:

	virtual ~ControlPeer(){};
    /**
     * returns a ID that identifies this control. On Win32 this corresponds to an HWND. 
     */
    virtual long getHandleID() = 0;

    /**
     * returns a text associated with the component. This usually gets used in the Control::getCaption() method. 
     */
    virtual String getText() = 0;

    /**
     * sets the text for the widget 
     */
    virtual void setText( const String& text ) = 0;

    /**
     * sets the bounds for the component. Bounds are specified in the coordinate system of the componenents parent. 
     */
    virtual void setBounds( Rect* rect ) = 0;

    /**
     * returns the bounds of the component in the coordinate system of the parent. 
     */
    virtual Rect* getBounds() = 0;

    /**
     * shows or hides the component. 
     * This does NOT close the component (if invoked on a frame based component ). 
     */
    virtual void setVisible( const bool& visible ) = 0;

    /**
     * returns wether or not the component is currently visible. 
     */
    virtual bool getVisible() = 0;

    /**
     * returns a bit-masked unsigned long that contains style constants. 
     *  These style constants are defined in the VCF, and must 
     * be translated to the particular windowing system being used. 
     */
    virtual unsigned long getStyleMask() = 0;

    /**
     * sets the current style mask.
     *  Should cause a repaint of the component, if neccessary. 
     */
    virtual void setStyleMask( const unsigned long& styleMask ) = 0;

    /**
     * returns the component that this Peer is attached to. 
     */
    virtual Control* getControl() = 0;

    /**
     * attahces the Peer to a particular component. This should only be done once. 
     */
    virtual void setControl( Control* component ) = 0;    

    virtual void setCursor( Cursor* cursor ) = 0;    
	
	virtual void setParent( Control* parent ) = 0;

	virtual Control* getParent() = 0;

	virtual bool isFocused() = 0;

	virtual void setFocus( const bool& focused ) = 0;

	virtual bool isEnabled() = 0;

	virtual void setEnabled( const bool& enabled ) = 0;

	virtual void setFont( Font* font ) = 0;

	virtual void repaint( Rect* repaintRect=NULL ) = 0;

	/**
	*this keeps the mouse events being sent to this control, even is the 
	*mouse leaves the physical bounds of the control
	*/
	virtual void keepMouseEvents() = 0;

	/**
	*releases mouse events - goes back to normal event handling
	*/
	virtual void releaseMouseEvents() = 0;
};


};
#endif //CONTROL_PEER_H