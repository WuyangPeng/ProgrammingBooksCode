/**
*Copyright (c) 2000-2001, Jim Crafton
*All rights reserved.
*Redistribution and use in source and binary forms, with or without
*modification, are permitted provided that the following conditions
*are met:
*	Redistributions of source code must retain the above copyright
*	notice, this list of conditions and the following disclaimer.
*
*	Redistributions in binary form must reproduce the above copyright
*	notice, this list of conditions and the following disclaimer in 
*	the documentation and/or other materials provided with the distribution.
*
*THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" 
*AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
*LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
*A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS
*OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
*EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
*PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
*PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
*LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
*NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS 
*SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*
*NB: This software will not save the world.
*/

/* Generated by Together */

#ifndef COLOR_H
#define COLOR_H


namespace VCF{

/**
*standard system color defines
*/
#define		SYSCOLOR_SHADOW					0
#define		SYSCOLOR_FACE					1
#define		SYSCOLOR_HIGHLIGHT				2
#define		SYSCOLOR_ACTIVE_CAPTION			3
#define		SYSCOLOR_ACTIVE_BORDER			4
#define		SYSCOLOR_DESKTOP				5
#define		SYSCOLOR_CAPTION_TEXT			6
#define		SYSCOLOR_SELECTION				7
#define		SYSCOLOR_SELECTION_TEXT			8
#define		SYSCOLOR_INACTIVE_BORDER		9
#define		SYSCOLOR_INACTIVE_CAPTION		10
#define		SYSCOLOR_TOOLTIP				11
#define		SYSCOLOR_TOOLTIP_TEXT			12
#define		SYSCOLOR_MENU					13
#define		SYSCOLOR_MENU_TEXT				14
#define		SYSCOLOR_WINDOW					15
#define		SYSCOLOR_WINDOW_TEXT			16
#define		SYSCOLOR_WINDOW_FRAME			17


#define		WHITE							"white"
#define		BLACK							"black"
#define		GREY							"grey"
#define		YELLOW							"yellow"
#define		GREEN							"green"
#define		BLUE							"blue"
#define		RED								"red"
#define		PURPLE							"purple"
#define		LT_BLUE							"lt_blue"


#define COLOR_CLASSID	"AA34A97B-8294-4697-857D-398FB355EB2D"			

class GRAPHICSKIT_API Color : public VCF::Object {

public:

	BEGIN_CLASSINFO(Color, "VCF::Color", "VCF::Object", COLOR_CLASSID)	
	PROPERTY( double, "red", Color::getRed, Color::setRed, PROP_DOUBLE )
	PROPERTY( double, "green", Color::getGreen, Color::setGreen, PROP_DOUBLE )
	PROPERTY( double, "blue", Color::getBlue, Color::setBlue, PROP_DOUBLE )
	END_CLASSINFO(Color)

	Color();
	Color( const Color& color );
    Color(const float & r, const float & g, const float & b);
    Color(const double & h, const double & s, const double & v);
    Color(const double & c, const double & m, const double & y, const double & k);
    Color(const unsigned char & r, const unsigned char & g, const unsigned char & b);
    Color(const unsigned long & color);
	
	virtual ~Color(){};

    void getHSV(double & h, double & s, double & v);
    void getHLS(double & h, double & l, double & s);
    void getCMYK(double & c, double & m, double & y, double & k);
    void getRGB(unsigned char & r, unsigned char & g, unsigned char & b);
    void getRGB(double & r, double & g, double & b);
    unsigned long getRGB();    
    void getLab();
    void getYUV();

    void setHSV( const double & h, const double & s, const double & v);
    void setHLS( const double & h, const double & l, const double & s);
    void setCMYK( const double & c, const double & m, const double & y, const double & k);
    void setRGB( const unsigned char & r, const unsigned char & g, const unsigned char & b);
    void setRGB( const double & r, const double & g, const double & b);
    void setRGB( const unsigned long& rgb );
    void setLab();
    void setYUV();

    void brighter();

    void darker();

	double getRed();

	double getGreen();

	double getBlue();

	void setRed( const double& red );

	void setGreen( const double& green );

	void setBlue( const double& blue );

	virtual void copy( Object* source );

	operator=( const Color& newValue ){
		copy( (Object*)&newValue );
	};

	virtual bool isEqual( Object* object ){
		bool result = false;
		if ( NULL != object ){
			Color* color = dynamic_cast<Color*>(object);
			if ( NULL != color ){
				result = (color->m_b == m_b) && (color->m_g == m_g) && (color->m_r == m_r);
			}
		}
		return result;
	};

	virtual String toString(){
		char tmp[256];
		memset( tmp, 0, 256 );
		sprintf( tmp, "#%02X%02X%02X", (int)(m_r*255.0), (int)(m_g*255.0), (int)(m_b*255.0) );
		return String(tmp);
	};

	static Color* getColor( const String& colorName );

	static void createColorMap();

private:
	double m_r;
	double m_g;
	double m_b;
	
};



};

#endif //COLOR_H