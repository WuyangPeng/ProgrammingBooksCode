/**
*Copyright (c) 2000-2001, Jim Crafton
*All rights reserved.
*Redistribution and use in source and binary forms, with or without
*modification, are permitted provided that the following conditions
*are met:
*	Redistributions of source code must retain the above copyright
*	notice, this list of conditions and the following disclaimer.
*
*	Redistributions in binary form must reproduce the above copyright
*	notice, this list of conditions and the following disclaimer in 
*	the documentation and/or other materials provided with the distribution.
*
*THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" 
*AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
*LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
*A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS
*OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
*EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
*PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
*PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
*LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
*NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS 
*SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*
*NB: This software will not save the world.
*/

/* Generated by Together */


#ifndef PATH_H
#define PATH_H



namespace VCF{


class Matrix2D;

class GRAPHICSKIT_API Path : public Interface{
public:   
	virtual ~Path(){};

    virtual bool contains(Rect * rect) = 0;

    virtual bool contains(Point * pt) = 0;

    virtual bool intersects(Point* pt) = 0;

    virtual bool intersects(Rect* rect) = 0;

    virtual Rect* getBounds() = 0;

    virtual PathEnumerator* getPathEnumerator( Matrix2D* transform ) = 0;

};


/**
*utility to make working with path points easier
*/
class GRAPHICSKIT_API PathPoint {
public:
	PathPoint();

	PathPoint( double x, double y, PathEnumerator::SegmentType type ){
		m_type = type;
		m_point.m_x = x;
		m_point.m_y = y;
	}

	PathPoint( Point* pt, PathEnumerator::SegmentType type ){
		m_type = type;
		m_point.m_x = pt->m_x;
		m_point.m_y = pt->m_y;
	}

	PathPoint( const Point& pt, PathEnumerator::SegmentType type ){
		m_type = type;
		m_point.m_x = pt.m_x;
		m_point.m_y = pt.m_y;
	}

	PathPoint( const PathPoint& pt ){
		m_point.m_x = pt.m_point.m_x;
		m_point.m_y = pt.m_point.m_y;
		m_type = pt.m_type;
	};

	virtual ~PathPoint(){};

	operator=( const PathPoint& pt ){
		m_point.m_x = pt.m_point.m_x;
		m_point.m_y = pt.m_point.m_y;
		m_type = pt.m_type;
	};

	bool operator==( const PathPoint& pt )const {
		return (m_point == pt.m_point) &&
			   (m_type == pt.m_type);
	};

	Point m_point;
	PathEnumerator::SegmentType m_type;
};


};
#endif //PATH_H