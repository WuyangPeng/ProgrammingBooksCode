/**
*Copyright (c) 2000-2001, Jim Crafton
*All rights reserved.
*Redistribution and use in source and binary forms, with or without
*modification, are permitted provided that the following conditions
*are met:
*	Redistributions of source code must retain the above copyright
*	notice, this list of conditions and the following disclaimer.
*
*	Redistributions in binary form must reproduce the above copyright
*	notice, this list of conditions and the following disclaimer in 
*	the documentation and/or other materials provided with the distribution.
*
*THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" 
*AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
*LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
*A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS
*OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
*EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
*PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
*PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
*LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
*NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS 
*SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*
*NB: This software will not save the world.
*/

/* Generated by Together */

#ifndef POLYGON_H
#define POLYGON_H


namespace VCF{


class GRAPHICSKIT_API Polygon : public VCF::Object, public VCF::Path{
public:
	Polygon();
	
	virtual ~Polygon();
	
	virtual bool contains(Rect * rect);

    virtual bool contains(Point * pt);

    virtual bool intersects(Point* pt);

    virtual bool intersects(Rect* rect);

    virtual Rect* getBounds();

    virtual PathEnumerator* getPathEnumerator( Matrix2D* transform );

	void lineTo( const double& x, const double& y );

	void moveTo( const double& x, const double& y );
	
	void close();

	void clear();
protected:	
	class GRAPHICSKIT_API PolyPathEnumerator : public Object, public PathEnumerator {
	public:
		PolyPathEnumerator( Polygon* source, Matrix2D* matrix );
		
		virtual ~PolyPathEnumerator();
		
		virtual WindingType getWindingRule();

		bool hasMoreSegments();

		void next();
		
		virtual ulong32 getPointCount();
		
		virtual SegmentType getSegment( Point* points );

		virtual Enumerator<Point*>* flattenPoints();		

		virtual Rect* getBounds();
	private:
		Polygon* m_source;
		std::vector<PathPoint*> m_transformedPoints;
		std::vector<PathPoint*>::iterator m_pathIterator;	
		Rect m_bounds;
	};

	friend class GRAPHICSKIT_API PolyPathEnumerator;
	Rect m_bounds;
	ulong32 m_currentMoveToIndex;
	std::vector<PathPoint*> m_points;	
	Polygon::PolyPathEnumerator* m_pathEnumerator;
};

};
#endif //POLYGON_H