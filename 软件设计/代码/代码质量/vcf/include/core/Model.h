/**
*Copyright (c) 2000-2001, Jim Crafton
*All rights reserved.
*Redistribution and use in source and binary forms, with or without
*modification, are permitted provided that the following conditions
*are met:
*	Redistributions of source code must retain the above copyright
*	notice, this list of conditions and the following disclaimer.
*
*	Redistributions in binary form must reproduce the above copyright
*	notice, this list of conditions and the following disclaimer in 
*	the documentation and/or other materials provided with the distribution.
*
*THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" 
*AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
*LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
*A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS
*OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
*EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
*PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
*PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
*LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
*NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS 
*SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*
*NB: This software will not save the world.
*/

/* Generated by Together */

#ifndef MODEL_H
#define MODEL_H



namespace VCF{

class ModelValidationListener;

class ModelListener;

class View;

#define MODEL_CLASSID		"ED88C0AD-26AB-11d4-B539-00C04F0196DA"

/** @interface */
class APPKIT_API Model : public ObjectWithEvents {
public:    

	BEGIN_ABSTRACT_CLASSINFO(Model, "VCF::Model", "VCF::Object", MODEL_CLASSID)
	EVENT( "VCF::ModelEventHandler", "VCF::ModelEvent", "ModelEmptied" )
	EVENT( "VCF::ModelValidationEventHandler", "VCF::ValidationEvent", "ModelValidate" )
	END_CLASSINFO(Model)

	Model(){
		
	};

	virtual ~Model();
    /**
     * Adds a validation listener to the model 
     */
    virtual void addModelValidationHandler( EventHandler* handler ) = 0;

    /**
     * removes a validation listener from the model 
     */
    virtual void removeModelValidationHandler( EventHandler* handler ) = 0;	   

    /**
     * validate the model. 
     * The implementation for this can vary widely, or even be nonexistant for model's that do not require validation.
     * The basic idea is to call all the listeners in the list , passing in a local variable to the
     * onModelValidate() methods of the listener's. The variable is initialized to true, and if it is
     * still true at the end of the listener iterations, then it is safe to apply the changes to the
     * model, other wise the changes are removed. 
     */
    virtual void validate() = 0;

    /**
     * Adds a model listener to the model 
     */
    virtual void addModelHandler( EventHandler* handler ) = 0;

    /**
     * removes a model listener from the model 
     */
    virtual void removeModelHandler( EventHandler* handler ) = 0;	 

	/**
     * clears out the model's data 
     */
    virtual void empty() = 0;

	/**
	*adds a new view to the model
	*/
	virtual void addView( View* view );

	/**
	*removes a view from the model
	*/
	virtual void removeView( View* view );

	/**
	*notifies all the views the model has changed
	*calls View::updateView( ), passing itself
	*in as the updated Model
	*/
	virtual void updateAllViews();

protected:
	std::vector<View*> m_views;
};

};
#endif //MODEL_H