/**
*Copyright (c) 2000-2001, Jim Crafton
*All rights reserved.
*Redistribution and use in source and binary forms, with or without
*modification, are permitted provided that the following conditions
*are met:
*	Redistributions of source code must retain the above copyright
*	notice, this list of conditions and the following disclaimer.
*
*	Redistributions in binary form must reproduce the above copyright
*	notice, this list of conditions and the following disclaimer in 
*	the documentation and/or other materials provided with the distribution.
*
*THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" 
*AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
*LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
*A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS
*OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
*EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
*PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
*PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
*LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
*NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS 
*SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*
*NB: This software will not save the world.
*/

/* Generated by Together */


#ifndef TOOLBARBUTTON_H
#define TOOLBARBUTTON_H



namespace VCF{


enum ButtonCaptionAlignment{
	BCA_RIGHT=0,
	BCA_TOP,
	BCA_LEFT,
	BCA_BOTTOM
};


static String ButtonCaptionAlignmentNames [] = { "BCA_RIGHT",
											"BCA_TOP",
											"BCA_LEFT",
											"BCA_BOTTOM" };

class ImageList;


#define IMAGE_CAPTION_BUFFER		3

#define TOOLBARBUTTON_CLASSID		"9129288B-AA3F-4196-A00F-029D233119D3"


/**
 * ToolbarButton is a non windowed control that represents a button (or possibly a seperator) on a toolbar control 
 */
class APPKIT_API ToolbarButton :  public CustomControl, public Button  {
public:

	BEGIN_CLASSINFO(ToolbarButton, "VCF::ToolbarButton", "VCF::CustomControl", TOOLBARBUTTON_CLASSID )
	PROPERTY( bool, "stateToggle", ToolbarButton::getStateToggle, ToolbarButton::setStateToggle, PROP_BOOL );	
	PROPERTY( bool, "pressed", ToolbarButton::isPressed, ToolbarButton::setIsPressed, PROP_BOOL );	
	PROPERTY( String, "caption", ToolbarButton::getCaption, ToolbarButton::setCaption, PROP_STRING );
	PROPERTY( double, "preferredHeight", ToolbarButton::getPreferredHeight, ToolbarButton::setPreferredHeight, PROP_DOUBLE );	
	PROPERTY( double, "preferredWidth", ToolbarButton::getPreferredWidth, ToolbarButton::setPreferredWidth, PROP_DOUBLE );	
	PROPERTY( long, "groupID", ToolbarButton::getGroupID, ToolbarButton::setGroupID, PROP_LONG );	
	PROPERTY( long, "imageIndex", ToolbarButton::getBtnImageIndex, ToolbarButton::setBtnImageIndex, PROP_LONG );	
	PROPERTY( bool, "showsCaption", ToolbarButton::isShowingCaption, ToolbarButton::setShowCaption, PROP_BOOL );	
	PROPERTY( bool, "autoSizeCaption", ToolbarButton::getAutoSizeCaption, ToolbarButton::setAutoSizeCaption, PROP_BOOL );	
	OBJECT_PROPERTY( ImageList, "imageList", ToolbarButton::getImageList, ToolbarButton::setImageList );	
	LABELED_ENUM_PROPERTY( ButtonCaptionAlignment, "captionAlignment", ToolbarButton::getCaptionAlignment, ToolbarButton::setCaptionAlignment, 
						   BCA_RIGHT, BCA_BOTTOM, 4, ButtonCaptionAlignmentNames);	

	EVENT( "VCF::ButtonEventHandler", "VCF::ButtonEvent", "ButtonClicked" )
	END_CLASSINFO(ToolbarButton)


	ToolbarButton();

	virtual ~ToolbarButton();

	void init();

	EVENT_HANDLER_LIST(ButtonClicked);

	/**
	*This macro creates a method for adding a listener to the CommandButton's events
	*/
	virtual void addButtonClickHandler( EventHandler* handler ) {
		ADD_EVENT_IMPL(ButtonClicked)
	}

	/**
	*This macro creates a method for removing a listener to the CommandButton's events
	*/
	virtual void removeButtonClickHandler( EventHandler* handler ) {
		REMOVE_EVENT_IMPL(ButtonClicked)
	}

	FIRE_EVENT(ButtonClicked,ButtonEvent);
	
    virtual void paint(GraphicsContext * context);

    virtual void click();

    virtual void setCaption( const std::string& caption );

    virtual String getCaption();

	virtual double getPreferredHeight();
	
	virtual void setPreferredHeight( const double& preferredHeight );

	virtual double getPreferredWidth();
	
	virtual void setPreferredWidth( const double& preferredWidth );

	void setIsHighlighted( const bool& highlighted );	

	bool isHighlighted() {
		return m_isHighlighted;
	}

	virtual void setBounds( Rect* rect, const bool& anchorDeltasNeedUpdating=true );

	virtual void mouseDown( MouseEvent* event );

	virtual void mouseMove( MouseEvent* event );

	virtual void mouseUp( MouseEvent* event );

	virtual void mouseClick(  MouseEvent* event );

	void setGroupID( const long& groupID );

	long getGroupID(){
		return m_groupID;
	}

	void setStateToggle( const bool& stateToggle );

	bool getStateToggle(){
		return m_stateToggle;
	}

	bool isShowingCaption(){
		return m_showCaption;
	}

	void setShowCaption( const bool& showCaption );

	long getBtnImageIndex() {
		return m_BtnImageIndex;
	}
	
	void setBtnImageIndex( const long& btnImageIndex );

	ImageList* getImageList() {
		return m_imageList;
	}

	void setImageList( ImageList* imageList );

	ButtonCaptionAlignment getCaptionAlignment() {
		return m_captionAlignment;
	}

	void setCaptionAlignment( const ButtonCaptionAlignment& captionAlignment );

	bool getAutoSizeCaption() {
		return m_autoSizeForCaption;
	}

	void setAutoSizeCaption( const bool& autoSizeForCaption );

	void* getUserData() {
		return m_userData;
	}

	void setUserData( void* userData ) {
		m_userData = userData;
	}

	bool isPressed() {
		return m_isPressed;
	}

	void setIsPressed( const bool& isPressed );
private:    
	
	static ToolbarButton* highlightedToolbarButton;

    std::string m_caption;
	double m_preferredHeight;
	double m_preferredWidth;
	bool m_isHighlighted;
	Rect m_innerRect;
	bool m_isPressed;
	long m_groupID;
	bool m_stateToggle;
	bool m_showCaption;
	long m_BtnImageIndex;	
	ImageList* m_imageList;
	bool m_autoSizeForCaption;
	ButtonCaptionAlignment m_captionAlignment;
	void* m_userData;
	void parentResize();
};

};
#endif //TOOLBARBUTTON_H