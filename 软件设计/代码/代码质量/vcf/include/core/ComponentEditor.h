//ComponentEditor.h

/**
Copyright (c) 2000-2001, Jim Crafton
All rights reserved.
Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions
are met:
	Redistributions of source code must retain the above copyright
	notice, this list of conditions and the following disclaimer.

	Redistributions in binary form must reproduce the above copyright
	notice, this list of conditions and the following disclaimer in 
	the documentation and/or other materials provided with the distribution.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" 
AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS
OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS 
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

NB: This software will not save the world. 
*/

#ifndef _COMPONENTEDITOR_H__
#define _COMPONENTEDITOR_H__



namespace VCF  {

class Command;
class Component;
class Control;

/**
*A ComponentEditor is an interface used to edit 
*an entire component at once, as opposed to a PropertyEditor
*which only edits a single property of a specific component or 
*object.
*/
class APPKIT_API ComponentEditor : public Interface  { 
public:
	virtual ~ComponentEditor(){};

	/**
	*this is called only once, immediately after the component has been 
	*created, after the caller has made the setComponent() call
	*on the editor
	*/
	virtual void intialize() = 0;

	/**
	*retreives a new command instance associated with this index
	*@param ulong32 index of the command to retrieve
	*@return Command* returns a <b><i>NEW</i></b> instance of the Command object to
	*be associated with the given index. <b>Note:</b>It is the <b>callers</b> responsibility
	*to clean up memory and the caller owns the command after this call.
	*/
	virtual Command* getCommand( const ulong32& index ) = 0;

	/**
	*Gets the number of unique commands associated with this
	*component editor
	*@return ulong32 the number of commands for the editor
	*/
	virtual ulong32 getCommandCount() = 0;

	/**
	*returns the editors default command index. This is 
	*the command that will be executed when the component is 
	*double clicked on.
	*/
	virtual ulong32 getDefaultCommandIndex() = 0;

	/**	
	*@return Component the component this Editor is currently attached
	*to.
	*/
	virtual Component* getComponent() = 0;

	/**
	*Sets the component for this editor
	*/
	virtual void setComponent( Component* component ) = 0;

	/**
	*gets the text representation of this editor's component
	*@return String a text represention of this component and any of it's 
	*children if it supports a Container interface
	*/
	virtual String getComponentVFFFragment() = 0;
	

};


/**
*A ControlEditor is an additional interface used to edit 
*an entire <b>Control</b> at once, as opposed to a PropertyEditor
*which only edits a single property of a specific component or 
*object. The ControlEditor interface provides several extra methods
*specific to editing controls
*/
class APPKIT_API ControlEditor : public Interface  { 
public:
	virtual ~ControlEditor() {};
	
	/**
	*indicates whether the passed in parent is OK for this editor's 
	*control to use. 
	*@param Control* a pointer to the potential parent to be 
	*evaluated by the editor for this control.
	*@return bool returns false if the parent is unacceptable, for instance 
	*if it were the wrong type of class, or true if it is OK to use the parent
	for this control.
	*/
	virtual bool isParentValid( Control* parent ) = 0;

	/**	
	*@return Control the control this Editor is currently attached
	*to.
	*/
	virtual Control* getControl() = 0;

	/**
	*Sets the control for this editor
	*/
	virtual void setControl( Control* control ) = 0;
	
	/**
	*called from the designer whenever a mouse down event is generated by 
	*the control in design mode.
	*/
	virtual void mouseDown( MouseEvent* event ) = 0;
	
	/**
	*called from the designer whenever a mouse move event is generated by 
	*the control in design mode.
	*/
	virtual void mouseMove( MouseEvent* event ) = 0;

	/**
	*called from the designer whenever a mouse up event is generated by 
	*the control in design mode.
	*/
	virtual void mouseUp( MouseEvent* event ) = 0;
};

}; //end of namespace VCF

#endif //_COMPONENTEDITOR_H__


