/**
*Copyright (c) 2000-2001, Jim Crafton
*All rights reserved.
*Redistribution and use in source and binary forms, with or without
*modification, are permitted provided that the following conditions
*are met:
*	Redistributions of source code must retain the above copyright
*	notice, this list of conditions and the following disclaimer.
*
*	Redistributions in binary form must reproduce the above copyright
*	notice, this list of conditions and the following disclaimer in 
*	the documentation and/or other materials provided with the distribution.
*
*THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" 
*AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
*LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
*A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS
*OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
*EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
*PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
*PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
*LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
*NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS 
*SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*
*NB: This software will not save the world.
*/

/* Generated by Together */


#ifndef COMMANDBUTTON_H
#define COMMANDBUTTON_H


namespace VCF{


class ButtonPeer;

enum ButtonCommandType{
	BC_NONE=0,
	BC_OK,
	BC_CANCEL,
	BC_YES,
	BC_NO,
	BC_MAYBE
};

static String ButtonCommandTypeNames[] = { "BC_NONE", 
                                         "BC_OK", 
										 "BC_CANCEL", 
										 "BC_YES", 
										 "BC_NO", 
										 "BC_MAYBE" };

#define COMMANDBUTTON_CLASSID		"8B2CDC30-3CAD-11d4-B553-00C04F0196DA"

/**
 * Command button is a representation of a Win32 BUTTON class. 
 */
class APPKIT_API CommandButton :  public VCF::Control, public VCF::Button {
public:
	BEGIN_CLASSINFO(CommandButton, "VCF::CommandButton", "VCF::Control", COMMANDBUTTON_CLASSID)
	PROPERTY( String, "caption", CommandButton::getCaption, CommandButton::setCaption, PROP_STRING );		
	LABELED_ENUM_PROPERTY( ButtonCommandType, "commandType", CommandButton::getCommandType, CommandButton::setCommandType, 
						   BC_NONE, BC_MAYBE, 6, ButtonCommandTypeNames);
	EVENT( "VCF::ButtonEventHandler", "VCF::ButtonEvent", "ButtonClicked" )
	END_CLASSINFO(CommandButton)

	CommandButton();

	virtual ~CommandButton();

	EVENT_HANDLER_LIST(ButtonClicked);

	/**
	*This macro creates a method for adding a listener to the CommandButton's events
	*/
	virtual void addButtonClickHandler( EventHandler* handler ) {
		ADD_EVENT_IMPL(ButtonClicked)
	}

	/**
	*This macro creates a method for removing a listener to the CommandButton's events
	*/
	virtual void removeButtonClickHandler( EventHandler* handler ) {
		REMOVE_EVENT_IMPL(ButtonClicked)
	}

	FIRE_EVENT(ButtonClicked,ButtonEvent);    

    virtual void click();

    void setCaption( const String& caption );

    String getCaption();

	ButtonCommandType getCommandType();

	void setCommandType( const ButtonCommandType& commandType );

	virtual void paint(GraphicsContext * context);
private:    
    ButtonPeer * m_buttonPeer;
    String m_caption;
	ButtonCommandType m_commandType;
};

}
#endif //COMMANDBUTTON_H