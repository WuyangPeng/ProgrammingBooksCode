/**
*Copyright (c) 2000-2001, Jim Crafton
*All rights reserved.
*Redistribution and use in source and binary forms, with or without
*modification, are permitted provided that the following conditions
*are met:
*	Redistributions of source code must retain the above copyright
*	notice, this list of conditions and the following disclaimer.
*
*	Redistributions in binary form must reproduce the above copyright
*	notice, this list of conditions and the following disclaimer in 
*	the documentation and/or other materials provided with the distribution.
*
*THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" 
*AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
*LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
*A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS
*OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
*EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
*PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
*PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
*LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
*NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS 
*SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*
*NB: This software will not save the world.
*/

/* Generated by Together */

#ifndef POINT_H
#define POINT_H



namespace VCF{

/**
*represents a 2 dimensional coordinate (x and y)
and stores the data as doubles, for maximum precision.
*/
class FRAMEWORK_API Point: public Object {
public:
    Point(const double & x, const double & y);
	Point();

	/**
	*the x coordinate of the point - specifies horizontal
	*values
	*/
    double m_x;

	/**
	*the y coordinate of the point - specifies vertical 
	*values
	*/
    double m_y;

	void init();

	/**
	*operator == overload for comparing two Points
	*/
	bool operator == ( const Point& pointToCompare )const{
		bool result = false;
		
		result = (this->m_x == pointToCompare.m_x) &&
			     (this->m_y == pointToCompare.m_y);

		return result;
	};

	/**
	*determines if the x and y coordinates specified are within the 
	*tolerance range
	*@param double x coordinate
	*@param double y coordinate
	*@param double the tolerance to use
	*@return true if the x and y coordinates are with the tolerance, other wise 
	*false. 
	*/
	bool closeTo( const double& x, const double& y, const double& tolerance=1.0 );

	bool closeTo( const Point& pt, const double& tolerance=1.0 );

	virtual String toString();
};

};
#endif //POINT_H