/**
*Copyright (c) 2000-2001, Jim Crafton
*All rights reserved.
*Redistribution and use in source and binary forms, with or without
*modification, are permitted provided that the following conditions
*are met:
*	Redistributions of source code must retain the above copyright
*	notice, this list of conditions and the following disclaimer.
*
*	Redistributions in binary form must reproduce the above copyright
*	notice, this list of conditions and the following disclaimer in 
*	the documentation and/or other materials provided with the distribution.
*
*THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" 
*AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
*LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
*A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS
*OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
*EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
*PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
*PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
*LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
*NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS 
*SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*
*NB: This software will not save the world.
*/

/* Generated by Together */

#ifndef COMBOBOXCONTROL_H
#define COMBOBOXCONTROL_H



namespace VCF{

class ListModel;

class ComboBoxPeer;

class ListModelEvent;

class ListModelHandler;

class ListItem;

#define COMBOBOXCONTROL_CLASSID		"4A9D66D5-3B26-11d4-B54C-00C04F0196DA"

class APPKIT_API ComboBoxControl : public VCF::CustomControl {
public:

	BEGIN_CLASSINFO(ComboBoxControl, "VCF::ComboBoxControl", "VCF::CustomControl", COMBOBOXCONTROL_CLASSID )
	EVENT("ComboBoxItemEventHandler", "VCF::ItemEvent", "SelectionChanged" )	
	END_CLASSINFO(ComboBoxControl)

	ComboBoxControl();

	virtual ~ComboBoxControl();

	void init();

	EVENT_HANDLER_LIST(SelectionChanged)
	ADD_EVENT(SelectionChanged)
	REMOVE_EVENT(SelectionChanged)

	FIRE_EVENT(SelectionChanged, ItemEvent)
	

    ListModel* getListModel();

    void setListModel(ListModel * model); 

	virtual void paint( GraphicsContext* context );

	void onListModelContentsChanged( ListModelEvent* event );

    void onItemAdded( ListModelEvent* event );

    void onItemDeleted( ListModelEvent* event );

	virtual void mouseDown( MouseEvent* event );

	virtual void mouseMove( MouseEvent* event );

	virtual void mouseUp( MouseEvent* event );

	virtual void keyPressed( KeyboardEvent* event );

	ListItem* getSelectedItem();

	void setSelectedItem( ListItem* selectedItem );

	void setSelectedItemIndex( const ulong32& selectedIndex );

private:    
    //ComboBoxPeer * m_comboBoxPeer;
	ListModel* m_listModel;	
	ulong32 m_selectedIndex;
	bool m_arrowPressed;
	Rect m_arrowRect;
};

};

#endif //COMBOBOXCONTROL_H