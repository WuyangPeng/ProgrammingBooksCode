<html>

<head>
<meta http-equiv="Content-Language" content="zh-cn">
<meta http-equiv="Content-Type" content="text/html; charset=gb2312">
<meta name="GENERATOR" content="Microsoft FrontPage 12.0">
<meta name="ProgId" content="FrontPage.Editor.Document">
<title>第26章 PROXY模式和STAIRWAY TO HEAVEN模式：管理第三方API</title>
<link rel="stylesheet" type="text/css" href="../../../news.css">
<meta name="Microsoft Theme" content="nature 011">
<style type="text/css">
.style1 {
	font-family: FZKai-Z03;
	font-weight: bold;
}
.style6 {
	font-family: FZKai-Z03;
	font-weight: bold;
	color: #0000FF;
}
.style7 {
	font-size: large;
}
.style8 {
	font-family: FZKai-Z03;
	font-weight: bold;
	color: #0000FF;
	font-size: large;
}
.style10 {
	font-family: FZKai-Z03;
	text-align: center;
	font-size: medium;
}
.style12 {
	font-family: FZKai-Z03;
	text-indent: 0;
	text-align: center;
	margin-left: 12px;
	margin-right: 12px;
}
.style13 {
	text-align: center;
}
.style11 {
	font-family: FZKai-Z03;
	text-indent: 32px;
	text-align: left;
	margin-left: 12px;
	margin-right: 12px;
}
.style14 {
	font-family: FZKai-Z03;
	text-indent: 32px;
	text-align: left;
	margin-left: 52px;
	margin-right: 12px;
}
.style15 {
	font-family: FZKai-Z03;
	text-indent: 32px;
	text-align: left;
	margin-left: 92px;
	margin-right: 12px;
}
.style16 {
	font-family: FZKai-Z03;
	text-indent: 32px;
	text-align: left;
	margin-left: 212px;
	margin-right: 12px;
}
.style17 {
	text-indent: 32px;
	text-align: center;
}
.style18 {
	font-family: FZKai-Z03;
	text-indent: 32px;
	text-align: center;
}
</style>
</head>

<body background="../../../nabkgnd.jpg" bgcolor="#FFFFFF" text="#000000" link="#993333" vlink="#333399" alink="#006633">

<div class="style13">

<p align="center" class="style1"><font size="7" color="#0000FF">敏捷软件开发：原则、模式与实践</font></p>
<p align="center" class="style8">Agile 
Software Development</p>
<p align="center" class="style6">&nbsp;<span class="style7">Principles, Patterns, and 
Practices</span></p>
<p align="center" class="style6">
<img src="../../../anabull1.gif" border="0" width="15" height="15"><span class="style10"><strong>第26章 
PROXY模式和STAIRWAY TO HEAVEN模式：管理第三方API</strong></span><img src="../../../anabull1.gif" border="0" width="15" height="15"></p>

<p align="center"><img border="0" src="../../../anarule.gif" width="600" height="10"></p>
<p class="style11">
软件系统中存在很多障碍。当把数据从程序移到数据库中去时，我们正在跨越数据库障碍。当把消息从一台计算机发送到另一台计算机时，我们正在跨越网络障碍。</p>
<p class="style11">
跨越这些障碍可能是复杂的。如果不小心，那么我们的软件就更多的是在处理有关障碍的问题而不是本来要解决的问题。</p>
<p align="center"><img border="0" src="../../../anarule.gif" width="600" height="10">&nbsp;</p>
<p class="style12">
<strong>26.1 PROXY模式 </strong>&nbsp;</p>
<p class="style11">
向对象模型中增加一个商品项</p>
<p class="style11">
public class Order</p>
<p class="style11">
{</p>
<p class="style14">
private Vector itsItems = new Vector();</p>
<p class="style14">
public void addItem(Product p, int qty)</p>
<p class="style14">
{</p>
<p class="style15">
Item item = new Item(p, qty);</p>
<p class="style15">
itsItems.add(item);</p>
<p class="style14">
}</p>
<p class="style11">
}</p>
<p class="style11">
向关系数据模型中增加一个条目</p>
<p class="style11">
public class AddItemTransaction extends Transaction</p>
<p class="style11">
{</p>
<p class="style14">
public void addItem(int orderId, String sku, int qty)</p>
<p class="style14">
{</p>
<p class="style15">
Statement s = itsConnection.CreateStatement();</p>
<p class="style15">
s.executeUpdate(&quot;insert into items values(&quot; +</p>
<p class="style16">
&nbsp;&nbsp; orderId + &quot;,&quot; + sku + &quot;,&quot; +</p>
<p class="style16">
&nbsp;&nbsp; qty + &quot;)&quot;);</p>
<p class="style14">
}</p>
<p class="style11">
}</p>
<p class="style11">
<a href="Patterns/Proxy%20and%20Composite/Shopping%20Cart1/src/com/tcre/TestShoppingCart.java">
TestShoppingCart.java</a></p>
<p class="style11">
<a href="Patterns/Proxy%20and%20Composite/Shopping%20Cart1/src/com/tcre/Order.java">
Order.java</a></p>
<p class="style11">
<a href="Patterns/Proxy%20and%20Composite/Shopping%20Cart1/src/com/tcre/Product.java">
Product.java</a></p>
<p class="style11">
<a href="Patterns/Proxy%20and%20Composite/Shopping%20Cart1/src/com/tcre/Item.java">
Item.java</a>&nbsp;</p>
<p class="style11">
数据库在这两者都不知道的情况下被插入到应用程序中。这正是PROXY模式的优点。理论上，它可以在两个协作的对象都不知道的情况下被插入到它们之间。因此，使用它可以跨越像数据库或者网络这样的障碍，而不会影响到任何一个参与者。&nbsp; &nbsp;</p>
<p align="center"><img border="0" src="../../../anarule.gif" width="600" height="10"></p>
<p class="style12">
<strong>26.1.1 代理化购物车应用</strong>&nbsp;</p>
<p class="style11">
<a href="Patterns/Proxy%20and%20Composite/Shopping%20Cart2/src/com/tcre/DBTest.java">
DBTest.java</a></p>
<p class="style11">
<a href="Patterns/Proxy%20and%20Composite/Shopping%20Cart2/src/com/tcre/ProductData.java">
ProductData.java</a></p>
<p class="style11">
<a href="Patterns/Proxy%20and%20Composite/Shopping%20Cart2/src/com/tcre/DB.java">
DB.java</a></p>
<p class="style11">
<a href="Patterns/Proxy%20and%20Composite/Shopping%20Cart2/src/com/tcre/ProxyTest.java">
ProxyTest.java</a></p>
<p class="style11">
<a href="Patterns/Proxy%20and%20Composite/Shopping%20Cart2/src/com/tcre/Product.java">
Product.java</a></p>
<p class="style11">
<a href="Patterns/Proxy%20and%20Composite/Shopping%20Cart2/src/com/tcre/ProductImp.java">
ProductImp.java</a></p>
<p class="style11">
<a href="Patterns/Proxy%20and%20Composite/Shopping%20Cart2/src/com/tcre/ProductProxy.java">
ProductProxy.java</a></p>
<p class="style11">
<a href="Patterns/Proxy%20and%20Composite/Shopping%20Cart2/src/com/tcre/ProxyTest.java">
ProxyTest.java</a></p>
<p class="style11">
<a href="Patterns/Proxy%20and%20Composite/Shopping%20Cart2/src/com/tcre/OrderData.java">
OrderData.java</a></p>
<p class="style11">
<a href="Patterns/Proxy%20and%20Composite/Shopping%20Cart2/src/com/tcre/Order.java">
Order.java</a></p>
<p class="style11">
<a href="Patterns/Proxy%20and%20Composite/Shopping%20Cart2/src/com/tcre/OrderImp.java">
OrderImp.java</a></p>
<p class="style11">
<a href="Patterns/Proxy%20and%20Composite/Shopping%20Cart2/src/com/tcre/OrderProxy.java">
OrderProxy.java</a></p>
<p class="style11">
<a href="Patterns/Proxy%20and%20Composite/Shopping%20Cart2/src/com/tcre/ItemData.java">
ItemData.java&nbsp; </a>&nbsp;</p>
<p align="center"><img border="0" src="../../../anarule.gif" width="600" height="10"></p>
<p class="style12">
<strong>26.1.2 PROXY模式总结</strong>&nbsp;</p>
<p class="style11">
使用代理是有代价的。规范模式中所隐含的简单委托模型很少能够被优美地实现。相反，我们经常会取消对于繁琐的获取和设置方法的委托。</p>
<p class="style11">
我不赞成因为惧怕如果没有缓存会导致性能降低，而机械地去实现一个缓存策略的做法。事实上，我已经发现过早地加入缓存反而会有效的降低性能。</p>
<p class="style11">
重要关系的分离。</p>
<p class="style11">
PROXY模式可以用来分离业务规则和任何种类的实现问题。&nbsp; &nbsp;</p>
<p align="center"><img border="0" src="../../../anarule.gif" width="600" height="10"></p>
<p class="style12">
<strong>26.1.3 处理数据库、中间件以及其他第三方接口</strong>&nbsp;</p>
<p class="style11">
用一个层来隔离应用业务规则和第三方API。</p>
<p class="style11">
为了更好地隔离，我们需要倒置应用程序和该层之间的依赖关系。这就使得应用程序对于第三方API没有任何依赖，不管是直接的还是间接的。</p>
<p class="style11">
在使用数据库的应用中，它使得应用程序无需直接知道数据库模式的知识。在使用中间件引擎的应用中，它使得应用程序无需知道任何有关中间件处理器所使用的数据类型。</p>
<p class="style11">
PROXY模式正好可以实现这种形式的依赖关系。应用程序完全没有依赖于代理。相反，代理依赖于应用程序以及API。这就把所有关于应用程序和API之间的映射关系的知识都集中到代理中。</p>
<p class="style11">
这种对知识的集中意味着代理会成为噩梦。每当API改变时，代理就得改变。每当应用程序改变时，代理就得改变。代理会变得非常难以处理。</p>
<p class="style11">
知道噩梦会出现在哪里是件好事。如果没有代理，噩梦就会遍布到应用程序代码的各个地方。</p>
<p class="style11">
大多数应用程序不需要代理。代理是一个非常重型的解决方案。&nbsp; &nbsp;</p>
<p align="center"><img border="0" src="../../../anarule.gif" width="600" height="10"></p>
<p class="style12">
<strong>26.2 STAIRWAY TO HEAVEN模式</strong></p>
<p class="style11">
这个模式只能在支持多重继承的语言中使用。</p>
<p class="style11">
PersistentObject* o = dynamic_cast&lt;PersistentObject*&gt;(product);</p>
<p class="style11">
if(o)</p>
<p class="style14">
o-&gt;write();&nbsp; &nbsp;</p>
<p align="center"><img border="0" src="../../../anarule.gif" width="600" height="10"></p>
<p class="style12">
<strong>26.2.1 STAIRWAY TO HEAVEN模式的例子</strong></p>
<p class="style18">
单元测试框架</p>
<p class="style17">
<a href="https://www.junit.org">https://www.junit.org</a></p>
<p class="style11">
<a href="Patterns/Proxy%20and%20Composite/Stairway%20to%20Heaven/ProductPersistenceTestCase.cpp">
ProductPersistenceTestCase.cpp</a></p>
<p class="style11">
<a href="Patterns/Proxy%20and%20Composite/Stairway%20to%20Heaven/product.h">
Product.h</a></p>
<p class="style11">
<a href="Patterns/Proxy%20and%20Composite/Stairway%20to%20Heaven/product.cpp">
Product.cpp</a></p>
<p class="style11">
<a href="Patterns/Proxy%20and%20Composite/Stairway%20to%20Heaven/assembly.h">
Assembly.h</a></p>
<p class="style11">
<a href="Patterns/Proxy%20and%20Composite/Stairway%20to%20Heaven/assembly.cpp">
Assembly.cpp</a></p>
<p class="style11">
<a href="Patterns/Proxy%20and%20Composite/Stairway%20to%20Heaven/persistentObject.h">
PersistentObject.h</a></p>
<p class="style11">
<a href="Patterns/Proxy%20and%20Composite/Stairway%20to%20Heaven/persistentObject.cpp">
PersistentObject.cpp</a></p>
<p class="style11">
<a href="Patterns/Proxy%20and%20Composite/Stairway%20to%20Heaven/persistentProduct.h">
PersistenProduct.h</a></p>
<p class="style11">
<a href="Patterns/Proxy%20and%20Composite/Stairway%20to%20Heaven/persistentProduct.cpp">
PersistenProduct.cpp</a></p>
<p class="style11">
<a href="Patterns/Proxy%20and%20Composite/Stairway%20to%20Heaven/persistentAssembly.h">
PersistenAssembly.h</a></p>
<p class="style11">
<a href="Patterns/Proxy%20and%20Composite/Stairway%20to%20Heaven/persistentAssembly.cpp">
PersistenAssembly.cpp</a>&nbsp; &nbsp;</p>
<p align="center"><img border="0" src="../../../anarule.gif" width="600" height="10"></p>
<p class="style12">
<strong>26.2.2 结论</strong></p>
<p class="style11">
这个模式比较容易创建并且包含业务规则的对象具有最小影响。&nbsp; &nbsp;</p>
<p align="center"><img border="0" src="../../../anarule.gif" width="600" height="10"></p>
<p class="style12">
<strong>26.3 可以用于数据库的其他模式</strong>&nbsp; &nbsp;</p>
<p align="center"><img border="0" src="../../../anarule.gif" width="600" height="10"></p>
<p class="style12">
<strong>26.3.1 Extension Object模式</strong></p>
<p class="style11">
假定一个扩展对象知道如何把被扩展的对象写入数据库。</p>
<p class="style11">
Product p = /* some function that return a Product */</p>
<p class="style11">
ExtensionObject e = p.getExtension(&quot;Database&quot;);</p>
<p class="style11">
if(e != null)</p>
<p class="style11">
{</p>
<p class="style14">
DatabaseWriterExtension dwe = (DatabaseWriterExtension)e;</p>
<p class="style14">
e.write();</p>
<p class="style11">
}&nbsp; &nbsp;</p>
<p align="center"><img border="0" src="../../../anarule.gif" width="600" height="10"></p>
<p class="style12">
<strong>26.3.2 Visitor模式</strong></p>
<p class="style11">
假定一个访问者类层次结构知道如何把访问的对象写入数据库中。</p>
<p class="style11">
Product p = /* some function that return a Product */</p>
<p class="style11">
ExtensionWriteVisitor dwv = new ExtensionWriteVisitor();</p>
<p class="style11">
p.accept(dwv);&nbsp; &nbsp;</p>
<p align="center"><img border="0" src="../../../anarule.gif" width="600" height="10"></p>
<p class="style12">
<strong>26.3.3 Decorator</strong></p>
<p class="style11">
有两种使用装饰者实现数据库的方法。你可以装饰一个业务对象并赋予它read和write方法；或者可以装饰一个知道如何读写自身的数据对象赋予它业务规则。&nbsp; &nbsp;</p>
<p align="center"><img border="0" src="../../../anarule.gif" width="600" height="10"></p>
<p class="style12">
<strong>26.3.4 Facade</strong>&nbsp; &nbsp;</p>
<p align="center"><img border="0" src="../../../anarule.gif" width="600" height="10"></p>
<p class="style12">
<strong>26.4 结论</strong></p>
<p class="style11">
远在真正需要PROXY模式或者STAIRWAY TO 
HEAVEN模式前，就去预测对于它们的需要是非常有诱惑力的。但这几乎从来都不是一个好主意，特别是对于Proxy模式。我建议在开始时先使用FACADE模式，然后在必要时进行重构。&nbsp; &nbsp;</p>
<p align="center"><img border="0" src="../../../anarule.gif" width="600" height="10"></p>
<p align="center"><b><font size="6" face="隶书"><img border="0" src="../../../anabull1.gif" width="15" height="15"></font></b><font color="#800080" face="华文彩云" size="5"><b><a href="第Ⅴ部分.htm"><font color="#ff00ff">返回</font></a></b></font><b><font size="6" face="隶书"><img border="0" src="../../../anabull1.gif" width="15" height="15"></font></b></p>

</div>

</body>

</html>
