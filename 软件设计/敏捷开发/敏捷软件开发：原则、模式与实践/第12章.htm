<html>

<head>
<meta http-equiv="Content-Language" content="zh-cn">
<meta http-equiv="Content-Type" content="text/html; charset=gb2312">
<meta name="GENERATOR" content="Microsoft FrontPage 12.0">
<meta name="ProgId" content="FrontPage.Editor.Document">
<title>第12章 接口隔离原则（ISP）</title>
<link rel="stylesheet" type="text/css" href="../../../news.css">
<meta name="Microsoft Theme" content="nature 011">
<style type="text/css">
.style1 {
	font-family: FZKai-Z03;
	font-weight: bold;
}
.style6 {
	font-family: FZKai-Z03;
	font-weight: bold;
	color: #0000FF;
}
.style7 {
	font-size: large;
}
.style8 {
	font-family: FZKai-Z03;
	font-weight: bold;
	color: #0000FF;
	font-size: large;
}
.style10 {
	font-family: FZKai-Z03;
	text-align: center;
	font-size: medium;
}
.style12 {
	font-family: FZKai-Z03;
	text-indent: 0;
	text-align: center;
	margin-left: 12px;
	margin-right: 12px;
}
.style13 {
	text-align: center;
}
.style11 {
	font-family: FZKai-Z03;
	text-indent: 32px;
	text-align: left;
	margin-left: 12px;
	margin-right: 12px;
}
.style14 {
	font-family: FZKai-Z03;
	text-indent: 32px;
	text-align: left;
	margin-left: 52px;
	margin-right: 12px;
}
</style>
</head>

<body background="../../../nabkgnd.jpg" bgcolor="#FFFFFF" text="#000000" link="#993333" vlink="#333399" alink="#006633">

<div class="style13">

<p align="center" class="style1"><font size="7" color="#0000FF">敏捷软件开发：原则、模式与实践</font></p>
<p align="center" class="style8">Agile 
Software Development</p>
<p align="center" class="style6">&nbsp;<span class="style7">Principles, Patterns, and 
Practices</span></p>
<p align="center" class="style6">
<img src="../../../anabull1.gif" border="0" width="15" height="15"><span class="style10"><strong>第12章 
接口隔离原则（ISP）</strong></span><img src="../../../anabull1.gif" border="0" width="15" height="15"></p>

<p align="center"><img border="0" src="../../../anarule.gif" width="600" height="10">&nbsp;</p>
<p class="style11">
如果类的接口不是内聚的，就表示该类具有“胖”的接口。</p>
<p class="style11">
类的“胖”接口可以分解成多组方法。每一组方法都服务于一组不同的客户程序。</p>
<p align="center"><img border="0" src="../../../anarule.gif" width="600" height="10">&nbsp;</p>
<p class="style12">
<strong>12.1 接口污染</strong></p>
<p class="style11">
class Door</p>
<p class="style11">
{</p>
<p class="style11">
public:</p>
<p class="style14">
virtual void Lock() = 0;</p>
<p class="style14">
virtual void Unlock() = 0;</p>
<p class="style14">
virtual bool IsDoorOpen() = 0;</p>
<p class="style11">
};</p>
<p class="style11">
class Timer</p>
<p class="style11">
{</p>
<p class="style11">
public:</p>
<p class="style14">
void Register(int timeout,TimerClient* client);</p>
<p class="style11">
};</p>
<p class="style11">
class TimerClient</p>
<p class="style11">
{</p>
<p class="style11">
public</p>
<p class="style14">
virtual void TimeOut() = 0;</p>
<p class="style11">
}</p>
<p align="center"><img border="0" src="../../../anarule.gif" width="600" height="10">&nbsp;</p>
<p class="style12">
<strong>12.2 分离客户就是分离接口</strong></p>
<p class="style11">
class Timer</p>
<p class="style11">
{</p>
<p class="style11">
public:</p>
<p class="style14">
void Register(int timeout,int timeOutID,TimerClient* client);</p>
<p class="style11">
};</p>
<p class="style11">
class TimerClient</p>
<p class="style11">
{</p>
<p class="style11">
public:</p>
<p class="style14">
virtual void TimeOut(int timeOutID) = 0;</p>
<p class="style11">
}</p>
<p align="center"><img border="0" src="../../../anarule.gif" width="600" height="10">&nbsp;</p>
<p class="style12">
<strong>12.3 接口隔离原则（ISP)</strong></p>
<p class="style11">
不应该强迫客户依赖于它们不用的方法。</p>
<p class="style11">
如果一个客户程序依赖于一个含有它不使用方法的类，但是其他客户程序却要使用该方法，那么当其他客户要求这个类改变时，就会影响到这个客户程序。我们希望尽可能地避免这种耦合，因此我们希望分离接口。</p>
<p align="center"><img border="0" src="../../../anarule.gif" width="600" height="10">&nbsp;</p>
<p class="style12">
<strong>12.4 类接口与对象接口</strong></p>
<p class="style11">
一个对象的客户不是必须通过该对象的接口去访问它，也可以通过委托或者通过该对象的基类去访问它。</p>
<p align="center"><img border="0" src="../../../anarule.gif" width="600" height="10">&nbsp;</p>
<p class="style12">
<strong>12.4.1 使用委托分离接口</strong></p>
<p class="style11">
class TimedDoor : public Door</p>
<p class="style11">
{</p>
<p class="style11">
public:</p>
<p class="style14">
virtual void DoorTimeOut(int timeOutID);</p>
<p class="style11">
};</p>
<p class="style11">
class DoorTimeAdapter : public TimerClient</p>
<p class="style11">
{</p>
<p class="style11">
public:</p>
<p class="style14">
DoorTimeAdapter(TimedDoor&amp; theDoor) : itsTimedDoor(theDoor)</p>
<p class="style14">
{}</p>
<p class="style14">
virtual void TimeOut(int timeOutId)</p>
<p class="style14">
{ itsTimedDoor.DoorTimeOut(timeOutId); }</p>
<p class="style11">
private:</p>
<p class="style14">
TimedDoor&amp; itsTimedDoor;</p>
<p class="style11">
};</p>
<p class="style11">
这个解决方案还是有些不太优雅。</p>
<p class="style11">
委托处理会导致一些很小但仍然存在的运行时间和内存的开销。</p>
<p align="center"><img border="0" src="../../../anarule.gif" width="600" height="10">&nbsp;</p>
<p class="style12" style="height: 22px">
<strong>12.4.2 使用多重继承分离接口</strong></p>
<p class="style11">
class TimedDoor : public Door,public TimerClient</p>
<p class="style11">
{</p>
<p class="style11">
public:</p>
<p class="style14">
virtual void DoorTimeOut(int timeOutID);</p>
<p class="style11">
};</p>
<p align="center"><img border="0" src="../../../anarule.gif" width="600" height="10">&nbsp;</p>
<p class="style12" style="height: 22px">
<strong>12.5 ATM用户界面的例子</strong></p>
<p class="style11">
<a href="Principles%20of%20Class%20Design/ISP/ISP/DepositUI.h">DepositUI.h</a></p>
<p class="style11">
<a href="Principles%20of%20Class%20Design/ISP/ISP/DepositUI.cpp">DepositUI.cpp</a></p>
<p class="style11">
<a href="Principles%20of%20Class%20Design/ISP/ISP/TransferUI.h">TransferUI.h</a></p>
<p class="style11">
<a href="Principles%20of%20Class%20Design/ISP/ISP/WithdrawalUI.h">WithdrawalUI.h</a></p>
<p class="style11">
<a href="Principles%20of%20Class%20Design/ISP/ISP/UIGlobals.h">UIGlobals.h</a></p>
<p class="style11">
<a href="Principles%20of%20Class%20Design/ISP/ISP/UIGlobals.cc">UIGlobals.cc</a></p>
<p class="style11">
常常可以根据客户所调用的服务方法来对客户进行分组。这种分组方法使得可以为每组而不是每个客户创建分离的接口。这极大地减少了服务需要实现的接口数量，同时也避免让服务依赖于每个客户类型。</p>
<p class="style11">
在维护面向对象的应用程序时，常常会改变现在的类和组件的接口。</p>
<p class="style11">
可以通过为现有的对象增加新接口的方法来组解，而不是去改变现有的接口。原有接口的客户如果想访问新接口中的就去，可以通过对象去询问该接口。</p>
<p align="center"><img border="0" src="../../../anarule.gif" width="600" height="10">&nbsp;</p>
<p class="style12" style="height: 22px">
<strong>12.6 结论</strong></p>
<p class="style11">
&nbsp;胖类会导致它们的客户程序之间产生不正常的并且有害的耦合关系。当一个客户程序要求该胖类进行一个改动时，会影响到其他的客户程序。因此，客户程序应该仅仅依赖于它们实际调用的方法。通过把胖类的接口分解为多个特定于客户程序的接口，可以实现这个目标。每个特定于客户程序的接口仅仅声明它的特定客户或者客户组调用的那些函数。接着，该胖类就可以继承所有特定于客户程序的接口，并实现它们。这就解除了客户程序和它们没有调用的方法间依赖关系，并使客户程序之间互不依赖。&nbsp;</p>
<p align="center"><img border="0" src="../../../anarule.gif" width="600" height="10"></p>
<p align="center"><b><font size="6" face="隶书"><img border="0" src="../../../anabull1.gif" width="15" height="15"></font></b><font color="#800080" face="华文彩云" size="5"><b><a href="第Ⅱ部分.htm"><font color="#ff00ff">返回</font></a></b></font><b><font size="6" face="隶书"><img border="0" src="../../../anabull1.gif" width="15" height="15"></font></b></p>

</div>

</body>

</html>
