<html>

<head>
<meta http-equiv="Content-Language" content="zh-cn">
<meta http-equiv="Content-Type" content="text/html; charset=gb2312">
<meta name="GENERATOR" content="Microsoft FrontPage 12.0">
<meta name="ProgId" content="FrontPage.Editor.Document">
<title>第28章 VISITOR模式</title>
<link rel="stylesheet" type="text/css" href="../../../news.css">
<meta name="Microsoft Theme" content="nature 011">
<style type="text/css">
.style1 {
	font-family: FZKai-Z03;
	font-weight: bold;
}
.style6 {
	font-family: FZKai-Z03;
	font-weight: bold;
	color: #0000FF;
}
.style7 {
	font-size: large;
}
.style8 {
	font-family: FZKai-Z03;
	font-weight: bold;
	color: #0000FF;
	font-size: large;
}
.style10 {
	font-family: FZKai-Z03;
	text-align: center;
	font-size: medium;
}
.style12 {
	font-family: FZKai-Z03;
	text-indent: 0;
	text-align: center;
	margin-left: 12px;
	margin-right: 12px;
}
.style13 {
	text-align: center;
}
.style11 {
	font-family: FZKai-Z03;
	text-indent: 32px;
	text-align: left;
	margin-left: 12px;
	margin-right: 12px;
}
.style14 {
	font-family: FZKai-Z03;
	text-indent: 0;
	text-align: left;
	margin-left: 12px;
	margin-right: 12px;
}
.style15 {
	font-family: FZKai-Z03;
}
</style>
</head>

<body background="../../../nabkgnd.jpg" bgcolor="#FFFFFF" text="#000000" link="#993333" vlink="#333399" alink="#006633">

<div class="style13">

<p align="center" class="style1"><font size="7" color="#0000FF">敏捷软件开发：原则、模式与实践</font></p>
<p align="center" class="style8">Agile 
Software Development</p>
<p align="center" class="style6">&nbsp;<span class="style7">Principles, Patterns, and 
Practices</span></p>
<p align="center" class="style6">
<img src="../../../anabull1.gif" border="0" width="15" height="15"><span class="style10"><strong>第28章 
VISITOR模式</strong></span><img src="../../../anabull1.gif" border="0" width="15" height="15"></p>

<p align="center"><img border="0" src="../../../anarule.gif" width="600" height="10"></p>
<p class="style11">
问题：需要向类层次结构中增加新的方法，但是增加起来会很费劲或者会破坏设计。&nbsp; &nbsp;</p>
<p align="center"><img border="0" src="../../../anarule.gif" width="600" height="10"></p>
<p class="style12">
<strong>28.1 VISITOR设计模式系列 </strong>&nbsp;</p>
<p class="style11">
VISITOR模式系列允许在不更改现在类层次结构的情况下向其中增加新的方法。</p>
<p class="style11">
该系列的模式如下：</p>
<ul>
	<li>
	<p class="style14">VISITOR模式</p>
	</li>
	<li>
	<p class="style14">ACYCLIC VISITOR模式</p>
	</li>
	<li>
	<p class="style14">DECORATOR模式</p>
	</li>
	<li>
	<p class="style14">EXTENSION OBJECT模式&nbsp; &nbsp;</p>
	</li>
</ul>
<p align="center"><img border="0" src="../../../anarule.gif" width="600" height="10"></p>
<p class="style12">
<strong>28.2 VISITOR模式 </strong>&nbsp;</p>
<p class="style11">
<a href="Patterns/Visitor/Visitor/src/com/tcre/Modem.java">Modem.java</a></p>
<p class="style11">
<a href="Patterns/Visitor/Visitor/src/com/tcre/ModemVisitor.java">
ModemVisitor.java</a></p>
<p class="style11">
<a href="Patterns/Visitor/Visitor/src/com/tcre/HayesModem.java">HayesModem.java</a></p>
<p class="style11">
<a href="Patterns/Visitor/Visitor/src/com/tcre/ZoomModem.java">ZoomModem.java</a></p>
<p class="style11">
<a href="Patterns/Visitor/Visitor/src/com/tcre/ErnieModem.java">ErineModem.java</a></p>
<p class="style11">
<a href="Patterns/Visitor/Visitor/src/com/tcre/UnixModemConfigurator.java">
UnixModemConfigurator.java</a></p>
<p class="style11">
<a href="Patterns/Visitor/Visitor/src/com/tcre/TestModemVisitor.java">
TestModemVisitor.java&nbsp; &nbsp;</a></p>
<p align="center"><img border="0" src="../../../anarule.gif" width="600" height="10"></p>
<p class="style12">
<strong>28.2.1 VISITOR模式如同一个矩阵 </strong>&nbsp;</p>
<p class="style11">
VISITOR模式中的两次分发形成了一个功能矩阵。&nbsp; &nbsp;</p>
<p align="center"><img border="0" src="../../../anarule.gif" width="600" height="10"></p>
<p class="style12">
<strong>28.3 ACYCLIC VISITOR模式 </strong>&nbsp;</p>
<p class="style11">
被访问层次结构的基类依赖于访问者层次结构的基类。</p>
<p class="style11">
访问者层次结构的基类中对于被访问层次结构中的每个派生类都有一个对应函数。因此，就有一个依赖环把所有被访问的派生类绑定在一起。</p>
<p class="style11">
可以使用一个称为ACYCLIC 
VISITOR模式的变体解决这个问题。该变体把Visitor基类变成退化的，从而解除了依赖环。这个类中没有任何方法意味着它没有依赖于被访问层次结构的派生类。</p>
<p class="style11">
这种做法解除了依赖环，并且更易于增加被访问的派生类以及进行增量编译。糟糕的是，它同样也使得解决方案更加复杂了。更糟糕的是，转型花费的时间依赖于被访问层次结构的宽度和深度，所以很难进行测定。</p>
<p class="style11">
由于转型需要花费大量的执行时间，并且这些时间是不可预测的，所以ACYCLLIC 
VISITOR模式不适用于严格的实时系统。该模式的复杂性可能同样会使它不适用于其他的系统。但是，对于那些被访问的层次结构不稳定，并且增量编译比较重要的系统来说，该模式是一个不错的选择。</p>
<p class="style11">
<a href="Patterns/Visitor/AcyclicVisitor/src/com/tcre/Modem.java">Modem.java</a></p>
<p class="style11">
<a href="Patterns/Visitor/AcyclicVisitor/src/com/tcre/ModemVisitor.java">ModemVisitor.java</a></p>
<p class="style11">
<a href="Patterns/Visitor/AcyclicVisitor/src/com/tcre/ErnieModemVisitor.java">ErineModemVisitor.java</a></p>
<p class="style11">
<a href="Patterns/Visitor/AcyclicVisitor/src/com/tcre/ZoomModemVisitor.java">ZoomModemVisitor.java</a></p>
<p class="style11">
<a href="Patterns/Visitor/AcyclicVisitor/src/com/tcre/HayesModemVisitor.java">HayesModemVisitor.java</a></p>
<p class="style11">
<a href="Patterns/Visitor/AcyclicVisitor/src/com/tcre/ErnieModem.java">ErineModem.java</a></p>
<p class="style11">
<a href="Patterns/Visitor/AcyclicVisitor/src/com/tcre/HayesModem.java">HayesModem.java</a></p>
<p class="style11">
<a href="Patterns/Visitor/AcyclicVisitor/src/com/tcre/ZoomModem.java">ZoomModem.java</a></p>
<p class="style11">
<a href="Patterns/Visitor/AcyclicVisitor/src/com/tcre/TestModemVisitor.java">
TestModemVisitor.java</a></p>
<span class="style15">&nbsp;</span><p align="center"><img border="0" src="../../../anarule.gif" width="600" height="10"></p>
<p class="style12">
<strong>28.3.1 ACYCLIC VISITOR模式如同一个稀疏矩阵 </strong>&nbsp;</p>
<p class="style11">
正像VISITOR模式创建了一个功能矩阵，ACYCLIC VISITOR模式创建了一个稀疏矩阵。访问者类不需要针对每一个被访问的派生类都实现visit函数。</p>
<p class="style11">
ACYCLIC VISITOR模式允许我们忽略某些派生类和功能的组合。&nbsp; &nbsp;</p>
<p align="center"><img border="0" src="../../../anarule.gif" width="600" height="10"></p>
<p class="style12">
<strong>28.3.2 在报表生成器中使用VISITOR模式 </strong>&nbsp;</p>
<p class="style11">
VISITOR模式的一个非常常见的应用是，遍历大量的数据结构并产生报表。这使得数据结构对象中不含有任何产生报表的代码。如果想增加新报表，只需增加新的访问者，而不需要更改数据结构中的代码。</p>
<p class="style11">
<a href="Patterns/Visitor/Report/src/com/tcre/Part.java">Part.java</a></p>
<p class="style11">
<a href="Patterns/Visitor/Report/src/com/tcre/Assembly.java">Assembly.java</a></p>
<p class="style11">
<a href="Patterns/Visitor/Report/src/com/tcre/PiecePart.java">PiecePart.java</a></p>
<p class="style11">
<a href="Patterns/Visitor/Report/src/com/tcre/PartVisitor.java">PartVisitor.java</a></p>
<p class="style11">
<a href="Patterns/Visitor/Report/src/com/tcre/ExplodedCostVisitor.java">
ExplodedCostVisitor.java</a></p>
<p class="style11">
<a href="Patterns/Visitor/Report/src/com/tcre/PartCountVisitor.java">
PartCountVisitor.java</a></p>
<p class="style11">
<a href="Patterns/Visitor/Report/src/com/tcre/TestBOMReport.java">
TestBOMReport.java&nbsp; </a>&nbsp;</p>
<p align="center"><img border="0" src="../../../anarule.gif" width="600" height="10"></p>
<p class="style12">
<strong>28.3.3 VISITOR模式的其他用途 </strong>&nbsp;</p>
<p class="style11">
如果一个应用程序中存在有需要以多种不同方式进行解释的数据结构，就可以使用Visitor模式。编译器通常创建一些中间数据结构来表示那些语法上正确的源代码。然后，这些数据结构被用来生成经过编译的代码。</p>
<p class="style11">
很多应用程序都使用配置数据结构。有人会设想让不同的应用程序子系统通过使用它们自己特定的访问者遍历配置数据来对自己进行初始化。</p>
<p class="style11">
在每个使用访问者的情况中，所使用的数据结构都独立于它的用途，可以创建新的访问者，可以更改现有的访问者，并且可以把所有的访问者重新部署到安装地点而不会引起现有数据结构的重新编译和重新部署。&nbsp; &nbsp;</p>
<p align="center"><img border="0" src="../../../anarule.gif" width="600" height="10"></p>
<p class="style12">
<strong>28.4 DECORATOR模式 </strong>&nbsp;</p>
<p class="style11">
<a href="Patterns/Visitor/Decorator/src/com/tcre/Modem.java">Modem.java</a></p>
<p class="style11">
<a href="Patterns/Visitor/Decorator/src/com/tcre/HayesModem.java">
HayesModem.java</a></p>
<p class="style11">
<a href="Patterns/Visitor/Decorator/src/com/tcre/LoudDialModem.java">
LoudDialModem.java</a></p>
<p class="style11">
<a href="Patterns/Visitor/Decorator/src/com/tcre/ModemDecoratorTest.java">
ModemDecoratorTest.java</a>&nbsp; &nbsp;</p>
<p align="center"><img border="0" src="../../../anarule.gif" width="600" height="10"></p>
<p class="style12">
<strong>28.4.1 多个Decorator</strong> &nbsp;</p>
<p align="center"><img border="0" src="../../../anarule.gif" width="600" height="10"></p>
<p class="style12">
<strong>28.5 EXTENSION OBJECT模式 </strong>&nbsp;</p>
<p class="style11">
这个模式虽然比其他的模式复杂一些，但是它也更强大，更灵活一些。</p>
<p class="style11">
层次结构中的每个对象都持有一个特定扩展对象的列表。同时，每个对象也提供一个通过名字查找扩展对象的方法。扩展对象提供了操作原始结构对象的方法。</p>
<p class="style11">
<a href="Patterns/Visitor/ExtensionObject/src/com/tcre/TestBomXML.java">
TestBomXML.java</a></p>
<p class="style11">
<a href="Patterns/Visitor/ExtensionObject/src/com/tcre/Part.java">Part.java</a></p>
<p class="style11">
<a href="Patterns/Visitor/ExtensionObject/src/com/tcre/PartExtension.java">
PartExtension.java</a></p>
<p class="style11">
<a href="Patterns/Visitor/ExtensionObject/src/com/tcre/PiecePart.java">
PiecePart.java</a></p>
<p class="style11">
<a href="Patterns/Visitor/ExtensionObject/src/com/tcre/Assembly.java">
Assembly.java</a></p>
<p class="style11">
<a href="Patterns/Visitor/ExtensionObject/src/com/tcre/XMLPartExtension.java">
XMLPartExtension.java</a></p>
<p class="style11">
<a href="Patterns/Visitor/ExtensionObject/src/com/tcre/CSVPiecePartExtension.java">
XMLPiecePartExtension.java</a></p>
<p class="style11">
<a href="Patterns/Visitor/ExtensionObject/src/com/tcre/XMLAssemblyExtension.java">
XMLAssemblyExtension.java</a></p>
<p class="style11">
<a href="Patterns/Visitor/ExtensionObject/src/com/tcre/CSVPartExtension.java">
CSVPartExtension.java</a></p>
<p class="style11">
<a href="Patterns/Visitor/ExtensionObject/src/com/tcre/CSVPiecePartExtension.java">
CSVPiecePartExtension.java</a></p>
<p class="style11">
<a href="Patterns/Visitor/ExtensionObject/src/com/tcre/CSVAssemblyExtension.java">
CSVAssemblyExtension.java</a></p>
<p class="style11">
<a href="Patterns/Visitor/ExtensionObject/src/com/tcre/BadPartExtension.java">
BadPartExtension.java&nbsp; </a>&nbsp;</p>
<p align="center"><img border="0" src="../../../anarule.gif" width="600" height="10"></p>
<p class="style12">
<strong>28.6 结论</strong></p>
<p class="style11">
VISITOR模式系列给我们提供了许多无需更改一个层次结构中的类即可修改其行为的方法。&nbsp; &nbsp;</p>
<p align="center"><img border="0" src="../../../anarule.gif" width="600" height="10"></p>
<p class="style12">
<strong>28.6.1 提示</strong>&nbsp; &nbsp;</p>
<p align="center"><img border="0" src="../../../anarule.gif" width="600" height="10"></p>
<p align="center"><b><font size="6" face="隶书"><img border="0" src="../../../anabull1.gif" width="15" height="15"></font></b><font color="#800080" face="华文彩云" size="5"><b><a href="第Ⅵ部分.htm"><font color="#ff00ff">返回</font></a></b></font><b><font size="6" face="隶书"><img border="0" src="../../../anabull1.gif" width="15" height="15"></font></b></p>

</div>

</body>

</html>
