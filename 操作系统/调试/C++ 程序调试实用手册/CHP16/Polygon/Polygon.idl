// Polygon.idl : IDL source for Polygon.dll
//

// This file will be processed by the MIDL tool to
// produce the type library (Polygon.tlb) and marshalling code.

import "oaidl.idl";
import "ocidl.idl";
#include "olectl.h"
	

	[
		object,
		uuid(16F763AD-9F2E-11D3-A7E0-0080AE000001),
		dual,
		helpstring("IPolyCtl Interface"),
		pointer_default(unique)
	]
	interface IPolyCtl : IDispatch
	{
		[propput, id(DISPID_FILLCOLOR)]
		HRESULT FillColor([in]OLE_COLOR clr);
		[propget, id(DISPID_FILLCOLOR)]
		HRESULT FillColor([out, retval]OLE_COLOR* pclr);
		[propget, id(1), helpstring("property Sides")] HRESULT Sides([out, retval] short *pVal);
		[propput, id(1), helpstring("property Sides")] HRESULT Sides([in] short newVal);
	};

[
	uuid(16F763A1-9F2E-11D3-A7E0-0080AE000001),
	version(1.0),
	helpstring("Polygon 1.0 Type Library")
]
library POLYGONLib
{
	importlib("stdole32.tlb");
	importlib("stdole2.tlb");

	[
		uuid(16F763AF-9F2E-11D3-A7E0-0080AE000001),
		helpstring("_IPolyCtlEvents Interface")
	]
	dispinterface _IPolyCtlEvents
	{
		properties:
		methods:
		[id(1), helpstring("method ClickIn")] void ClickIn([in] long x, [in] long y);
		[id(2), helpstring("method ClickOut")] void ClickOut([in] long x, [in] long y);
	};

	[
		uuid(16F763AE-9F2E-11D3-A7E0-0080AE000001),
		helpstring("PolyCtl Class")
	]
	coclass PolyCtl
	{
		[default] interface IPolyCtl;
		[default, source] dispinterface _IPolyCtlEvents;
	};

	[
		uuid(7846CD41-9F37-11D3-A7E0-0080AE000001),
		helpstring("PolyProp Class")
	]
	coclass PolyProp
	{
		interface IUnknown;
	};
};
