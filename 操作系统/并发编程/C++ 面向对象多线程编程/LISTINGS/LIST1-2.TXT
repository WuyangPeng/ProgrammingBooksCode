// Listing 1-2
// Some of the definitions for the rational class
// that demonstrate how rational class
// semantics are enforced

    1   rational::rational(long Num,long Den)
    2   {
    3     Numerator = Num;
    4     if(Den == 0){
    5        Exception.message("Zero Is A Invalid Denominator");
    6        throw Exception;
    7     }
    8     Denominator = Den;
    9   }
   10   
   11   rational rational::operator/(const rational &X)
   12   {
   13     if(X.Denominator == 0){
   14        Exception.message("Divison By Zero Undefined");
   15        throw Exception;
   16     }
   17     rational Temp;
   18     Temp.Numerator = Numerator * X.Denominator;
   19     Temp.Denominator = Denominator * X.Numerator;
   20     Temp.reduce();
   21     return Temp;
   22   }
   23   
   24   void rational::assign(long X, long Y)
   25   {
   26   
   27     if(Y == 0){
   28        Exception.message("Zero Is A Invalid Denominator");
   29        throw Exception;
   30     }
   31     Numerator = X;
   32     Denominator = Y;
   33   }
   34   
