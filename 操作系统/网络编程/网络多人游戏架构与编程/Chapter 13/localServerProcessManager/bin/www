#!/usr/bin/env node

"use strict";

/**
 * Module dependencies.
 */

var app = require('../app');
var api = require('../routes/api');
var http = require('http');


/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) 
{
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}
var port = normalizePort(process.env.PORT || '3000');

var args = process.argv, i;
for( i = 0; i < args.length; ++i )
{
  if( args[ i ] === "--vmuuid" )
  {
    ++i;
    api.setVMUUID( args[ i ] );
    port = 0;
  }
  else if( args[ i ] === "--vmurl" )
  {
    ++i;
    api.setVMMURL( args[ i ] );
  }
}

//get command line to figure out if we're being started from a VMM
//if we _are_ then use a random port, store the vmid
//and as soon as we're up, respond with our url so the server can map it


app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */




/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() 
{
  var addr = server.address();
  //first thing we pass back is json that has the port, since somebody might be listening for it
  api.setListenPort( addr.port );
}

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

