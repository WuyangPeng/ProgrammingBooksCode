<html>

<head>
<meta http-equiv="Content-Language" content="zh-cn">
<meta http-equiv="Content-Type" content="text/html; charset=gb2312">
<meta name="GENERATOR" content="Microsoft FrontPage 12.0">
<meta name="ProgId" content="FrontPage.Editor.Document">
<title>前言</title>
<link rel="stylesheet" type="text/css" href="../../../news.css">
<meta name="Microsoft Theme" content="nature 011">
<style type="text/css">
.style1 {
	font-family: FZKai-Z03;
	font-weight: bold;
}
.style6 {
	font-family: FZKai-Z03;
	font-weight: bold;
	color: #0000FF;
}
.style8 {
	font-family: FZKai-Z03;
	font-weight: bold;
	color: #0000FF;
	font-size: large;
}
.style10 {
	font-family: FZKai-Z03;
	text-align: center;
	font-size: medium;
}
.style11 {
	font-family: FZKai-Z03;
	text-indent: 0;
	text-align: left;
	margin-left: 12px;
	margin-right: 12px;
}
.style12 {
	font-family: FZKai-Z03;
	text-indent: 32px;
	text-align: left;
	margin-left: 12px;
	margin-right: 12px;
}
.style13 {
	font-family: FZKai-Z03;
	text-indent: 0;
	text-align: center;
	margin-left: 12px;
	margin-right: 12px;
}
</style>
</head>

<body background="../../../nabkgnd.jpg" bgcolor="#FFFFFF" text="#000000" link="#993333" vlink="#333399" alink="#006633">

<p align="center" class="style1"><font size="7" color="#0000FF">STL 扩展技术手册</font></p>
<p align="center" class="style8">Extended STL</p>

<p align="center" class="style6">
<img src="../../../anabull1.gif" border="0" width="15" height="15"><span class="style10"><strong>前言</strong></span><img src="../../../anabull1.gif" border="0" width="15" height="15"></p>

<p align="center"><img border="0" src="../../../anarule.gif" width="600" height="10"></p>
<ul>
	<li>
	<p class="style11">C++太复杂了。</p>
	</li>
	<li>
	<p class="style11">C++是惟一足够强大，能满足我需要的语言。</p>
	</li>
</ul>
<p class="style13"><img border="0" src="../../../anarule.gif" width="600" height="10"></p>
<p class="style12">C++语言本来就是通过扩展来提升功能。</p>
<p class="style13"><img border="0" src="../../../anarule.gif" width="600" height="10"></p>
<p class="style12">
抽象泄漏法则：“所有非平凡的抽象在某种程度上都是有漏洞的。”简单来说，这句话意味着，要想顺利使用非平凡的抽象，就必须对抽象下面的东西有所了解。</p>
<p class="style13"><img border="0" src="../../../anarule.gif" width="600" height="10"></p>
<p class="style12">优秀C++库的七个标志：效率、可发现性与透明性、表达力、健壮性、灵活性、模块性以及可移植性。</p>
<p class="style12">可发现性是指要想使用一个组件需要先花上多大功夫来理解它。</p>
<p class="style12">透明性是指要想修改一个软件需要先花上多大功夫来理解它。</p>
<p class="style12">表达力是指，用尽可能少的语句清晰地完成任务。</p>
<p class="style12">表达力强的代码有三大好处：一，提供了更高的生产率。二，促进了代码复用。三，使代码更少bug。</p>
<p class="style12">过多的抽象是透明性的敌人。</p>
<p class="style12">清晰原则、组合原则、模块性原则、分离原则都与健壮性密不可分。</p>
<p class="style12">最小意外原则和组合原则是说组件的工作方式应该符合用户的预期。</p>
<p class="style12">模块性不好往往导致膨胀且脆弱的单片机框架。</p>
<p align="center"><img border="0" src="../../../anarule.gif" width="600" height="10"></p>
<p class="style12">利用名字空间别名，你就既能使用名字空间层次结构，又能同时尽可能不影响到客户代码。</p>
<p align="center"><img border="0" src="../../../anarule.gif" width="600" height="10"></p>
<p class="style12">遍历迭代器区间时，尽量预先计算终点迭代器。使用索引时，尽量预先计算集合的大小。</p>
<p align="center"><img border="0" src="../../../anarule.gif" width="600" height="10"></p>
<p class="style12">在定义模板类时，即一开始就以上面短小的模板参数名字为基础，定义各个成员类型时，并且在后续代码中不再使用前者。</p>
<p align="center"><img border="0" src="../../../anarule.gif" width="600" height="10"></p>

<p align="center"><b><font size="6" face="隶书"><img border="0" src="../../../anabull1.gif" width="15" height="15"></font></b><font color="#800080" face="华文彩云" size="5"><b><a href="STL%20扩展技术手册.htm"><font color="#ff00ff">返回</font></a></b></font><b><font size="6" face="隶书"><img border="0" src="../../../anabull1.gif" width="15" height="15"></font></b></p>

</body>

</html>
