<html>

<head>
<meta http-equiv="Content-Language" content="zh-cn">
<meta http-equiv="Content-Type" content="text/html; charset=gb2312">
<meta name="GENERATOR" content="Microsoft FrontPage 12.0">
<meta name="ProgId" content="FrontPage.Editor.Document">
<title>第1章 标准模板库</title>
<link rel="stylesheet" type="text/css" href="../../../news.css">
<meta name="Microsoft Theme" content="nature 011">
<style type="text/css">
.style1 {
	font-family: FZKai-Z03;
	font-weight: bold;
}
.style6 {
	font-family: FZKai-Z03;
	font-weight: bold;
	color: #0000FF;
}
.style8 {
	font-family: FZKai-Z03;
	font-weight: bold;
	color: #0000FF;
	font-size: large;
}
.style10 {
	font-family: FZKai-Z03;
	text-align: center;
	font-size: medium;
}
.style12 {
	font-family: FZKai-Z03;
	text-indent: 32px;
	text-align: left;
	margin-left: 12px;
	margin-right: 12px;
}
.style14 {
	font-family: FZKai-Z03;
}
.style15 {
	font-family: FZKai-Z03;
	text-indent: 0;
	text-align: center;
	margin-left: 12px;
	margin-right: 12px;
}
</style>
</head>

<body background="../../../nabkgnd.jpg" bgcolor="#FFFFFF" text="#000000" link="#993333" vlink="#333399" alink="#006633">

<p align="center" class="style1"><font size="7" color="#0000FF">STL 扩展技术手册</font></p>
<p align="center" class="style8">Extended STL</p>

<p align="center" class="style6">
<img src="../../../anabull1.gif" border="0" width="15" height="15"><span class="style10"><strong>第1章 
标准模板库</strong></span><img src="../../../anabull1.gif" border="0" width="15" height="15"></p>

<p align="center"><img border="0" src="../../../anarule.gif" width="600" height="10"><span class="style14">
</span></p>
<p class="style15">
<strong>1.1 核心概念</strong></p>
<p class="style12">
STL的核心是六个基本概念：容器、迭代器、算法、函数对象、适配器和分配器。</p>
<p class="style12">
容器保存数据。</p>
<p class="style12">
迭代器是一种与数据结构无关的抽象 ，用于访问元素，以及遍历元素区间。</p>
<p class="style12">
通过使用迭代器，算法以泛型的方式工作于元素区间上，而不必关心元素的类型，以及元素容器本身的数据结构。</p>
<p class="style12">
函数对象定义了一系列通用操作，这些操作可用于算法所处理的元素上。</p>
<p class="style12">
适配器包括类适配器和实例适配器，它们通过改变被适配组件的接口，使迥异的类型变得符合已有的概念。</p>
<p class="style12">
分配器向容器提供关于内存分配和对象构造的抽象。</p>
<p align="center"><img border="0" src="../../../anarule.gif" width="600" height="10"></p>

<p class="style15">
<strong>1.2 容器</strong></p>
<p class="style15">
<strong>1.2.1 序列容器</strong></p>
<p class="style12">
在容器中部有大量插入及删除操作的情况下优先使用list容器，在容器头尾有大量插入及删除操作的情况下优先使用deque容器，而在其他情况下优先使用vector容器。</p>
<p class="style15">
<strong>1.2.2 关联容器</strong></p>
<p class="style15">
<strong>1.2.3 存储空间的连续性</strong></p>
<p class="style12">
在标准库中的容器中，只有vector保证其元素的存储空间是连续的。因此，它和C API兼容。</p>
<p class="style15">
<strong>1.2.4 交换</strong></p>
<p align="center"><img border="0" src="../../../anarule.gif" width="600" height="10"></p>

<p class="style15">
<strong>1.3 迭代器</strong></p>
<p class="style12">
根据迭代器对这些指针操作的支持程度，把迭代器概念提炼成五个类别：输入迭代器、输出迭代器、前向迭代器、双向迭代器以及随机访问迭代器。</p>
<p class="style15">
<strong>1.3.1 输入迭代器</strong></p>
<p class="style15">
<strong>1.3.2 输出迭代器</strong></p>
<p class="style15">
<strong>1.3.3 前向迭代器</strong></p>
<p class="style12">
前向迭代器类型是输入迭代器类型和输出迭代器类型的一个结合体。同时该类迭代器必须满足的一个要求是：能参与多次性算法。</p>
<p class="style15">
<strong>1.3.4 双向迭代器</strong></p>
<p class="style12">
双向迭代器类型满足了前向迭代器类型需要满足的所有要求，并增加了自减操作来支持反向遍历其底层区间。</p>
<p class="style15">
<strong>1.3.5 随机访问迭代器</strong></p>
<p class="style12">
随机访问迭代器类型是双向迭代器类型的超集，其加入了对指针算术运算的支持。</p>
<p class="style15">
<strong>1.3.6 成员选取运算符</strong></p>
<p class="style12">
使用解引用及点成员选择运算符（(*it).m）代替指针成员选择运算符（it-&gt;m）。</p>
<p class="style15">
<strong>1.3.7 预定义的迭代器适配器</strong></p>
<p align="center"><img border="0" src="../../../anarule.gif" width="600" height="10"></p>

<p class="style15">
<strong>1.4 算法</strong></p>
<p align="center"><img border="0" src="../../../anarule.gif" width="600" height="10"></p>

<p class="style15">
<strong>1.5 函数对象</strong></p>
<p align="center"><img border="0" src="../../../anarule.gif" width="600" height="10"></p>

<p class="style15">
<strong>1.6 分配器</strong></p>
<p class="style12">
分配器概念对提供内存管理服务的类型应满足的要求做了描述。</p>
<p class="style12">
这些服务包括：一些成员类型的定义；内存分配及回收的方法；用于对分配器所管理的对象的进行“原地”构造及析构的方法。</p>
<p class="style12">
分配器最主要的功能，是对容器的内存操作细节进行抽象，提供统一的、具有良好定义的接口，使这些组件能按不同的内存服务需求，用不同分配器特化。&nbsp;</p>
<p align="center"><img border="0" src="../../../anarule.gif" width="600" height="10"></p>

<p align="center"><b><font size="6" face="隶书"><img border="0" src="../../../anabull1.gif" width="15" height="15"></font></b><font color="#800080" face="华文彩云" size="5"><b><a href="STL%20扩展技术手册.htm"><font color="#ff00ff">返回</font></a></b></font><b><font size="6" face="隶书"><img border="0" src="../../../anabull1.gif" width="15" height="15"></font></b></p>

</body>

</html>
