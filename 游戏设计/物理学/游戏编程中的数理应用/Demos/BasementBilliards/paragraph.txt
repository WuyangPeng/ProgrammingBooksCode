Basement Billiards is a practical demonstration of 2D collision between circles.  While the program itself is written in OpenGL and encompasses 3D space, the world has been rotated so that the negative Z-axis is facing down (as opposed to the traditional where the negative Y-axis defines the down direction), allowing for all calculations to be done in the XY plane.   Conservation of momentum is also demonstrated through perfeclty elastic collision, such as those between the balls themselves, and inelastic collisions, such as those between a ball and the rails.  The entirety of the game code has been placed in a linear fashion in the function DrawGLScene which resides in OGL_Wrapper.cpp.  This has been done for ease of comprehension and each section of code which would ordinarily have been allocated to a seperate function is clearly marked by a large comment block.  All game collision calculations have been done within the section labeled "Shooting Code" and there are some basic ray to circle collision techniques in the section marked "Prediction code".  As this is a demo, there are no game mechanics implemented, such as players taking turns or re-racking the balls once they have all been pocketed.
  
The camera can be moved with the arrow keys and zoomed in and out with the A and Z keys, respectively.  The C key will toggle the focus of the camera from the center of the table to the current position of the cueball.  Left clicking on the cueball will begin the aiming phase of the game, at which point the Left and Right arrows will aim and the Up and Down arrows will decrease and increase the power of the shot.  Holding down the shift key will allow for more precise aiming.  At anytime, Left clicking on the large representation of the cueball in the upper-left corner will adjust the english placed on the shot.  Right clicking at any point will cancel the aiming phase without shooting while Left clicking will fire the shot.  Rinse and repeat as desired.  ESC will quit the game and F1 toggles between windowed and fullscreen, although fullscreen is recommended.