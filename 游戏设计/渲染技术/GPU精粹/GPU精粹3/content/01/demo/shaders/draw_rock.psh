#include "master.h"

struct v2fConnector {
  float4 POSITION             : POSITION;
  float4 wsCoordAmbo          : TEXCOORD;
  float3 wsNormal             : TEXCOORD1;
};

cbuffer ColorCB { 
  float3 color = 1;
}

cbuffer ShaderCB {
  float g_opacity = 1;
  float4 time;
  float3 g_worldEyePosIn;
};

cbuffer ChunkCB {
  float3 wsChunkPos = float3(0,0,0); //wsCoord of lower-left corner
  float  opacity = 1;
}

Texture3D noiseVol0;
Texture3D noiseVol1;
Texture3D noiseVol2;
Texture3D noiseVol3;
Texture3D packedNoiseVol0;
Texture3D packedNoiseVol1;
Texture3D packedNoiseVol2;
Texture3D packedNoiseVol3;
Texture2D AltColorRamp;
SamplerState LinearClamp;
SamplerState LinearRepeat;
SamplerState NearestClamp;
SamplerState NearestRepeat;

#include "LodCB.h"
#include "density.h"
#include "sliders.h"

#include "sampleNoise.h"

float4 main( v2fConnector v2f ) : SV_TARGET0
{ 
  float op = g_opacity*opacity;

  float4 wsCoordAmbo = v2f.wsCoordAmbo;
  float3 ws = wsCoordAmbo.xyz;
  
  float fog = saturate(length(g_worldEyePosIn.xyz - ws)*0.0033*fog_density.x);
  fog = pow(fog, 1.1);

  float3 noiseCoord1 = mul(octaveMat1, ws).xyz;
  float3 noiseCoord2 = mul(octaveMat2, ws).xyz;
  float3 noiseCoord3 = ws;//mul(octaveMat3, ws).xyz           ;

  float3 N = normalize(v2f.wsNormal);

  // this ultra-ultra-low-frequency noise sample will guide
  // our texturing.  It varies slowly over XZ, but quickly over Y
  // (up and down), so that the texturing can drastically vary 
  // with altitude (even at the same XZ coords).  
  float4 uulfRand = noiseVol2.Sample(LinearRepeat, noiseCoord3.zyx*0.00053*float3(1,10,1));
  
  // NOISE:
  #define NOISE_FREQ 1.7 * 0.32 * bump_freq.x
  float3 s = 0;
  s += (noiseVol3.Sample(LinearRepeat, noiseCoord1*(NOISE_FREQ)* 1*0.97)*2-1)*pow(0.75,0);
  s += (noiseVol2.Sample(LinearRepeat, noiseCoord2*(NOISE_FREQ)* 2*1.03)*2-1)*pow(0.75,1);
  s += (noiseVol1.Sample(LinearRepeat, noiseCoord3*(NOISE_FREQ)* 4*0.99)*2-1)*pow(0.75,2);
  //s += (noiseVol2.Sample(LinearRepeat, noiseCoord1*(NOISE_FREQ)* 8*1.03)*2-1)*pow(0.75,3);
  //s += (noiseVol3.Sample(LinearRepeat, noiseCoord2*(NOISE_FREQ)*16*0.98)*2-1)*pow(0.75,4);
  N = normalize(N + 0.25*s.xyz*0.5*bump_scale.x);
 
  // tip: if you want real lighting, bake it into a cube map with 16x16 faces (N*L -> diffuse) and 32x32 faces ((R*V)^N -> spec).
  float3 light;
  //light = 0.6 + 0.4*N;      // cheapo green-red lighting
  //light = 0.6 + 0.4*saturate(N*0.6 + 0.4);   // cheapo yellow lighting
  //light *= 0.7;
  light = (  saturate(0.05 + 0.95*dot(N, normalize(float3(0.7,0.3,0.7)))) * float3(1.05,0.97,0.5)
           + saturate(light_wrap.x + (1-light_wrap.x)*dot(N, normalize(float3(-0.8,0.8,-0.2)))) * float3(0.97,1.0,1.13)
          );
  light *= diffuse_light.xxx;

  float3 surface_color;// = float3(1.28, 0.8, 0.23);
  {
    // STRIATIONS
    // To get the surface color, we do a lookup into a 2D texture
    // where x ~ region and y ~ altitude.  The region we sample from
    // is guided by the ultra-ultra-low-frequency noise value (uulf_rand),
    // and the altitude is, of course, ws.y.
    float u = uulfRand.x*1.2-0.1;// + (uulfRand.y*0.2-0.1)*0.5*(1-abs(N.y));
    float v = ws.y*0.03 + 0.5;
    float3 alt_color  = AltColorRamp.Sample(LinearRepeat, float2(saturate(u),v)).xyz;
      // next take another sample, at higher frequency on Y,
      //  and let the normal's Y component vary with the region a bit.
      // Then blend that result with the original lookup result -
      //  it acts like a detail texture for our striations.
      u += uulfRand.w*0.2-0.1 + N.y*0.2;
      v *= -9.13;
      float3 alt_color2 = AltColorRamp.Sample(LinearRepeat, float2(saturate(u),v)).xyz;
      alt_color = lerp(alt_color, alt_color2, 0.4);
    // increase the contrast in some (most) areas:      
    alt_color = lerp(0.7, alt_color, 2.8*saturate(uulfRand.z*2-0.4));
    surface_color = alt_color;

    // GAMMA DE-CORRECT SURFACE COLOR PRIOR TO LIGHTING:
    // take sqrt here of any colors you sampled from color maps!
    // when an artist paints a color map or you take a photo, 
    // it is already gamma-adjusted to look good on
    // a very nonlinear monitor.  To do proper lighting, we
    // have to roughly take the square root of the color value first.
    // At the end of the lighting, we re-square it, so that the "real"
    // color looks good on the nonlinear monitor again.
    //surface_color = sqrt(surface_color);
  }
  
             
  // MARBLE EFFECT:
  float marble_str = 0;
  #if 0
    {
      #define MARBLE_FREQ  0.014*2
      float3 marble = 0;
      //marble += (noiseVol2.Sample(LinearRepeat, noiseCoord3*(MARBLE_FREQ)*0.25*0.93)*2-1)*pow(0.52,-2);
        marble += (noiseVol1.Sample(LinearRepeat, noiseCoord3*(MARBLE_FREQ)*0.5 *1.01)*2-1)*pow(0.52,-1);
        marble += (noiseVol3.Sample(LinearRepeat, noiseCoord1*(MARBLE_FREQ)*1   *0.97)*2-1)*pow(0.52,0);
        marble += (noiseVol2.Sample(LinearRepeat, noiseCoord2*(MARBLE_FREQ)*2   *1.03)*2-1)*pow(0.52,1);
        marble += (noiseVol1.Sample(LinearRepeat, noiseCoord3*(MARBLE_FREQ)*4   *0.99)*2-1)*pow(0.52,2);
        marble += (noiseVol2.Sample(LinearRepeat, noiseCoord1*(MARBLE_FREQ)*8   *1.05)*2-1)*pow(0.52,3);
      //marble += (noiseVol3.Sample(LinearRepeat, noiseCoord2*(MARBLE_FREQ)*16  *0.96)*2-1)*pow(0.52,4);
      //marble += (noiseVol1.Sample(LinearRepeat, noiseCoord3*(MARBLE_FREQ)*32  *1.01)*2-1)*pow(0.52,5);
      marble_str = cos( wsCoordAmbo.x*0.023 + wsCoordAmbo.y*0.1 + marble.y*0.25 )*0.5 + 0.5;
      marble_str = saturate(marble_str * 25 - 23.95);
      marble_str = pow(marble_str,4);
    }
    surface_color = lerp(surface_color, float3(1.6,1.3,1.0)*1.1, marble_str);
  #endif
                 
  float ambo = saturate(lerp(0.5,wsCoordAmbo.w,ambient_occlusion.x)*2.1-0.1);
  float3 lit_col = light*ambo * surface_color;
  
  // spec light (horribly faked)
  float3 E = normalize(g_worldEyePosIn.xyz - ws); //normalize(v2f.worldEyeVec.xyz);
  float3 R = normalize(2*N*dot(E,N) - E);
  float spec = saturate(R.y);
  lit_col += pow(spec,16) * lerp(0.12,0.03,marble_str) * float3(0.7,0.8,1.0) * saturate(ambo*1.5-0.5) * spec_light.xxx;
  
  float3 fogged_col = lerp(lit_col, FOG_COLOR, fog);

    // GAMMA RE-CORRECT PRIOR TO LIGHTING:
    // if you gamma-corrected the surface color @ top of shader,
    // then restore it here:
    //fogged_col *= fogged_col;

  return float4( fogged_col, op );
}
