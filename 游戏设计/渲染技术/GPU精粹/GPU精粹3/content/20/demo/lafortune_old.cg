//
// lafortune.cg
// Mark Colbert & Jaroslav Krivanek
//
// Copyright (c) 2006.
//

#include "common.cg"

float3x3 constructCoordFrame(float4 lobe, float3 u) {
	float3x3 smpl2Local;
	
	u = normalize(u);
	smpl2Local._m02_m12_m22 = u;

	// PBRT's approach	
//	if (abs(u.x) > abs(u.y))
//		smpl2Local._m00_m10_m20  = normalize(float3(-u.z,0,u.x));
//	else
		smpl2Local._m00_m10_m20 = normalize(float3(0,u.z,-u.y));
	
	
	// Using normal
	smpl2Local._m01_m11_m21 = cross(smpl2Local._m02_m12_m22, smpl2Local._m00_m10_m20);
	
	return smpl2Local;
	
}

/*
// samples one ray at a time
float3 sampleLobe(float4 lobe, float2 rand) {
	float4 angles;
	angles.x = pow(rand.x, 1/(0.8*lobe.w+1));		// cosine theta
	angles.y = sqrt(1.f-angles.x*angles.x);			// sine theta
	
	float phi = rand.y * 2 * 3.14159;				// phi
	angles.z = cos(phi);							// cos(phi)
	angles.w = sin(phi);							// sin(phi)
	
	return float3(angles.z*angles.y, angles.w*angles.y, angles.x);
}
*/

float3 u4[4];
void sampleLobe4(float4 lobe, float4 rand, float4 randcosphi, float4 randsinphi) {
	float4 cos4 = pow(rand, 1.0/(0.8*lobe.w+1.0));
	float4 sin4 = sqrt(1.f-cos4*cos4);
	
	float4 x = randcosphi*sin4;
	float4 y = randsinphi*sin4;
	
	u4[0] = float3(x[0], y[0], cos4[0]);
	u4[1] = float3(x[1], y[1], cos4[1]);
	u4[2] = float3(x[2], y[2], cos4[2]);
	u4[3] = float3(x[3], y[3], cos4[3]);
}

/*
float pdf(float4 lobe, float3 u) {
	float e = 0.8 * lobe.w;
	return (e+1)*pow(u.z, e)/((2 * 3.14159));
}
*/

float4 pdf4(float4 lobe, float4 uz) {
	float e = 0.8 * lobe.w;
	return (e+1)*pow(uz, e)/(6.28319);
}

float4 Lafortune(VSOUTPUT IN,
			 uniform float4 lobe,
			 uniform float3 specularAlbedo,
			 uniform float3 diffuseAlbedo,
			 uniform float3 eye,
			 uniform float2 keyGamma,
			 uniform sampler2D front : register(s0),
			 uniform sampler2D back  : register(s1)
			 ) 
{
	float3x3 WorldToLocal = float3x3(normalize(IN.binormal), normalize(IN.tangent), normalize(IN.normal));
	
	float3 eyeToVert = eye-IN.position;
	float3 v = normalize(mul(WorldToLocal, eyeToVert));
	float3 r = lobe.xyz*v;
	float magnitude = length(r);
	
	// construct the appropriate matrices	
	float3x3 LocalToWorld;
	LocalToWorld._m00_m10_m20 = WorldToLocal._m00_m01_m02;
	LocalToWorld._m01_m11_m21 = WorldToLocal._m10_m11_m12;
	LocalToWorld._m02_m12_m22 = WorldToLocal._m20_m21_m22;

	float3x3 SampleToLocal = constructCoordFrame(lobe, r);
	float3x3 SampleToWorld = mul(LocalToWorld, SampleToLocal);

	float norm = (lobe.w+2);
	
	float4 c=0;
	for (int i=0; i < sampleGroups; i++) {
		sampleLobe4(lobe,rand[i], randcos[i], randsin[i]);
		float4 cosine;
		// compute the z-component of the sample in the local coordinate frame from the
		// reflected coordinate frame, note the z-component = cos[theta] w.r.t. the normal
		cosine[0] = dot(SampleToLocal._m02_m12_m22, u4[0]);
		cosine[1] = dot(SampleToLocal._m02_m12_m22, u4[1]);
		cosine[2] = dot(SampleToLocal._m02_m12_m22, u4[2]);
		cosine[3] = dot(SampleToLocal._m02_m12_m22, u4[3]);
		cosine = max(cosine,float4(0,0,0,0));											
		
		// compute the incoming light vectors in world space
		float3 u_w0 = mul(SampleToWorld, u4[0]);
		float3 u_w1 = mul(SampleToWorld, u4[1]);
		float3 u_w2 = mul(SampleToWorld, u4[2]);
		float3 u_w3 = mul(SampleToWorld, u4[3]);
		
		// vectorize the z-components of the incoming light directions in 
		// the space of the reflection for BRDF and PDF evaluation
		float4 uz4 = float4(u4[0].z, u4[1].z, u4[2].z, u4[3].z);
		
		// compute the BRDF
		float4 f4 = norm*pow(magnitude*uz4,lobe.w);
		cosine *= f4;
		
		// get the PDFs
		float4 biasCmp = pdf4(lobe, uz4);
		
		// cosine is basically representing
		cosine /= biasCmp;
		
		// log2(256^2/(24*4))*0.5 = 4.70752
		// log2(512^2/(24*4))*0.5 = 5.70752
		// Log[2, 512^2*(2/2.4)^2/(24*4)]*0.5 = 5.44448
		//
		//biasCmp = max(float4(0,0,0,0),5.70752-log2(biasCmp)*0.5);
		float4 distortion = lerp(float4(1,1,1,1),float4(0.25,0.25,0.25,0.25),abs(float4(u_w0.z, u_w1.z, u_w2.z, u_w3.z)));
		biasCmp = 5.44448-log2(biasCmp*distortion)*0.5;
				
		if (cosine.x > 0) {			
			c.rgb += getSample(front,back,float4(u_w0,biasCmp[0]))*cosine[0];
			c.a++;
		}
		if (cosine.y > 0) {
			c.rgb += getSample(front,back,float4(u_w1,biasCmp[1]))*cosine[1];
			c.a++;
		}
		if (cosine.z > 0) {
			c.rgb += getSample(front,back,float4(u_w2,biasCmp[2]))*cosine[2];
			c.a++;
		}
		if (cosine.w > 0) {
			c.rgb += getSample(front,back,float4(u_w3,biasCmp[3]))*cosine[3];
			c.a++;
		}

	}
	float3 res = c.rgb/max(c.a,1);
	res = res*specularAlbedo+IN.diffuse*diffuseAlbedo;
	
	return float4(colorCorrect(res.rgb,keyGamma),1);
}

float4 main(VSOUTPUT IN,
			 uniform float4 lobe,
			 uniform float3 specularAlbedo,
			 uniform float3 diffuseAlbedo,
			 uniform float3 eye,
			 uniform float2 keyGamma,
			 uniform sampler2D front : register(s0),
			 uniform sampler2D back  : register(s1)) : COLOR0
{	
	return Lafortune(IN,lobe,specularAlbedo,diffuseAlbedo,eye,keyGamma,front,back);
}

float4 SVLafortune(VSOUTPUT IN,
				   uniform float3 specularAlbedo,
				   uniform float3 diffuseAlbedo,
			 	   uniform float3 eye,
				   uniform float2 keyGamma,
				   uniform sampler2D front : register(s0),
				   uniform sampler2D back  : register(s1),
				   uniform sampler2D svbrdf  : register(s2)
				   ) : COLOR0
{
	float4 data = tex2D(svbrdf, IN.texcoord);
	return Lafortune(IN, data.xxyz, float3(1,1,1), data.www, eye, keyGamma, front, back);
}
