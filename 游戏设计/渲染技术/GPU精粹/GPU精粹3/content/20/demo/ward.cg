//
// ward.cg
// Last Updated:		05.01.07
// 
// Mark Colbert & Jaroslav Krivanek
// colbert@cs.ucf.edu
//
// Copyright (c) 2007.
//
// The following code is freely distributed "as is" and comes with 
// no guarantees or required support by the authors.  Any use of 
// the code for commercial purposes requires explicit written consent 
// by the authors.
//

#include "common.cg"

float4 main	(VSOUTPUT IN,
			 uniform float2 alpha,
			 uniform float3 eye,
			 uniform float3 specularAlbedo,
			 uniform float3 diffuseAlbedo,
			 uniform float2 keyGamma,
			 uniform sampler2D front : register(s0),
			 uniform sampler2D back  : register(s1)
			 ) : COLOR0
{
	float3x3 WorldToLocal = float3x3(IN.binormal, IN.tangent, IN.normal);
	
	// viewing direction in local coords
	float3 v = mul(WorldToLocal, eye-IN.position);
	v.z = max(v.z,0.02);
	v = normalize(v);

	// construct the appropriate matrices	
	float3x3 LocalToWorld;
	LocalToWorld._m00_m10_m20 = WorldToLocal._m00_m01_m02;
	LocalToWorld._m01_m11_m21 = WorldToLocal._m10_m11_m12;
	LocalToWorld._m02_m12_m22 = WorldToLocal._m20_m21_m22;

	float4 c = 0;
	for (int i=0; i < samples; i++) {
		// see genWardSamples in sequencegen.cpp for how samples are pre-calculated
		float dot_hv = dot(smpls[i].xyz, v);
		float3 u = (2.0 * dot_hv) * smpls[i].xyz - v;
		float3 u_w = mul(LocalToWorld, u);

		float f = dot_hv * fs[i] * sqrt(u.z/v.z);

		// Level-of-detail approximation:
		// If we assume the dual-paraboloid has no distortion, we can futher simplify
		// the LOD computation as being the resolution of the map (I), divided by the spherical 
		// area of the dual paraboloid map (2Pi), divided by the number of samples (N)
		//
		// Log[2, I*I/N/(2Pi)]*0.5 + 1 = Log[2, 512*512/40/(2*Pi)]*0.5 + 1 = 5.01329 + 1
		float lod = 6.01329f - log2(smpls[i].w/dot_hv)*0.5;


		// conditional if to ensure that the sample is contributing a value to the integral;
		// this can be commented out for faster code at the cost of inaccuracy around
		// viewing directions tangent to the surface
		if (u.z > 0) {
			c.rgb += getSample(front,back, float4(u_w, lod))*f;
			c.a++;
		}
	}

	c.rgb = c.rgb/c.a*specularAlbedo + IN.diffuse*diffuseAlbedo;

	return float4(colorCorrect(c.rgb, keyGamma),1);
}
