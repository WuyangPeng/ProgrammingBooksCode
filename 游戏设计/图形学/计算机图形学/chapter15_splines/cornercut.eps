%!PS-Adobe-3.1 EPSF-3.0
%%Title: cornercut.eps
%%Creator: Adobe Illustrator(R) X
%%AI8_CreatorVersion: 10.0%AI9_PrintingDataBegin%%For: gleicher
%%CreationDate: 1/10/2005
%%BoundingBox: 0 0 355 99
%%HiResBoundingBox: 0 0 354.7911 98.8995
%%CropBox: 0 0 354.7911 98.8995
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI10"
%ADOEndClientInjection: DocumentHeader "AI10"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image (1.0 0)
%%+ procset Adobe_CoolType_Utility_MAKEOCF (1.13 0)
%%+ procset Adobe_CoolType_Core (2.12 0)
%%+ procset Adobe_AGM_Core (2.0 0)
%%+ procset Adobe_AGM_Utils (1.0 0)
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors:  Black
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%ADOBeginClientInjection: DocumentProlog Start "AI10"
%ADOEndClientInjection: DocumentProlog Start "AI10"
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright (C) 2000-2000 Adobe Systems, Inc.  All Rights Reserved.
systemdict /setpacking known
{
	currentpacking
	true setpacking
} if
userdict /Adobe_AGM_Utils 60 dict dup begin put
/bdf
{
	bind def
} bind def
/nd{
	null def
}bdf
/xdf
{
	exch def
}bdf
/ldf 
{
	load def
}bdf
/ddf
{
	put
}bdf	
/xddf
{
	3 -1 roll put
}bdf	
/xpt
{
	exch put
}bdf
/ndf
{ 
	
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/bdict
{
	mark
}bdf
/edict
{
	counttomark 2 idiv dup dict begin {def} repeat pop currentdict end
}def
	
/ps_level
	/languagelevel where{
		pop systemdict /languagelevel get exec
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr} stopped {
		-1
	}if
def
/makereadonlyarray
{
	/packedarray where{
		pop packedarray
	}{
		array astore readonly
	}ifelse
}bdf
/map_reserved_ink_name
{
	dup type /stringtype eq{
		dup /Red eq{
			pop (_Red_)
		}{
			dup /Green eq{
				pop (_Green_)
			}{
				dup /Blue eq{
					pop (_Blue_)
				}{
					dup /Cyan eq{
						pop (_Cyan_)
					}{
						dup /Magenta eq{
							pop (_Magenta_)
						}{
							dup /Yellow eq{
								pop (_Yellow_)
							}{
								dup /Black eq{
									pop (_Black_)
								}{
									dup () cvn eq{
										pop (Process)
									}if
								}ifelse
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def} repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash /AGMUTIL_GSTATE_do xdf /AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit /AGMUTIL_GSTATE_gy_xfer xdf cvlit /AGMUTIL_GSTATE_b_xfer xdf
		cvlit /AGMUTIL_GSTATE_g_xfer xdf cvlit /AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx {AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def} repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	
	AGMUTIL_GSTATE_ht /HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone /HalftoneType get AGMUTIL_GSTATE_ht /HalftoneType get ne
			{
			  mark AGMUTIL_GSTATE_ht {sethalftone} stopped cleartomark
			} if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		} ifelse
	
	AGMUTIL_GSTATE_flt setflat
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/rdline
{
	currentfile AGMUTIL_str256 readline pop
} bdf
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%) anchorsearch {pop} if
} bdf
/filter_cmyk
{	
	dup type /filetype ne{
		0 () /SubFileDecode filter
	}if
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length /AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	] cvx
} bdf
/AGMUTIL_imagefile nd
/AGMUTIL_imbuf nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	dup /DataSource {AGMUTIL_imagefile AGMUTIL_imbuf readstring pop} put
	exch
	load exec
}def
/write_image_file
{
	begin
	{ (AGMUTIL_imagefile) (w+) file } stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		Adobe_AGM_Utils/AGMUTIL_imbuf Width BitsPerComponent mul 7 add 8 idiv string ddf
		1 1 Height { 
			pop
			DataSource dup type /filetype eq{
				AGMUTIL_imbuf readstring pop
			}{
				exec
			} ifelse
			AGMUTIL_imagefile exch writestring
		}for
		true
	}ifelse
	end
}def
/close_image_file
{
	AGMUTIL_imagefile closefile (AGMUTIL_imagefile) deletefile
}def
/consumeimagedata
{
	begin
	currentdict /MultipleDataSources known not
		{/MultipleDataSources false def} if
	MultipleDataSources
		{
		1 dict begin
		/flushbuffer Width cvi string def
		1 1 Height cvi
			{
			pop
			0 1 DataSource length 1 sub
				{
				DataSource exch get
				dup type dup 
				/filetype eq
					{
					exch flushbuffer readstring pop pop
					}if
				/arraytype eq
					{
					exec pop
					}if
				}for
			}for
		end
		}
		{
		/DataSource load type dup 
		/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 div mul cvi string def
			1 1 Height { pop DataSource flushbuffer readstring pop pop} for
			end
			}if
		/arraytype eq
			{
			1 1 Height { pop DataSource pop } for
			}if
		}ifelse
	end
}bdf
/addprocs
{
     2{/exec load}repeat
     3 1 roll
     [ 5 1 roll ] bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
    currentdict 2 index known{
    	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
	    addprocs /TransferFunction xdf 
	    currentdict end def
		currentdict end sethalftone
	}{ 
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs /TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/doc_setup{
	Adobe_AGM_Utils begin
}bdf
/doc_trailer{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict /setpacking known
{
	setpacking
} if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright (C) 1997-1999 Adobe Systems, Inc.  All Rights Reserved.
systemdict /setpacking known
{
	currentpacking
	true setpacking
} if
userdict /Adobe_AGM_Core 205 dict dup begin put
/nd{
	null def
}bind def
/Adobe_AGM_Core_Id /Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_src256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen [currentscreen] cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_will_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSA_cache 0 dict def
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_pattern_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_ovp nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/knockout_unitsq nd
/AGMCORE_CRD_cache where{
	pop
}{
	/AGMCORE_CRD_cache 0 dict def
}ifelse
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer {readline} stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type /dicttype eq{
		dup /HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup /HalftoneType get 2 eq{
				/GraySpotFunction get
			}{ 
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
} def
/clp_npth
{
	clip newpath
} def
/eoclp_npth
{
	eoclip newpath
} def
/stkpath_clp_npth
{
	strokepath clip newpath
} def
/stk_n_clp_npth
{
	gsave stroke grestore clip newpath
} def
/npth_clp
{
	newpath clip
} def
/graphic_setup
{
	/AGMCORE_graphicsave save def
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[] 0 setdash
	10 setmiterlimit
	newpath
	false setoverprint
	false setstrokeadjust
	Adobe_AGM_Core/spot_alias get exec
	/Adobe_AGM_Image where {
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			get exec
		}{
			pop pop
		}ifelse
	} if
	100 dict begin
	/showpage {} def
	mark
} def
/graphic_cleanup
{
	cleartomark
	end
	AGMCORE_graphicsave restore
} def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
			
	clippath pathbbox newpath pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
		
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				} if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show ( ) show
			
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}
			{
				AGMCORE_str256 exch AGMCORE_tmp exch put
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			} ifelse
		} forall
} bdf
/doc_setup{
	Adobe_AGM_Core begin
	
	/AGMCORE_will_host_separate xdf
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	
	errordict /AGM_handleerror known not{
		errordict /AGM_handleerror errordict /handleerror get put
		errordict /handleerror {
			Adobe_AGM_Core begin
			$error /newerror get AGMCORE_cur_err null ne and{
				$error /newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error /newerror true put
			end
			errordict /AGM_handleerror get exec
			} bind put
		}if
		
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err /AGMCORE_bad_environ def} if
	
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product (Adobe PostScript Parser) ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	level2 not{
		/xput{
			dup load dup length exch maxlength eq{
				dup dup load dup
				length dup 0 eq {pop 1} if 2 mul dict copy def
			}if
			load begin
				def
 			end
		}def
	}{
		/xput{
			load 3 1 roll put
		}def
	}ifelse
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 8 def
											
		/AGMCORE_&gsave /gsave ldf
		/AGMCORE_&grestore /grestore ldf
		/AGMCORE_&grestoreall /grestoreall ldf
		/AGMCORE_&save /save ldf
		/AGMCORE_gdictcopy {
			begin
			{ def } forall
			end
		}def
		/AGMCORE_gput {
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget {
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave {
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge {limitcheck} if
			Adobe_AGM_Core exch
			/AGMCORE_gstackptr exch put
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore {
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt {1 add} if
			Adobe_AGM_Core exch
			/AGMCORE_gstackptr exch put
		}def
		/grestoreall {
			AGMCORE_&grestoreall
			Adobe_AGM_Core
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr put 
		}def
		/save {
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge {limitcheck} if
			Adobe_AGM_Core begin
				/AGMCORE_gstackptr exch def
				/AGMCORE_gstacksaveptr AGMCORE_gstackptr def
			end
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		0 1 AGMCORE_gstack length 1 sub {
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		} for
	}if
	/currentcmykcolor [0 0 0 0] AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace [/DeviceGray] AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent () AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	end
}def
/page_setup
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor /setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore /currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3 {
			3 index add neg dup 0 lt {
				pop 0
			} if
			3 1 roll
		} repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{
		pop
	}ndf
	/currentoverprint
	{
		false
	}ndf
	/AGMCORE_deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt def
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{ 
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/LeaveColorUnchanged eq
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where {pop}{
		/convert_spot_to_process
		{
			dup dup (None) eq exch (All) eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{ 
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						1 1 1 1 5 -1 roll findcmykcustomcolor 1 setcustomcolor
						currentgray 0 eq
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						Adobe_AGM_Core/AGMCORE_name xddf
						false
						currentpagedevice/OverrideSeparations known
							{
							currentpagedevice/OverrideSeparations get
								{
								/HqnSpots /ProcSet resourcestatus
									{
									pop pop pop true
									}if
								}if
							}if					
							{
							AGMCORE_name /HqnSpots /ProcSet findresource /TestSpot get exec not
							}{
							gsave
							[/Separation AGMCORE_name /DeviceGray {}]setcolorspace
							false
							currentpagedevice/SeparationColorNames 2 copy known
							{
								get
								{ AGMCORE_name eq or}forall
							not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		}def
	}ifelse
	/convert_to_process where {pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{ 
				true exch
					{
					convert_spot_to_process and
					}
				forall
				}{
				false exch
					{
					convert_spot_to_process or
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	AGMCORE_host_sep AGMCORE_will_host_separate not and {
		/AGMCORE_cur_err /AGMCORE_color_space_onhost_seps def
		AGMCORE_color_space_onhost_seps
	}if
	/AGMCORE_avoid_L2_sep_space  
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	AGMCORE_host_sep{
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			  	AGMCORE_magenta_plate{
			  		{4 3 roll pop pop pop}
			  	}{
			  		AGMCORE_yellow_plate{
			  			{4 2 roll pop pop pop}
			  		}{
			  			{4 1 roll pop pop pop}
			  		}ifelse
			  	}ifelse
			}ifelse
		def
		/clip AGMCORE_key_known not{
			Adobe_AGM_Core/AGMCORE_&clip /clip load put
			/clip
			{
				current_spot_alias{
					currentdict/InksUsed known{
						[
						InksUsed{
							dup map_alias{
								/Name get exch pop
							}if
						}forall
						]
						/InksUsed xdf
					}if
				}if
				AGMCORE_&clip
			}def
		}if
		/eoclip AGMCORE_key_known not{
			Adobe_AGM_Core/AGMCORE_&eoclip /eoclip load put
			/eoclip
			{
				current_spot_alias{
					currentdict/InksUsed known{
						[
						InksUsed{
							dup map_alias{
								/Name get exch pop
							}if
						}forall
						]
						/InksUsed xdf
					}if
				}if
				AGMCORE_&eoclip
			}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{ 
				4 {4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{ 
				Adobe_AGM_Core begin
					/AGMCORE_k xdf /AGMCORE_y xdf /AGMCORE_m xdf /AGMCORE_c xdf
				end
				[/Separation 4 -1 roll /DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation (All) /DeviceGray {}] setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4 {4 index mul 4 1 roll} repeat
		setcmykcolor pop
	}ndf
	
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	
	/map_index
	{
		1 index mul exch getinterval {255 div} forall
	}def
	
	level2{
		/mo /moveto ldf
		/li /lineto ldf
		/cv /curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		/level2ScreenFreq{
			begin
			60
			HalftoneType 1 eq{
				pop Frequency
			}if
			HalftoneType 2 eq{
				pop GrayFrequency
			}if
			HalftoneType 5 eq{
				pop Default level2ScreenFreq
			}if
			 end
		}def
		/currentScreenFreq{
			currenthalftone level2ScreenFreq
		}def
		level2 /setcolorspace AGMCORE_key_known not and{
		
			/AGMCORE_&&&setcolorspace /setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup /arraytype eq exch /packedarraytype eq or
				{
					dup 0 get dup /Separation eq
					{
						pop
						dup length array copy
						dup dup 1 get
						current_spot_alias
						{
							dup map_alias
							{
								begin
								/sep_colorspace_dict currentdict AGMCORE_gput
								pop pop	pop
									
								[ 
									/Separation Name 
									CSA map_csa
									dup /MappedCSA xdf 
									/sep_colorspace_proc load
								]
								dup Name
								end
							}if
						}if
						map_reserved_ink_name 1 exch put
					}{
						/DeviceN eq 
						{
							dup length array copy
							dup dup 1 get [ 
								exch {
									current_spot_alias{
										dup map_alias{
											/Name get exch pop
										}if
									}if
									map_reserved_ink_name
								} forall 
							] 1 exch put
						}if
					}ifelse
				}if
			}def
			/setcolorspace
			{
				dup type dup /arraytype eq exch /packedarraytype eq or
				{
					dup 0 get /Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				AGMCORE_&&&setcolorspace
			}def
		}if	
	}{
		
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1 [8 0 0 8 0 0] {<ffffffffffffffff>} image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/currentScreenFreq{
			currentscreen pop pop
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		} def
		
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		} def
		
		/n_color_components
		{
			dup type /arraytype eq{
				0 get
			}if
			dup /DeviceGray eq{
				pop 1
			}{
				/DeviceCMYK eq{
					4
				}{
					3
				}ifelse
			}ifelse
		} def
		
		/setcolor_devicecolor
		{
			dup type /arraytype eq{
				0 get
			}if
			dup /DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
	
		/setcolor
		{
			currentcolorspace 0 get
			dup /DeviceGray ne{
				dup /DeviceCMYK ne{
					dup /DeviceRGB ne{
						dup /Separation eq{
							pop
							currentcolorspace 3 get exec
							currentcolorspace 2 get
						}{
							dup /Indexed eq{
								pop
								currentcolorspace 3 get dup type /stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err /AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		} def
	}ifelse
	
	/sop /setoverprint ldf
	/lw /setlinewidth ldf
	/lc /setlinecap ldf
	/lj /setlinejoin ldf
	/ml /setmiterlimit ldf
	/dsh /setdash ldf
	/sadj /setstrokeadjust ldf
	/gry /setgray ldf
	/rgb /setrgbcolor ldf
	/cmyk /setcmykcolor ldf
	/sep /setsepcolor ldf
	/idx /setindexedcolor ldf
	/colr /setcolor ldf
	/csacrd /set_csa_crd ldf
	/sepcs /setsepcolorspace ldf
	/idxcs /setindexedcolorspace ldf
	/cp /closepath ldf
	/clp /clp_npth ldf
	/eclp /eoclp_npth ldf
	/spclp /stkpath_clp_npth ldf
	/f /fill ldf
	/ef /eofill ldf
	/s /stroke ldf
	/sclp /stk_n_clp_npth ldf
	/nclp /npth_clp ldf
	/gset /graphic_setup ldf
	/gcln /graphic_cleanup ldf
	
	currentdict{
		dup xcheck 1 index type dup /arraytype eq exch /packedarraytype eq or and {
			bind
		}if
		def
	}forall
}def
/page_trailer
{
	end
}def
/doc_trailer{
}def
systemdict /findcolorrendering known{
	/findcolorrendering systemdict /findcolorrendering get def
}if
systemdict /setcolorrendering known{
	/setcolorrendering systemdict /setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/current_ink
{
	dup length 0 eq{
		pop true
	}{
		Adobe_AGM_Core/ink_result false put
		{
			dup /ProcessCyan eq{
				AGMCORE_cyan_plate ink_result or Adobe_AGM_Core/ink_result xddf
			}{
				dup /ProcessMagenta eq{
					AGMCORE_magenta_plate ink_result or Adobe_AGM_Core/ink_result xddf
				}{
					dup /ProcessYellow eq{
						AGMCORE_yellow_plate ink_result or Adobe_AGM_Core/ink_result xddf
					}{
						dup /ProcessBlack eq{
							AGMCORE_black_plate ink_result or Adobe_AGM_Core/ink_result xddf
						}{
							dup /sep_colorspace_dict AGMCORE_gget dup null eq{
								pop false ink_result or Adobe_AGM_Core/ink_result xddf
							}{
								/Name get eq{
									1 setsepcolor
									currentgray 1 ne ink_result or Adobe_AGM_Core/ink_result xddf
								}{
									false ink_result or Adobe_AGM_Core/ink_result xddf
								}ifelse
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			pop 
		} forall
		ink_result
	}ifelse
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA map_csa setcolorspace_opt
		set_crd
	end
}
def
/setsepcolor
{ 
	
	/sep_colorspace_dict AGMCORE_gget begin
		dup /sep_tint exch AGMCORE_gput
		TintProc
	end
} def
/sep_colorspace_proc
{
	Adobe_AGM_Core/AGMCORE_tmp xddf
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2 {AGMCORE_tmp mul NComponents 1 roll} repeat
			LMax sub AGMCORE_tmp mul LMax add  NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add  NComponents 1 roll
				} repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
} def
/sep_colorspace_gray_proc
{
	Adobe_AGM_Core/AGMCORE_tmp xddf
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
} def
/sep_proc_name
{
	dup 0 get 
	dup /DeviceRGB eq exch /DeviceCMYK eq or level2 not and has_color not and{
		pop [/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
} def
/setsepcolorspace
{ 
	
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup /sep_colorspace_dict exch AGMCORE_gput
	begin
	/MappedCSA CSA map_csa def
	Adobe_AGM_Core/AGMCORE_sep_special Name dup () eq exch (All) eq or ddf
	
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{ 255 div } /exec cvx 3 -1 roll [ 4 1 roll load /exec cvx ] cvx 
		] setcolorspace_opt
		/TintProc {
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get /DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc [
				Components aload pop Name findcmykcustomcolor 
				/exch cvx /setcustomcolor cvx
			] cvx bdf
		}{
 			AGMCORE_host_sep Name (All) eq and{
 				/TintProc { 
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get /DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name () eq and{
					/TintProc [
						MappedCSA sep_proc_name exch 0 get /DeviceCMYK eq{
							cvx /setcmykcolor cvx
						}{
							cvx /setgray cvx
						}ifelse
					] cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup /DeviceCMYK eq exch /DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc [
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get /DeviceGray eq{
								1 /exch cvx /sub cvx 0 0 0 4 -1 /roll cvx
							}if
							/Name cvx /findcmykcustomcolor cvx /exch cvx
							
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
							}{
								Name inRip_spot_has_ink not
							}ifelse
							{
		 						/pop cvx 1
							}if
							/setcustomcolor cvx
						] cvx bdf
 					}{ 
						/TintProc /setcolor ldf
						
						[/Separation Name MappedCSA sep_proc_name load ] setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
} def
/setindexedcolorspace
{
	dup /indexed_colorspace_dict exch AGMCORE_gput
	begin
		/MappedCSA CSA map_csa def
		AGMCORE_host_sep level2 not and{
			0 0 0 0 setcmykcolor
		}{
			[/Indexed MappedCSA 
			level2 not has_color not and{
				dup 0 get dup /DeviceRGB eq exch /DeviceCMYK eq or{
					pop [/DeviceGray]
				}if
				HiVal GrayLookup
			}{
				HiVal 
				currentdict/RangeArray known{
					{ 
						/indexed_colorspace_dict AGMCORE_gget begin
						Lookup exch 
						dup HiVal gt{
							pop HiVal
						}if
						NComponents mul NComponents getinterval {} forall
						NComponents 1 sub -1 0{
							RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
							NComponents 1 roll
						}for
						end
					} bind
				}{
					Lookup
				}ifelse
			}ifelse
			] setcolorspace_opt
			
			set_crd
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget/Lookup get 4 3 -1 roll map_index setcmykcolor
	}{
		setcolor
	}ifelse
} def
/ignoreimagedata
{
	currentoverprint not{
		gsave 
		dup begin
		1 setgray
		0 0 ImageMatrix itransform 
		Width Height ImageMatrix idtransform rectfill 
		end
		grestore
		}if
	consumeimagedata
}def
/add_csa
{
	Adobe_AGM_Core begin
			/AGMCORE_CSA_cache xput
	end
}def
/map_csa
{
	dup type /nametype eq{
		Adobe_AGM_Core/AGMCORE_CSA_cache get exch get
	}if
}def
/add_csd
{
	Adobe_AGM_Core begin
		/AGMCORE_CSD_cache xput
	end
}def
/get_csd
{
	dup type /nametype eq{
		Adobe_AGM_Core/AGMCORE_CSD_cache get exch get
	}if
}def
/get_csd_by_name
{
	dup type dup /nametype eq exch /stringtype eq or{
		Adobe_AGM_Core begin
		/AGMCORE_CSD_Name xdf
		AGMCORE_CSD_cache
		{
			dup /Name get AGMCORE_CSD_Name eq
			{
				exch pop exit
			}{
				pop
			}ifelse
			pop
		}forall
		end
	}if
}def
/cachepattern_level2
{
	4 dict begin
	/comparebuffer exch def
	/holdbuffer exch def
	/readbuffer 1024 string def
	/LZWFilter holdbuffer /LZWEncode filter def
	{
		currentfile readbuffer readline not
			{pop exit}
		if
		dup LZWFilter exch writestring
		LZWFilter (\n) writestring
		comparebuffer eq
			{exit}
		if
	}loop
	LZWFilter closefile
	end
}def
/cachepattern_level3
{
	3 dict begin
	/comparebuffer exch def
	/readbuffer 1024 string def
	/DoEOL false def
	{ 
		DoEOL
			{
			(\n)
			/DoEOL false def
			}
			{
			currentfile readbuffer readline not
				{pop ()}
				{
				dup length 0 eq
					{ pop(\n)}
					{
					dup comparebuffer eq
						{pop ()}
						{/DoEOL true def}
					ifelse
					}
				ifelse
				}
			ifelse
			}
		ifelse
	} /ReusableStreamDecode filter
	end
}def
/add_pattern
{
	Adobe_AGM_Core begin
		/AGMCORE_pattern_cache xput
	end
}def
/get_pattern
{
	dup type /nametype eq{
		Adobe_AGM_Core/AGMCORE_pattern_cache get exch get
	}if
}def
/make_pattern
{
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index /XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index /YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
	makepattern
}def
/exec_file
	statusdict /currentfilenameextend known{
		{
			0 () /SubFileDecode filter cvx exec
		}
	}{
		
		{cvx exec}
	}ifelse
def
/set_pattern
{
	dup /PatternType get 1 eq{
		dup /PaintType get 1 eq{
			false sop [/DeviceGray] setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{
		pop
	}{
		setcolorspace
	}ifelse
}def
/updatecolorrendering
{
	
	currentcolorrendering/Intent known{
		currentcolorrendering/Intent get
	}{
		null
	}ifelse
	
	Intent ne{
		false  
		Intent
		AGMCORE_CRD_cache {
			exch pop 
			begin
				dup Intent eq{
					currentdict setcolorrendering_opt
					end 
					exch pop true exch	
					exit
				}if
			end
		} forall
		pop
		not{
			systemdict /findcolorrendering known{
				Intent findcolorrendering pop
				/ColorRendering findresource 
				dup length dict copy
				setcolorrendering_opt
			}if
		}if
	}if
} def
/add_crd
{
	AGMCORE_CRD_cache 3 1 roll put
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/CRD known{
			AGMCORE_CRD_cache CRD get dup null ne{
				setcolorrendering_opt
			}{
				pop
			}ifelse
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
	}if
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		begin
			/Intent Intent def
			currentdict
		end
		setcolorrendering
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp) flushinput
	}if
}def
/cpaint_gsep
{
	Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep) flushinput
	}if
}def
/cpaint_gend
{
	newpath
}def
/AGMCORE_ctm_stack bdict
	/push_ctm {
		stack length size le{
			stack dup length 2 mul array 
			dup /stack exch def
			copy pop
		}if
		stack size 3 -1 roll put
		/size size 1 add def
	}
	/pop_ctm {
		/size size 1 sub def
		size 0 lt{ 
			/size 0 def
		}if
		stack size get
	}
	/stack 1 array
	/size 0 
edict 
def
/save_ctm
{
	matrix currentmatrix AGMCORE_ctm_stack begin 
		push_ctm 
	end
}def
/restore_ctm
{
	AGMCORE_ctm_stack begin
		pop_ctm 
	end
	setmatrix
}def
/path_rez
{
	dup 0 ne{
		AGMCORE_deviceDPI exch div 
		dup 1 lt{
			pop 1
		}if
		setflat
	}{
		pop
	}ifelse 	
}def
/rdcmntline {
	currentfile AGMCORE_str256 readline pop
	(%) anchorsearch {pop} if
} def
/set_spot_alias_ary
{
	/AGMCORE_SpotAliasAry where{
		pop pop
	}{
		Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
		true set_spot_alias
	}ifelse
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry{
				dup/Name get AGMCORE_name eq{
					save exch
					/Adobe_AGM_Core currentdict def
					/CSD get get_csd
					exch restore
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	
	/AGMCORE_&setcustomcolor AGMCORE_key_known not {
		Adobe_AGM_Core/AGMCORE_&setcustomcolor /setcustomcolor load put
	} if
	/customcolor_tint 1 AGMCORE_gput
	
	Adobe_AGM_Core begin
	/setcustomcolor
	{
		
		dup /customcolor_tint exch AGMCORE_gput
		
		current_spot_alias{
			1 index 4 get map_alias{
				mark 3 1 roll
				setsepcolorspace
				counttomark 0 ne{
					setsepcolor
				}if
				pop
				pop
			}{
				AGMCORE_&setcustomcolor
			}ifelse
		}{
			AGMCORE_&setcustomcolor
		}ifelse
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd /setpagedevice load def
	/setpagedevice { get_gstate spd set_gstate } def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known{
			currentpagedevice/NegativePrint get Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						bdict /NegativePrint Adobe_AGM_Core/AGMCORE_inverting get edict setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
		gsave newpath clippath 1 /setseparationgray where{pop setseparationgray}{setgray}ifelse 
		fill grestore
	}if
	end
}def
/lw_save_restore_override {
	/md where {
		pop
		md begin
		currentdict /lw_initializepage known not
			{
			/lw_initializepage /initializepage load def
			/initializepage
				{
				lw_initializepage
				/initializepage {} def
				}def
			}if
		/pmSVsetup{} def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage /showpage load def}
		ifelse
		/showpage {orig_showpage gR} def
		end
	}if
}def
/pscript_showpage_override {
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage /restore load def
		/restore {exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where {
		pop
		md /initializepage known {
			md /initializepage {} put
		} if
		md /rC known {
			md /rC {4{pop}repeat} put
		} if
	}if
	
	Adobe_AGM_Core /AGMCORE_Default_CTM matrix currentmatrix put
}def
/driver_check_media_override
{
	Adobe_AGM_Core /AGMCORE_Default_CTM get matrix currentmatrix ne
	{
		Adobe_AGM_Core /AGMCORE_Default_CTM get setmatrix
	}if
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ (Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. ) def
	/AGMCORE_color_space_onhost_seps (This job contains colors that will not separate with on-host methods. ) def
	/AGMCORE_invalid_color_space (This job contains an invalid color space. ) def
end
end
systemdict /setpacking known
{
	setpacking
} if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.12 0
%%Copyright: Copyright 1997-2001 Adobe Systems Incorporated.  All Rights Reserved.
%%Version: 2.12 0
userdict/Adobe_CoolType_Core 60 dict dup begin put/Level2? systemdict
/languagelevel known dup{pop systemdict/languagelevel get 2 ge}if def Level2?
not{/currentglobal false def/setglobal/pop load def/gcheck{pop false}bind def
/currentpacking false def/setpacking/pop load def/SharedFontDirectory 0 dict
def}if currentpacking true setpacking/@_SaveStackLevels{Adobe_CoolType_Data
begin @opStackCountByLevel @opStackLevel 2 copy known not{2 copy 3 dict dup
/args 7 index 5 add array put put get}{get dup/args get dup length 3 index lt{
dup length 5 add array exch 1 index exch 0 exch putinterval 1 index exch/args
exch put}{pop}ifelse}ifelse begin count 2 sub 1 index lt{pop count 1 sub}if
dup/argCount exch def dup 0 gt{exch 1 index 2 add 1 roll args exch 0 exch
getinterval astore pop}{pop}ifelse count 1 sub/restCount exch def end
/@opStackLevel @opStackLevel 1 add def countdictstack 1 sub
@dictStackCountByLevel exch @dictStackLevel exch put/@dictStackLevel
@dictStackLevel 1 add def end}bind def/@_RestoreStackLevels{
Adobe_CoolType_Data begin/@opStackLevel @opStackLevel 1 sub def
@opStackCountByLevel @opStackLevel get begin count restCount sub dup 0 gt{{pop
}repeat}{pop}ifelse args 0 argCount getinterval{}forall end/@dictStackLevel
@dictStackLevel 1 sub def @dictStackCountByLevel @dictStackLevel get end
countdictstack exch sub dup 0 gt{{end}repeat}{pop}ifelse}bind def
/@_PopStackLevels{Adobe_CoolType_Data begin/@opStackLevel @opStackLevel 1 sub
def/@dictStackLevel @dictStackLevel 1 sub def end}bind def/@Raise{exch cvx
exch errordict exch get exec stop}bind def/@ReRaise{cvx $error/errorname get
errordict exch get exec stop}bind def/@Stopped{0 @#Stopped}bind def/@#Stopped{
@_SaveStackLevels stopped{@_RestoreStackLevels true}{@_PopStackLevels false}
ifelse}bind def/@Arg{Adobe_CoolType_Data begin @opStackCountByLevel
@opStackLevel 1 sub get/args get exch get end}bind def/doc_setup{
Adobe_CoolType_Core begin/mov/moveto load def/nfnt/newencodedfont load def
/mfnt/makefont load def/sfnt/setfont load def/ufnt/undefinefont load def/chp
/charpath load def/awsh/awidthshow load def/wsh/widthshow load def/ash/ashow
load def/sh/show load def end userdict/Adobe_CoolType_Data 6 dict dup begin
/AddWidths? false def/CC 0 def/charcode 2 string def/@opStackCountByLevel 32
dict def/@opStackLevel 0 def/@dictStackCountByLevel 32 dict def
/@dictStackLevel 0 def end put}bind def/doc_trailer{currentdict
Adobe_CoolType_Core eq{end}if}bind def/page_setup{Adobe_CoolType_Core begin}
bind def/page_trailer{end}bind def/unload{systemdict/languagelevel known{
systemdict/languagelevel get 2 ge{userdict/Adobe_CoolType_Core 2 copy known{
undef}{pop pop}ifelse}if}if}bind def/ndf{1 index where{pop pop pop}{dup xcheck
{bind}if def}ifelse}def/findfont dup systemdict begin userdict begin
/globaldict where{/globaldict get begin}if dup where pop exch get/globaldict
where{pop end}if end end def/systemfindfont/findfont load def/undefinefont{pop
}ndf/copyfont{currentglobal 3 1 roll 1 index gcheck setglobal dup null eq{0}{
dup length}ifelse 2 index length add 1 add dict begin exch{1 index/FID eq{pop
pop}{def}ifelse}forall dup null eq{pop}{{def}forall}ifelse currentdict end
exch setglobal}bind def/copyarray{currentglobal exch dup gcheck setglobal dup
length array copy exch setglobal}bind def/newencodedfont{currentglobal{
SharedFontDirectory 3 index known{SharedFontDirectory 3 index get
/FontReferenced known}{false}ifelse}{FontDirectory 3 index known{FontDirectory
3 index get/FontReferenced known}{SharedFontDirectory 3 index known{
SharedFontDirectory 3 index get/FontReferenced known}{false}ifelse}ifelse}
ifelse dup{3 index findfont/FontReferenced get 2 index findfont ne{pop false}
if}if{pop 1 index findfont/Encoding get exch 0 1 255{2 copy get 3 index 3 1
roll put}for pop pop pop}{findfont dup dup maxlength 2 add dict begin exch{1
index/FID ne{def}{pop pop}ifelse}forall/FontReferenced exch def/Encoding exch
dup length array copy def/FontName 1 index dup type/stringtype eq{cvn}if def
currentdict end definefont pop}ifelse}bind def/SetSubstituteStrategy{
$SubstituteFont begin dup type/dicttype ne{0 dict}if currentdict/$Strategies
known{exch $Strategies exch 2 copy known{get 2 copy maxlength exch maxlength
add dict begin{def}forall{def}forall currentdict dup/$Init known{dup/$Init get
exec}if end/$Strategy exch def}{pop pop pop}ifelse}{pop pop}ifelse end}bind
def/scff{$SubstituteFont begin dup type/stringtype eq{dup length exch}{null}
ifelse/$sname exch def/$slen exch def end{findfont}@Stopped{dup length dup 21
add string dup 4 3 roll 0 exch 128 string cvs putinterval exch 1 index exch
(_was-malformed-so-was)putinterval cvn{findfont}@Stopped{pop/Courier findfont}
if}if $SubstituteFont begin/$sname null def/$slen 0 def end}bind def
/isWidthsOnlyFont{dup/WidthsOnly known{pop pop true}{dup/FDepVector known{
/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}{dup/FDArray known{
/FDArray get{isWidthsOnlyFont dup{exit}if}forall}{pop}ifelse}ifelse}ifelse}
bind def/?set{$SubstituteFont begin/$substituteFound false def/$fontname 4
index def/$doSmartSub false def end 3 index findfont $SubstituteFont begin
$substituteFound{false}{dup/FontName known{dup/FontName get $fontname eq 1
index/DistillerFauxFont known not and/currentdistillerparams where{pop false 2
index isWidthsOnlyFont not and}if}{false}ifelse}ifelse exch pop/$doSmartSub
true def end{exch pop exch pop exch 2 dict dup/Found 3 index put exch findfont
exch}{exch exec exch findfont 2 dict dup/Downloaded 6 5 roll put}ifelse dup
/FontName 4 index put copyfont definefont pop}bind def/?str1 256 string def
/?str2 256 string def/?add{1 index type/integertype eq{exch true 4 2}{false 3
1}ifelse roll 1 index findfont dup/Widths known{Adobe_CoolType_Data/AddWidths?
true put gsave dup 1000 scalefont setfont}if/Downloaded known{exec exch{exch
?str2 cvs exch findfont/Downloaded get 1 dict begin/Downloaded 1 index def
?str1 cvs length ?str1 1 index 1 add 3 index putinterval exch length 1 add 1
index add ?str1 2 index(*)putinterval ?str1 0 2 index getinterval cvn findfont
?str1 3 index(+)putinterval 2 dict dup/FontName ?str1 0 6 index getinterval
cvn put dup/Downloaded Downloaded put end copyfont dup/FontName get exch
definefont pop pop pop}{pop}ifelse}{pop exch{findfont dup/Found get dup length
exch ?str1 cvs pop ?str1 1 index(+)putinterval ?str1 1 index 1 add 4 index
?str2 cvs putinterval ?str1 exch 0 exch 5 4 roll ?str2 cvs length 1 add add
getinterval cvn 1 dict exch 1 index exch/FontName exch put copyfont dup
/FontName get exch definefont pop}{pop}ifelse}ifelse Adobe_CoolType_Data
/AddWidths? get{grestore Adobe_CoolType_Data/AddWidths? false put}if}bind def
/?sh{currentfont/Downloaded known{exch}if pop}bind def/?chp{currentfont
/Downloaded known{pop}{false chp}ifelse}bind def/?mv{currentfont/Downloaded
known{moveto pop pop}{pop pop moveto}ifelse}bind def setpacking userdict
/$SubstituteFont 25 dict put 1 dict begin/SubstituteFont dup $error exch 2
copy known{get}{pop pop{pop/Courier}bind}ifelse def/currentdistillerparams
where dup{pop pop currentdistillerparams/CannotEmbedFontPolicy 2 copy known{
get/Error eq}{pop pop false}ifelse}if not{countdictstack array dictstack 0 get
begin userdict begin $SubstituteFont begin/$str 128 string def/$fontpat 128
string def/$slen 0 def/$sname null def/$match false def/$fontname null def
/$substituteFound false def/$doSmartSub true def/$depth 0 def/$fontname null
def/$italicangle 26.5 def/$dstack null def/$Strategies 10 dict dup begin
/$Type3Underprint{currentglobal exch false setglobal 11 dict begin/UseFont
exch $WMode 0 ne{dup length dict copy dup/WMode $WMode put/UseFont exch
definefont}if def/FontName $fontname dup type/stringtype eq{cvn}if def
/FontType 3 def/FontMatrix[.001 0 0 .001 0 0]def/Encoding 256 array dup 0 1
255{/.notdef put dup}for pop def/FontBBox[0 0 0 0]def/CCInfo 7 dict dup begin
/cc null def/x 0 def/y 0 def end def/BuildChar{exch begin CCInfo begin 1
string dup 0 3 index put exch pop/cc exch def UseFont 1000 scalefont setfont
cc stringwidth/y exch def/x exch def x y setcharwidth $SubstituteFont
/$Strategy get/$Underprint get exec 0 0 moveto cc show x y moveto end end}bind
def currentdict end exch setglobal}bind def/$GetaTint 2 dict dup begin
/$BuildFont{dup/WMode known{dup/WMode get}{0}ifelse/$WMode exch def $fontname
exch dup/FontName known{dup/FontName get dup type/stringtype eq{cvn}if}{
/unnamedfont}ifelse exch $deepcopyfont exch 1 index exch/FontBasedOn exch put
dup/FontName $fontname dup type/stringtype eq{cvn}if put definefont}bind def
/$Underprint{gsave x abs y abs gt{/y 1000 def}{/x -1000 def 500 120 translate}
ifelse Level2?{[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]setcolorspace}{0
setgray}ifelse 10 setlinewidth x .8 mul[7 3]{y mul 8 div 120 sub x 10 div exch
moveto 0 y 4 div neg rlineto dup 0 rlineto 0 y 4 div rlineto closepath gsave
Level2?{.2 setcolor}{.8 setgray}ifelse fill grestore stroke}forall pop
grestore}bind def end def/$Oblique 1 dict dup begin/$BuildFont{currentglobal
exch dup gcheck setglobal null copyfont begin/FontBasedOn currentdict/FontName
known{FontName dup type/stringtype eq{cvn}if}{/unnamedfont}ifelse def/FontName
$fontname dup type/stringtype eq{cvn}if def/currentdistillerparams where{pop}{
/FontInfo currentdict/FontInfo known{FontInfo null copyfont}{2 dict}ifelse dup
begin/ItalicAngle $italicangle def/FontMatrix FontMatrix[1 0 ItalicAngle dup
sin exch cos div 1 0 0]matrix concatmatrix readonly end 4 2 roll def def}
ifelse FontName currentdict end definefont exch setglobal}bind def end def
/$None 1 dict dup begin/$BuildFont{}bind def end def end def/$Oblique
SetSubstituteStrategy/$findfontByEnum{dup type/stringtype eq{cvn}if dup
/$fontname exch def $sname null eq{$str cvs dup length $slen sub $slen
getinterval}{pop $sname}ifelse $fontpat dup 0(fonts/*)putinterval exch 7 exch
putinterval/$match false def $SubstituteFont/$dstack countdictstack array
dictstack put mark{$fontpat 0 $slen 7 add getinterval{/$match exch def exit}
$str filenameforall}stopped{cleardictstack currentdict true $SubstituteFont
/$dstack get{exch{1 index eq{pop false}{true}ifelse}{begin false}ifelse}forall
pop}if cleartomark/$slen 0 def $match false ne{$match(fonts/)anchorsearch pop
pop cvn}{/Courier}ifelse}bind def/$ROS 1 dict dup begin/Adobe 4 dict dup begin
/Japan1[/Ryumin-Light/HeiseiMin-W3/GothicBBB-Medium/HeiseiKakuGo-W5
/HeiseiMaruGo-W4/Jun101-Light]def/Korea1[/HYSMyeongJo-Medium/HYGoThic-Medium]
def/GB1[/STSong-Light/STHeiti-Regular]def/CNS1[/MKai-Medium/MHei-Medium]def
end def end def/$cmapname null def/$deepcopyfont{dup/FontType get 0 eq{1 dict
dup/FontName/copied put copyfont begin/FDepVector FDepVector copyarray 0 1 2
index length 1 sub{2 copy get $deepcopyfont dup/FontName/copied put/copied
exch definefont 3 copy put pop pop}for def currentdict end}{$Strategies
/$Type3Underprint get exec}ifelse}bind def/$buildfontname{length $str 1 index
(-)putinterval 1 add $str 1 index $cmapname $fontpat cvs putinterval $cmapname
length add $str exch 0 exch getinterval cvn}bind def/$findfontByROS{/$fontname
exch def $ROS Registry 2 copy known{get Ordering 2 copy known{get}{pop pop[]}
ifelse}{pop pop[]}ifelse false exch{dup/CIDFont resourcestatus{pop pop save 1
index/CIDFont findresource dup/WidthsOnly known{dup/WidthsOnly get}{false}
ifelse exch pop exch restore{pop}{exch pop true exit}ifelse}{pop}ifelse}forall
{$str cvs $buildfontname}{false(*){save exch dup/CIDFont findresource dup
/WidthsOnly known{dup/WidthsOnly get not}{true}ifelse exch/CIDSystemInfo get
dup/Registry get Registry eq exch/Ordering get Ordering eq and and{exch
restore exch pop true exit}{pop restore}ifelse}$str/CIDFont resourceforall{
$buildfontname}{$fontname $findfontByEnum}ifelse}ifelse}bind def end end
currentdict/$error known currentdict/languagelevel known and dup{pop $error
/SubstituteFont known}if dup{$error}{Adobe_CoolType_Core}ifelse begin{
/SubstituteFont/CMap/Category resourcestatus{pop pop{$SubstituteFont begin
/$substituteFound true def dup length $slen gt $sname null ne or $slen 0 gt
and{$sname null eq{dup $str cvs dup length $slen sub $slen getinterval cvn}{
$sname}ifelse dup/CMap resourcestatus{pop pop dup/$cmapname exch def/CMap
findresource/CIDSystemInfo get{def}forall $findfontByROS}{128 string cvs dup
(-)search{3 1 roll search{3 1 roll pop{dup cvi}stopped{pop pop pop pop pop
$findfontByEnum}{4 2 roll pop pop exch length exch 2 index length 2 index sub
exch 1 sub -1 0{$str cvs dup length 4 index 0 4 index 4 3 roll add getinterval
exch 1 index exch 3 index exch putinterval dup/CMap resourcestatus{pop pop 4 1
roll pop pop pop dup/$cmapname exch def/CMap findresource/CIDSystemInfo get{
def}forall $findfontByROS true exit}{pop}ifelse}for dup type/booleantype eq{
pop}{pop pop $findfontByEnum}ifelse}ifelse}{pop pop pop $findfontByEnum}ifelse
}{pop pop $findfontByEnum}ifelse}ifelse}{//SubstituteFont exec}ifelse/$slen 0
def end}}{{$SubstituteFont begin/$substituteFound true def dup length $slen gt
$sname null ne or $slen 0 gt and{$findfontByEnum}{//SubstituteFont exec}ifelse
end}}ifelse bind readonly def Adobe_CoolType_Core/scfindfont/systemfindfont
load put}{/scfindfont{$SubstituteFont begin dup systemfindfont dup/FontName
known{dup/FontName get dup 3 index ne}{/noname true}ifelse dup{
/$origfontnamefound 2 index def/$origfontname 4 index def/$substituteFound
true def}if exch pop{$slen 0 gt $sname null ne 3 index length $slen gt or and{
pop dup $findfontByEnum findfont dup maxlength 1 add dict begin{1 index/FID eq
{pop pop}{def}ifelse}forall currentdict end definefont dup/FontName known{dup
/FontName get}{null}ifelse $origfontnamefound ne{$origfontname $str cvs print
( substitution revised, using )print dup/FontName known{dup/FontName get}{
(unspecified font)}ifelse $str cvs print(.
)print}if}{exch pop}ifelse}{exch pop}ifelse end}bind def}ifelse end end
Adobe_CoolType_Core/findfont{$SubstituteFont begin $depth 0 eq{/$fontname 1
index dup type/stringtype ne{$str cvs}if def/$substituteFound false def}if
/$depth $depth 1 add def end scfindfont $SubstituteFont begin/$depth $depth 1
sub def $substituteFound $depth 0 eq and $doSmartSub and{currentdict/$Strategy
known{$Strategy/$BuildFont get exec}if}if end}bind put}if end end
%%EndResource
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.13 0
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated.
%%Version: 1.13 0
systemdict/languagelevel known dup{currentglobal false setglobal}{false}ifelse
exch userdict/Adobe_CoolType_Utility 2 copy known{2 copy get dup maxlength 25
add dict copy}{25 dict}ifelse put Adobe_CoolType_Utility begin/ct_Level2? exch
def/ct_Clone? 1183615869 internaldict dup/CCRun known not exch/eCCRun known
not ct_Level2? and or def/ct_UseNativeCapability? systemdict/composefont known
def/ct_MakeOCF 35 dict def/ct_Vars 25 dict def/ct_GlyphDirProcs 6 dict def
/ct_BuildCharDict 15 dict dup begin/charcode 2 string def/dst_string 1500
string def/nullstring()def/usewidths? true def end def ct_Level2?{setglobal}{
pop}ifelse ct_GlyphDirProcs begin/GetGlyphDirectory{systemdict/languagelevel
known{pop/CIDFont findresource/GlyphDirectory get}{1 index/CIDFont
findresource/GlyphDirectory get dup type/dicttype eq{dup dup maxlength exch
length sub 2 index lt{dup length 2 index add dict copy 2 index/CIDFont
findresource/GlyphDirectory 2 index put}if}if exch pop exch pop}ifelse +}def/+
{systemdict/languagelevel known{currentglobal false setglobal 3 dict begin/vm
exch def}{1 dict begin}ifelse/$ exch def systemdict/languagelevel known{vm
setglobal/gvm currentglobal def $ gcheck setglobal}if ?{$ begin}if}def/?{$
type/dicttype eq}def/|{userdict/Adobe_CoolType_Data known{Adobe_CoolType_Data
/AddWidths? known{currentdict Adobe_CoolType_Data begin begin AddWidths?{
Adobe_CoolType_Data/CC 3 index put ?{def}{$ 3 1 roll put}ifelse CC charcode
exch 1 index 0 2 index 256 idiv put 1 index exch 1 exch 256 mod put
stringwidth 2 array astore currentfont/Widths get exch CC exch put}{?{def}{$ 3
1 roll put}ifelse}ifelse end end}{?{def}{$ 3 1 roll put}ifelse}ifelse}{?{def}{
$ 3 1 roll put}ifelse}ifelse}def/!{?{end}if systemdict/languagelevel known{gvm
setglobal}if end}def/:{string currentfile exch readstring pop}executeonly def
end ct_MakeOCF begin/ct_cHexEncoding[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09
/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C
/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F
/c30/c31/c32/c33/c34/c35/c36/c37/c38/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42
/c43/c44/c45/c46/c47/c48/c49/c4A/c4B/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55
/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68
/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B
/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E
/c8F/c90/c91/c92/c93/c94/c95/c96/c97/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1
/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4
/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7
/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA
/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED
/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_CID_STR_SIZE 8000 def/ct_mkocfStr100 100 string def/ct_defaultFontMtx[.001
0 0 .001 0 0]def/ct_1000Mtx[1000 0 0 1000 0 0]def/ct_raise{exch cvx exch
errordict exch get exec stop}bind def/ct_reraise{cvx $error/errorname get
(Error: )print dup(                    )cvs print errordict exch get exec stop
}bind def/ct_cvnsi{1 index add 1 sub 1 exch 0 4 1 roll{2 index exch get exch 8
bitshift add}for exch pop}bind def/ct_GetInterval{Adobe_CoolType_Utility
/ct_BuildCharDict get begin/dst_index 0 def dup dst_string length gt{dup
string/dst_string exch def}if 1 index ct_CID_STR_SIZE idiv/arrayIndex exch def
2 index arrayIndex get 2 index arrayIndex ct_CID_STR_SIZE mul sub{dup 3 index
add 2 index length le{2 index getinterval dst_string dst_index 2 index
putinterval length dst_index add/dst_index exch def exit}{1 index length 1
index sub dup 4 1 roll getinterval dst_string dst_index 2 index putinterval
pop dup dst_index add/dst_index exch def sub/arrayIndex arrayIndex 1 add def 2
index dup length arrayIndex gt{arrayIndex get}{pop exit}ifelse 0}ifelse}loop
pop pop pop dst_string 0 dst_index getinterval end}bind def ct_Level2?{
/ct_resourcestatus currentglobal mark true setglobal{/unknowninstancename
/Category resourcestatus}stopped{cleartomark setglobal true}{cleartomark
currentglobal not exch setglobal}ifelse{{mark 3 1 roll/Category findresource
begin ct_Vars/vm currentglobal put({ResourceStatus} stopped)0()/SubFileDecode
filter cvx exec{cleartomark false}{{3 2 roll pop true}{cleartomark false}
ifelse}ifelse ct_Vars/vm get setglobal end}}{{resourcestatus}}ifelse bind def
/CIDFont/Category ct_resourcestatus{pop pop}{currentglobal true setglobal
/Generic/Category findresource dup length dict copy dup/InstanceType/dicttype
put/CIDFont exch/Category defineresource pop setglobal}ifelse
ct_UseNativeCapability?{/CIDInit/ProcSet findresource begin 12 dict begin
begincmap/CIDSystemInfo 3 dict dup begin/Registry(Adobe)def/Ordering(Identity)
def/Supplement 0 def end def/CMapName/Identity-H def/CMapVersion 1 def
/CMapType 1 def 1 begincodespacerange<0000><ffff>endcodespacerange 1
begincidrange<0000><ffff>0 endcidrange endcmap CMapName currentdict/CMap
defineresource pop end end}if}{/ct_Category 2 dict begin/CIDFont 10 dict def
/ProcSet 2 dict def currentdict end def/defineresource{ct_Category 1 index 2
copy known{get dup dup maxlength exch length eq{dup length 10 add dict copy
ct_Category 2 index 2 index put}if 3 index 3 index put pop exch pop}{pop pop
/defineresource/undefined ct_raise}ifelse}bind def/findresource{ct_Category 1
index 2 copy known{get 2 index 2 copy known{get 3 1 roll pop pop}{pop pop
/findresource/undefinedresource ct_raise}ifelse}{pop pop/findresource
/undefined ct_raise}ifelse}bind def/resourcestatus{ct_Category 1 index 2 copy
known{get 2 index known exch pop exch pop{0 -1 true}{false}ifelse}{pop pop
/findresource/undefined ct_raise}ifelse}bind def/ct_resourcestatus
/resourcestatus load def}ifelse/ct_CIDInit 2 dict begin/ct_cidfont_stream_init
{{dup(Binary)eq{pop null currentfile ct_Level2?{{cid_BYTE_COUNT()
/SubFileDecode filter}stopped{pop pop pop}if}if/readstring load exit}if dup
(Hex)eq{pop currentfile ct_Level2?{{null exch/ASCIIHexDecode filter/readstring
}stopped{pop exch pop(>)exch/readhexstring}if}{(>)exch/readhexstring}ifelse
load exit}if/StartData/typecheck ct_raise}loop cid_BYTE_COUNT ct_CID_STR_SIZE
le{2 copy cid_BYTE_COUNT string exch exec pop 1 array dup 3 -1 roll 0 exch put
}{cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi dup array exch 2 sub 0 exch 1
exch{2 copy 5 index ct_CID_STR_SIZE string 6 index exec pop put pop}for 2
index cid_BYTE_COUNT ct_CID_STR_SIZE mod string 3 index exec pop 1 index exch
1 index length 1 sub exch put}ifelse cid_CIDFONT exch/GlyphData exch put 2
index null eq{pop pop pop}{pop/readstring load 1 string exch{3 copy exec pop
dup length 0 eq{pop pop pop pop pop true exit}if 4 index eq{pop pop pop pop
false exit}if}loop pop}ifelse}bind def/StartData{mark{currentdict dup/FDArray
get 0 get/FontMatrix get 0 get .001 eq{dup/CDevProc known not{/CDevProc
1183615869 internaldict/stdCDevProc 2 copy known{get}{pop pop{pop pop pop pop
pop 0 -1000 7 index 2 div 880}}ifelse def}if}{/CDevProc{pop pop pop pop pop 0
1 cid_temp/cid_CIDFONT get/FDArray get 0 get/FontMatrix get 0 get div 7 index
2 div 1 index .88 mul}def}ifelse/cid_temp 15 dict def cid_temp begin
/cid_CIDFONT exch def 3 copy pop dup/cid_BYTE_COUNT exch def 0 gt{
ct_cidfont_stream_init FDArray{/Private get dup/SubrMapOffset known{begin
/Subrs SubrCount array def Subrs SubrMapOffset SubrCount SDBytes ct_Level2?{
currentdict dup/SubrMapOffset undef dup/SubrCount undef/SDBytes undef}if end
/cid_SD_BYTES exch def/cid_SUBR_COUNT exch def/cid_SUBR_MAP_OFFSET exch def
/cid_SUBRS exch def cid_SUBR_COUNT 0 gt{GlyphData cid_SUBR_MAP_OFFSET
cid_SD_BYTES ct_GetInterval 0 cid_SD_BYTES ct_cvnsi 0 1 cid_SUBR_COUNT 1 sub{
exch 1 index 1 add cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add GlyphData exch
cid_SD_BYTES ct_GetInterval 0 cid_SD_BYTES ct_cvnsi cid_SUBRS 4 2 roll
GlyphData exch 4 index 1 index sub ct_GetInterval dup length string copy put}
for pop}if}{pop}ifelse}forall}if cleartomark pop pop end CIDFontName
currentdict/CIDFont defineresource pop end end}stopped{cleartomark/StartData
ct_reraise}if}bind def currentdict end def/ct_saveCIDInit{/CIDInit/ProcSet
ct_resourcestatus{true}{/CIDInitC/ProcSet ct_resourcestatus}ifelse{pop pop
/CIDInit/ProcSet findresource ct_UseNativeCapability?{pop null}{/CIDInit
ct_CIDInit/ProcSet defineresource pop}ifelse}{/CIDInit ct_CIDInit/ProcSet
defineresource pop null}ifelse ct_Vars exch/ct_oldCIDInit exch put}bind def
/ct_restoreCIDInit{ct_Vars/ct_oldCIDInit get dup null ne{/CIDInit exch/ProcSet
defineresource pop}{pop}ifelse}bind def/ct_BuildCharSetUp{1 index begin
CIDFont begin Adobe_CoolType_Utility/ct_BuildCharDict get begin/ct_dfCharCode
exch def/ct_dfDict exch def CIDFirstByte ct_dfCharCode add dup CIDCount ge{pop
0}if/cid exch def{GlyphDirectory cid 2 copy known{get}{pop pop nullstring}
ifelse dup length FDBytes sub 0 gt{dup FDBytes 0 ne{0 FDBytes ct_cvnsi}{pop 0}
ifelse/fdIndex exch def dup length FDBytes sub FDBytes exch getinterval
/charstring exch def exit}{pop cid 0 eq{/charstring nullstring def exit}if/cid
0 def}ifelse}loop}def/ct_SetCacheDevice{0 0 moveto dup stringwidth 3 -1 roll
true charpath pathbbox 0 -1000 7 index 2 div 880 setcachedevice2 0 0 moveto}
def/ct_CloneSetCacheProc{1 eq{stringwidth pop -2 div -880 0 -1000 setcharwidth
moveto}{usewidths?{currentfont/Widths get cid 2 copy known{get exch pop aload
pop}{pop pop stringwidth}ifelse}{stringwidth}ifelse setcharwidth 0 0 moveto}
ifelse}def/ct_Type3ShowCharString{ct_FDDict fdIndex 2 copy known{get}{
currentglobal 3 1 roll 1 index gcheck setglobal ct_Type1FontTemplate dup
maxlength dict copy begin FDArray fdIndex get dup/FontMatrix 2 copy known{get}
{pop pop ct_defaultFontMtx}ifelse/FontMatrix exch dup length array copy def
/Private get/Private exch def/Widths rootfont/Widths get def/CharStrings 1
dict dup/.notdef<d841272cf18f54fc13>dup length string copy put def currentdict
end/ct_Type1Font exch definefont dup 5 1 roll put setglobal}ifelse dup
/CharStrings get 1 index/Encoding get ct_dfCharCode get charstring put
rootfont/WMode 2 copy known{get}{pop pop 0}ifelse exch 1000 scalefont setfont
ct_str1 0 ct_dfCharCode put ct_str1 exch ct_dfSetCacheProc ct_SyntheticBold{
currentpoint ct_str1 show newpath moveto ct_str1 true charpath ct_StrokeWidth
setlinewidth stroke}{ct_str1 show}ifelse}def/ct_Type4ShowCharString{ct_dfDict
ct_dfCharCode charstring FDArray fdIndex get dup/FontMatrix get dup
ct_defaultFontMtx ct_matrixeq not{ct_1000Mtx matrix concatmatrix concat}{pop}
ifelse/Private get Adobe_CoolType_Utility/ct_Level2? get not{ct_dfDict/Private
3 -1 roll{put}1183615869 internaldict/superexec get exec}if 1183615869
internaldict Adobe_CoolType_Utility/ct_Level2? get{1 index}{3 index/Private
get mark 6 1 roll}ifelse dup/RunInt known{/RunInt get}{pop/CCRun}ifelse get
exec Adobe_CoolType_Utility/ct_Level2? get not{cleartomark}if}bind def
/ct_BuildCharIncremental{{Adobe_CoolType_Utility/ct_MakeOCF get begin
ct_BuildCharSetUp ct_ShowCharString}stopped{stop}if end end end end}bind def
/BaseFontNameStr(BF00)def/ct_Type1FontTemplate 14 dict begin/FontType 1 def
/FontMatrix[.001 0 0 .001 0 0]def/FontBBox[-250 -250 1250 1250]def/Encoding
ct_cHexEncoding def/PaintType 0 def currentdict end def/BaseFontTemplate 11
dict begin/FontMatrix[.001 0 0 .001 0 0]def/FontBBox[-250 -250 1250 1250]def
/Encoding ct_cHexEncoding def/BuildChar/ct_BuildCharIncremental load def
ct_Clone?{/FontType 3 def/ct_ShowCharString/ct_Type3ShowCharString load def
/ct_dfSetCacheProc/ct_CloneSetCacheProc load def/ct_SyntheticBold false def
/ct_StrokeWidth 1 def}{/FontType 4 def/Private 1 dict dup/lenIV 4 put def
/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def/PaintType 0 def
/ct_ShowCharString/ct_Type4ShowCharString load def}ifelse/ct_str1 1 string def
currentdict end def/BaseFontDictSize BaseFontTemplate length 5 add def
/ct_matrixeq{true 0 1 5{dup 4 index exch get exch 3 index exch get eq and dup
not{exit}if}for exch pop exch pop}bind def/ct_makeocf{15 dict begin exch/WMode
exch def exch/FontName exch def/FontType 0 def/FMapType 2 def/FontMatrix
matrix def/bfCount 1 index/CIDCount get 256 idiv 1 add dup 256 gt{pop 256}if
def/Encoding 256 array 0 1 bfCount 1 sub{2 copy dup put pop}for bfCount 1 255{
2 copy bfCount put pop}for def/FDepVector bfCount dup 256 lt{1 add}if array
def BaseFontTemplate BaseFontDictSize dict copy begin/CIDFont exch def CIDFont
/FontBBox known{CIDFont/FontBBox get/FontBBox exch def}if CIDFont/CDevProc
known{CIDFont/CDevProc get/CDevProc exch def}if currentdict end
BaseFontNameStr 3(0)putinterval 0 1 bfCount dup 256 eq{1 sub}if{FDepVector
exch 2 index BaseFontDictSize dict copy begin dup/CIDFirstByte exch 256 mul
def FontType 3 eq{/ct_FDDict 2 dict def}if currentdict end 1 index 16
BaseFontNameStr 2 2 getinterval cvrs pop BaseFontNameStr exch definefont put}
for ct_Clone?{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
if FontName currentdict end definefont ct_Clone?{gsave dup 1000 scalefont
setfont ct_BuildCharDict begin/usewidths? false def currentfont/Widths get
begin exch/CIDFont get/GlyphDirectory get{pop dup charcode exch 1 index 0 2
index 256 idiv put 1 index exch 1 exch 256 mod put stringwidth 2 array astore
def}forall end/usewidths? true def end grestore}{exch pop}ifelse}bind def
/ct_ComposeFont{ct_UseNativeCapability?{2 index/CMap ct_resourcestatus{pop pop
exch pop}{/CIDInit/ProcSet findresource begin 12 dict begin begincmap/CMapName
3 index def/CMapVersion 1 def/CMapType 1 def exch/WMode exch def/CIDSystemInfo
3 dict dup begin/Registry(Adobe)def/Ordering CMapName ct_mkocfStr100 cvs
(Adobe-)search{pop pop(-)search{dup length string copy exch pop exch pop}{pop
(Identity)}ifelse}{pop(Identity)}ifelse def/Supplement 0 def end def 1
begincodespacerange<0000><ffff>endcodespacerange 1 begincidrange<0000><ffff>0
endcidrange endcmap CMapName currentdict/CMap defineresource pop end end}
ifelse composefont}{3 2 roll pop 0 get/CIDFont findresource ct_makeocf}ifelse}
bind def/ct_MakeIdentity{ct_UseNativeCapability?{1 index/CMap
ct_resourcestatus{pop pop}{/CIDInit/ProcSet findresource begin 12 dict begin
begincmap/CMapName 2 index def/CMapVersion 1 def/CMapType 1 def/CIDSystemInfo
3 dict dup begin/Registry(Adobe)def/Ordering CMapName ct_mkocfStr100 cvs
(Adobe-)search{pop pop(-)search{dup length string copy exch pop exch pop}{pop
(Identity)}ifelse}{pop(Identity)}ifelse def/Supplement 0 def end def 1
begincodespacerange<0000><ffff>endcodespacerange 1 begincidrange<0000><ffff>0
endcidrange endcmap CMapName currentdict/CMap defineresource pop end end}
ifelse composefont}{exch pop 0 get/CIDFont findresource ct_makeocf}ifelse}bind
def currentdict readonly pop end end
%%EndResource
Adobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright (C) 2000-2000 Adobe Systems, Inc.  All Rights Reserved.
systemdict /setpacking known
{
	currentpacking
	true setpacking
} if
userdict /Adobe_AGM_Image 65 dict dup begin put
/Adobe_AGM_Image_Id /Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
%%don't initialize AGMIMG_&customcolorimage, it wrecks havoc in a nested environment
%%AGMIMG_ccimage_exists not {/AGMIMG_&customcolorimage nd} if 
/AGMIMG_&imagemask nd
/AGMIMG_mbuf () def
/AGMIMG_ybuf () def
/AGMIMG_kbuf () def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/idximg nd
/doc_setup
{ 
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage /colorimage ldf
	}if
	end
	end
}def
/page_setup
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists {/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				 }ifelse
			 }ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode [ Decode 1 get Decode 0 get] def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode [1 1] def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub} currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{ pop 1 } currenttransfer addprocs settransfer
		}def
	}ifelse
	/img /imageormask ldf
	/sepimg /sep_imageormask ldf
	/idximg /indexed_imageormask ldf
	currentdict{
		dup xcheck 1 index type dup /arraytype eq exch /packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/page_trailer
{
	end
}def
/doc_trailer
{
}def
/imageormask_sys
{
	begin
		save mark
		level2{
			currentdict
			Operator /imagemask eq{
				AGMIMG_&imagemask
			}{
				AGMIMG_&image
			}ifelse
		}{
			Width Height
			Operator /imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix /DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix /DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get
		dup /DeviceGray eq{
			pop AGMCORE_black_plate not
		}{
			/DeviceCMYK eq{
				AGMCORE_is_cmyk_sep not
			}if
		}ifelse
	}{
		false
	}ifelse
}def
/imageormask
{
	begin
		SkipImageProc not{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator /imagemask eq{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get /DeviceGray eq and{
						[/Separation /Black /DeviceGray {}] setcolorspace
						/Decode [ Decode 1 get Decode 0 get ] def
					}if
					image
				}ifelse
			}{
				Width Height
				Operator /imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix /DataSource load
					AGMCORE_host_sep{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
  	 						currentoverprint not{
  			 					1 AGMCORE_&setgray
  	 							knockout_image_samples
  			 					currentdict imageormask_sys
  			 				}{
  			 					currentdict ignoreimagedata
  			 				}ifelse
				 		}ifelse
					}{
						imagemask
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator /colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								MultipleDataSources{
									4 {pop} repeat
									/DataSource [
										DataSource 0 get /exec cvx
										DataSource 1 get /exec cvx
										DataSource 2 get /exec cvx
										DataSource 3 get /exec cvx
										/AGMCORE_get_ink_data cvx
									] cvx def
								}{
									/DataSource /DataSource load filter_cmyk 0 () /SubFileDecode filter def
								}ifelse
	
								/Decode [ Decode 0 get Decode 1 get ] def
								/MultipleDataSources false def
								/NComponents 1 def
								/Operator /image def
								AGMCORE_is_cmyk_sep{
									currentoverprint InksUsed current_ink not and{
										currentdict consumeimagedata
									}{
										invert_image_samples
						 				1 AGMCORE_&setgray
										currentdict imageormask_sys
									}ifelse
								}{
										currentdict ignoreimagedata
								}ifelse
							}{
									
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator /image eq{
							AGMCORE_host_sep{
								/DoImage true def
								HostSepColorImage{
									invert_image_samples
								}{
									AGMCORE_black_plate not{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}ifelse
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys} if
							}{
								image
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentoverprint InksUsed current_ink not and{
								}{
									currentcolorspace overprint_plate not{
										knockout_unitsq
									}if
								}ifelse
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	/MappedCSA CSA map_csa def
	begin
	SkipImageProc not{
		save mark 
	
		AGMCORE_avoid_L2_sep_space{
			/Decode [ Decode 0 get 255 mul Decode 1 get 255 mul ] def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get /DeviceCMYK eq and
		currentdict/Components known and 
		Name () ne and 
		Name (All) ne and 
		Operator /image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load /exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			} /exec cvx
			] cvx bind
			MappedCSA 0 get /DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
					AGMCORE_avoid_L2_sep_space not currentcolorspace 0 get /Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch 0 get exch load ] setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{ 
					currentdict
					Operator /imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentoverprint InksUsed current_ink not and{
						}{
							currentdict/ImageMatrix get concat
							knockout_unitsq
						}ifelse
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name (All) ne and{
 								level2{
	 								[ /Separation Name [/DeviceGray]
	 								{ 
	 									sep_colorspace_proc AGMCORE_get_ink_data
										1 exch sub
	 								} bind
									] AGMCORE_&setcolorspace
									/sep_tint AGMCORE_gget AGMCORE_&setcolor
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator /imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
							currentdict consumeimagedata 
 							currentoverprint not Name (All) eq or{
								gsave 
								knockout_unitsq
								grestore
		 					}if
 						}ifelse
		 			}ifelse
 				}{
					currentcolorspace 0 get /Separation ne{
						[/Separation Name MappedCSA sep_proc_name exch 0 get exch load ] setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentoverprint 
					MappedCSA 0 get /DeviceCMYK eq and 
					Name inRip_spot_has_ink not and 
					Name (All) ne and {
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}if
	end
	end
}def
/imageormask_l2_overprint
{
	
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{ 			
			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN [
				AGMIMG_c 0 ne {/Cyan} if
				AGMIMG_m 0 ne {/Magenta} if
				AGMIMG_y 0 ne {/Yellow} if
				AGMIMG_k 0 ne {/Black} if
				] /DeviceCMYK {}] setcolorspace
				
				AGMIMG_c 0 ne {AGMIMG_c} if
				AGMIMG_m 0 ne {AGMIMG_m} if
				AGMIMG_y 0 ne {AGMIMG_y} if
				AGMIMG_k 0 ne {AGMIMG_k} if
				setcolor			
			}{	
				/Decode [ Decode 0 get 255 mul Decode 1 get 255 mul ] def
				[/Indexed 				
					[
						/DeviceN [
							AGMIMG_c 0 ne {/Cyan} if
							AGMIMG_m 0 ne {/Magenta} if
							AGMIMG_y 0 ne {/Yellow} if
							AGMIMG_k 0 ne {/Black} if
						] 
						/DeviceCMYK {
							AGMIMG_k 0 eq {0} if
							AGMIMG_y 0 eq {0 exch} if
							AGMIMG_m 0 eq {0 3 1 roll} if
							AGMIMG_c 0 eq {0 4 1 roll} if						
						}
					]
					255
					{
						255 div 
		
						mark exch
						dup	dup dup
		
						
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
							
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
		
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
							
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				] setcolorspace
			}ifelse
			
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation /Black /DeviceGray {}] setcolorspace
			gsave
			/Black
			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {4 1 roll pop pop pop 1 exch sub} /exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation /Yellow /DeviceGray {}] setcolorspace
			gsave
			/Yellow
			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {4 2 roll pop pop pop 1 exch sub} /exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation /Magenta /DeviceGray {}] setcolorspace
			gsave
			/Magenta
			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {4 3 roll pop pop pop 1 exch sub} /exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation /Cyan /DeviceGray {}] setcolorspace
			gsave
			/Cyan 
			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {pop pop pop 1 exch sub} /exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		} if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
} def
/indexed_imageormask
{
	begin
		save mark 
	
 		currentdict
 		AGMCORE_host_sep{
 			
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget /CSA get map_csa overprint_plate not{
					knockout_unitsq
				}if
			}{
	 			AGMCORE_is_cmyk_sep{
					Operator /imagemask eq{
						imageormask_sys
					}{
						level2{
							indexed_image_lev2_sep
						}{
							indexed_image_lev1_sep
						}ifelse
					}ifelse
				}{
					currentoverprint not{
						knockout_image_samples
		 				imageormask_sys
		 			}{
		 				currentdict consumeimagedata
		 			}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				imageormask
			}{ 
				Operator /imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		
		currentcolorspace 
		dup 1 /DeviceGray put
		dup 3 [
			currentcolorspace 3 get 
			{
				exch 4 mul 4 getinterval {} forall
				AGMCORE_get_ink_data 255 div 1 exch sub
			} /exec cvx
		] cvx put
		setcolorspace
		
		currentdict 
		Operator /imagemask eq{
			AGMIMG_&imagemask
		}{
			AGMIMG_&image
		}ifelse
			
	end end
}def
/OPIimage
{
	dup type /dicttype ne{
		10 dict begin
			/DataSource xdf
			/ImageMatrix xdf
			/BitsPerComponent xdf
			/Height xdf
			/Width xdf
			/ImageType 1 def
			/Decode [0 1 def]
			currentdict
		end
	}if
	dup begin
		/NComponents 1 cdndf
		/MultipleDataSources false cdndf
		/SkipImageProc {false} cdndf
		/HostSepColorImage false cdndf
		/Decode [
				0 
				currentcolorspace 0 get /Indexed eq{
					2 BitsPerComponent exp 1 sub
				}{
					1
				}ifelse
		] cdndf
		/Operator /image cdndf
	end
	/sep_colorspace_dict AGMCORE_gget null eq{
		imageormask
	}{
		gsave
		dup begin invert_image_samples end
		sep_imageormask
		grestore
	}ifelse
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type /dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode [/customcolor_tint AGMCORE_gget 0] def
				/Operator /image def
				/HostSepColorImage false def
				/InksUsed [] def
				/SkipImageProc {false} def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		bdict
			/Name AGMIMG_colorAry 4 get
			/CSA [ /DeviceCMYK ] 
			/TintMethod /Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components [ AGMIMG_colorAry aload pop pop ] 
		edict
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage /customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		dup 4 get map_alias{
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
		}{
			AGMIMG_&customcolorimage
		}ifelse			
	}bdf
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					} if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf} true 4 colorimage	
		end
	} def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup /DeviceRGB eq exch /DeviceCMYK eq or has_color not and{
				
				{
					255 mul round cvi GrayLookup exch get
				} currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get /DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
						
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub} currenttransfer addprocs settransfer
						currentdict imageormask
					}{ 
						
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub} exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub} exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub} exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub} exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					
					MappedCSA 0 get /DeviceGray eq {
						{255 mul round cvi ColorLookup exch get 0 get} currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get /DeviceCMYK eq {
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub} exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub} exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub} exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub} exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{ 
							currentcolortransfer
							{pop 1} exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get} exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get} exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get} exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
					
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{ 
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			
			currentdict imageormask_sys
				
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup /DeviceRGB eq exch /DeviceCMYK eq or has_color not and{
				
				{HiVal mul round cvi GrayLookup exch get HiVal div} currenttransfer addprocs settransfer
				imageormask
			}{
				
				MappedCSA 0 get /DeviceGray eq {
					{HiVal mul round cvi Lookup exch get HiVal div} currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get /DeviceCMYK eq {
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi       Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{ 
						currentcolortransfer
						{pop 1} exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div} exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div} exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 	   Lookup exch get HiVal div} exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi       Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			
			currentdict imageormask_sys
				
		end end
	}def
}if
end
systemdict /setpacking known
{
	setpacking
} if
%%EndResource
%ADOBeginClientInjection: DocumentProlog End "AI10"
%ADOEndClientInjection: DocumentProlog End "AI10"
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
%ADOBeginClientInjection: DocumentSetup Start "AI10"
%ADOEndClientInjection: DocumentSetup Start "AI10"
Adobe_AGM_Utils begin
2 2010 true Adobe_AGM_Core/doc_setup get exec
Adobe_CoolType_Core/doc_setup get exec
Adobe_AGM_Image/doc_setup get exec
%ADOBeginClientInjection: DocumentSetup End "AI10"
%ADOEndClientInjection: DocumentSetup End "AI10"
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: cornercut.eps 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI10"
%ADOEndClientInjection: PageSetup Start "AI10"
Adobe_AGM_Utils begin
Adobe_AGM_Core/page_setup get exec
Adobe_CoolType_Core/page_setup get exec
Adobe_AGM_Image/page_setup get exec
%ADOBeginClientInjection: PageSetup End "AI10"
%ADOEndClientInjection: PageSetup End "AI10"
%%EndPageSetup
Adobe_AGM_Core/AGMCORE_save save ddf
1 -1 scale 0 -98.8994 translate
[1 0 0 1 0 0 ]  concat
mark
/0 
[/DeviceGray] add_csa
/CSA /0 
/1 
[/DeviceCMYK] add_csa
/CSA /1 
/2 
[/DeviceRGB] add_csa
/CSA /2 
cleartomark
800 path_rez
% page clip
gsave
newpath
gsave % PSGState
0 0 mo
0 98.8994 li
354.791 98.8994 li
354.791 0 li
clp
[1 0 0 1 0 0 ] concat
%ADOBeginClientInjection: BeginPageContent "AI10"
%ADOEndClientInjection: BeginPageContent "AI10"
.5 lw
0 lc
0 lj
4 ml
[] 0 dsh
true sadj
354.541 98.6494 mo
.25 98.6494 li
.25 .25 li
354.541 .25 li
354.541 98.6494 li
cp
false sop
0 0 0 1 cmyk
s
.75 lw
87.3955 86.4497 mo
15.3955 86.4497 li
15.3955 14.4497 li
87.3955 14.4497 li
87.3955 86.4497 li
cp
0 0 0 1 cmyk
s
119.238 14.4497 mo
155.238 14.4497 li
173.238 32.4497 li
173.238 68.4497 li
155.238 86.4497 li
119.238 86.4497 li
101.238 68.4497 li
101.238 32.4497 li
119.238 14.4497 li
cp
0 0 0 1 cmyk
s
0 0 0 1 cmyk
%ADOBeginSubsetFont: ArialMT Initial
11 dict begin
/FontName /ArialMT def
/FontMatrix [1 1000 div 0 0 1 1000 div 0 0 ] def
/Encoding  256 array 0 1 255 {1 index exch /.notdef put} for  def
/FontInfo 4 dict dup begin
/FSType 0 def
  /OrigFontType /TrueType def
end readonly def
/PaintType 0 def
/FontType 1 def
/FontBBox { 0 0 0 0 } def
currentdict
end

systemdict begin
dup /Private 7 dict dup begin
/BlueValues [-15 0 600 650] def
/MinFeature {16 16} def
/password 5839 def
/ND {def} def
/NP {put} def
/RD {string currentfile exch readhexstring pop} def
2 index /CharStrings 1674 dict dup begin
/.notdef 
<10bf317005b6d50bd3b903bc9f60e6e804630266f839393d56ae50a85fbe
ffec110deebde9f8a007323688ac> ND 
/c 
<10bf317040c2e74a5fc1787aadb34082a8ba9190bcda4e6309e8a2068a81
15bfd146d0733468211951e54d63b47a4bb20769a10fe2c7ab6af1003e92
c307e62580c4fc4fcb30f321670fe8ea6fc382860db4ab478167543744c2
7eee42bb190b50ff8a3de3702b096b5a0dbc687d9934d27330861f8f151c
46c0261f0a9972bb3873263c80a2161987b9c9> ND 
/t 
<10bf31706fd71d386b6c99b1d09bb1ad104eda9ab80d9f94a735d54116f5
9c58b6bda429b5392910a11f88b68881d1c7fdb07e40a06d14aa641d6e68
4a64544555b97e482a6c7cb4aa6fb83472e09b52ff42b290b85900fae15f
7904eb69f44b98bcd014> ND 
/u 
<10bf3170396d6c263643d7ba7494b52feb74e74b6fa68562a82a97fbbf5e
bed8907781d8ac84572229182c5c4b88be68c16550f8f2c56a1aafc9bc96
2dd9615eeaed29124f4b67a26151f4cd2e0ab6ff1b11f4d5d3a9d63d9288
f75e43ea4479033e77ce4d726627ff6cb14d9150> ND 
end
end
put
put
dup /FontName get exch definefont pop
end
/ArialMT findfont /Encoding get
dup 99 /c put
dup 116 /t put
dup 117 /u put
pop
%ADOEndSubsetFont
/ArialMT*1 
[
99{/.notdef}repeat /c 16{/.notdef}repeat /t /u 138{/.notdef}repeat
] /ArialMT nfnt
/ArialMT*1 findfont [5.65674 -5.65674 -5.65674 -5.65674 0 0 ]mfnt sfnt
24.7383 32.5498 mov
(cut) sh
186.738 50.4497 mo
186.738 41.4497 li
191.238 27.9497 li
200.238 18.9497 li
213.738 14.4497 li
222.738 14.4497 li
0 0 0 1 cmyk
s
222.738 14.4497 mo
231.738 14.4497 li
245.238 18.9497 li
254.238 27.9497 li
258.738 41.4497 li
258.738 50.4497 li
0 0 0 1 cmyk
s
258.738 50.4497 mo
258.738 59.4497 li
254.238 72.9497 li
245.238 81.9497 li
231.738 86.4497 li
222.738 86.4497 li
0 0 0 1 cmyk
s
222.738 86.4497 mo
213.738 86.4497 li
200.238 81.9497 li
191.238 72.9497 li
186.738 59.4497 li
186.738 50.4497 li
0 0 0 1 cmyk
s
272.197 50.4497 mo
272.197 45.9497 li
273.322 38.0747 li
275.572 31.3247 li
278.947 25.6997 li
283.447 21.1997 li
289.072 17.8247 li
295.822 15.5747 li
303.697 14.4497 li
308.197 14.4497 li
0 0 0 1 cmyk
s
308.238 14.4497 mo
312.738 14.4497 li
320.613 15.5747 li
327.363 17.8247 li
332.988 21.1997 li
337.488 25.6997 li
340.863 31.3247 li
343.113 38.0747 li
344.238 45.9497 li
344.238 50.4497 li
0 0 0 1 cmyk
s
344.238 50.4497 mo
344.238 54.9497 li
343.113 62.8247 li
340.863 69.5747 li
337.488 75.1997 li
332.988 79.6997 li
327.363 83.0747 li
320.613 85.3247 li
312.738 86.4497 li
308.238 86.4497 li
0 0 0 1 cmyk
s
308.197 86.4497 mo
303.697 86.4497 li
295.822 85.3247 li
289.072 83.0747 li
283.447 79.6997 li
278.947 75.1997 li
275.572 69.5747 li
273.322 62.8247 li
272.197 54.9497 li
272.197 50.4497 li
0 0 0 1 cmyk
s
.25 lw
[4 4 ] 0 dsh
90.5718 43.1167 mo
130.772 2.91699 li
0 0 0 1 cmyk
s
2.63916 46.3159 mo
42.8384 6.11621 li
0 0 0 1 cmyk
s
%ADOBeginClientInjection: EndPageContent "AI10"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI10"
% page clip
grestore
grestore % PSGState
Adobe_AGM_Core/AGMCORE_save get restore
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI10"
%ADOEndClientInjection: PageTrailer Start "AI10"
Adobe_AGM_Image/page_trailer get exec
Adobe_CoolType_Core/page_trailer get exec
Adobe_AGM_Core/page_trailer get exec
currentdict Adobe_AGM_Utils eq {end} if
%ADOBeginClientInjection: PageTrailer End "AI10"
%ADOEndClientInjection: PageTrailer End "AI10"
%%Trailer
%ADOBeginClientInjection: DocumentTrailer Start "AI10"
%ADOEndClientInjection: DocumentTrailer Start "AI10"
Adobe_AGM_Image/doc_trailer get exec
Adobe_CoolType_Core/doc_trailer get exec
Adobe_AGM_Core/doc_trailer get exec
%ADOBeginClientInjection: DocumentTrailer End "AI10"
%ADOEndClientInjection: DocumentTrailer End "AI10"
%%EOF
%AI9_PrintingDataEnd

userdict /AI9_read_buffer 256 string put
userdict begin
/ai9_skip_data
{
	mark
	{
		currentfile AI9_read_buffer { readline } stopped
		{
		}
		{
			not
			{
				exit
			} if
			(%AI9_PrivateDataEnd) eq
			{
				exit
			} if
		} ifelse
	} loop
	cleartomark
} def
end
userdict /ai9_skip_data get exec
%AI9_PrivateDataBegin
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(R) 10.0
%%AI8_CreatorVersion: 10.0
%%For: (gleicher) (uw)
%%Title: (cornercut.eps)
%%CreationDate: 1/10/2005 12:16 PM
%AI9_DataStream
%Gb"-6=c[+6OY6Dk"R84iM[&H.;d$gf_I.n!qs(1,$DPJn*2,YDZ]\jYZBhXfc"Zg"+8]k9914o,W!;Yl)%r?GiQ%!4B'-Q!07Ip2
%lM\n=cX2-Bn`o"]Fbj`Ob)D*2b+[,Uk`]BOikI_X_u8><UU/HZ8'A5>6_WZ</C`26R;c3M*-gu<e_U*=pFkG&rlqLUqmUJs?Tl&J
%oCc7@Mhg'!^T;q"H1g_K_9_"$^O>nE+4n8TpAXaNLZeEXN`qtQ\peqrr8IY;eXIAamge_90JJ!u0DX)OgMcM0Fl:"Lrp,np&+?.H
%s.8(qs6S>jkkDRa9E10iI!5PX*R0W$_,J)Gm2*N?O.*l\q;n7KE<"2S\*r2/^3fkEjhLd.>+bi+aa67aIsih3:k/&[0BpNpec"+/
%miUE.J.>4&qX`N-*RMe*EVT/`+E.(TFpR`4TW\e'ni5jVp@C9'J+bH8r@ZH=aG1u.q>Kccn;\bg><%j>5::mO\:[>5rfRMCAc1Te
%Mq8KKn*V&&EbK+YOCuPIQbTXOD3&)J393\f;%C98rGb,_q[_$As8&e6J%raHG5k$UpAE1Ic^t/d["Bs-6_?rdIsD!4s5m*1T*#g=
%^Se11DdPZ>J,%P;/W\dOh"#'[-H6#9(4WuFo?I4q6L.\`n$25o3fII]rU0WBVmkR>^JS7O90RcPs725S53ILF<8*jt8@+:!bX5/l
%p4]q&*bJVpSG%cZnZ[/jYnOl"XS_Y7o5C58r"UlH+B&40pU@?phu)I4mbP&f'>0CM/,+;Bn%Y]mb;53#4.sht7/l@.c^ue6g_90J
%rlnA+)ls!7qnLF<f'D/(qj33>f.Wb%^3YA/!Km<>Jh[0MOi,);DtMZC$i`\7IK*JpQ2uJ[cC9+RrllDIj>G=H%I3HNc27CUgO&hs
%k`[Add"cOX5MU`_1k']FlJ:D`]O-d!MX$i/?a1ZD4hl>fGkV.0i@D:2+49k-[kI.[hWqNFY8.&Wmp=lb*\W'$hS+@.r8/$7VBlMT
%MnKM,YJ:#$WqlJF4.6CkGUb6-e\-JTkIg6[Zb&0B?b`?W(=33s!a^%p>R@19)uc2;j8.ln.ra*-WpOd&k0<:;4>eJA=qCXQG]H8(
%6Z!@;hoi,$oC+WBP1QmDCC^r2-P+O1hS4D[G^+B.9S"i,:L:^1YQN`&T$Y4<Tbm0i5<QRUp@\r]s*m+[p?J^U07Wrin=DYrX#FAe
%O$DF6H$d($pUb>S:VQblq7DD`?[_\:?2ug`+8ZoDo8e6SgOK*j?PB4q4g95kiH@6.@p$=S&+g!jk2H=$2t+IDr:2fH[/*D@iCa3\
%,ijA5gcg's:]@;$s5j6lor.[^KAX@gr>k@GVIB1Bd3HtE^:SmdiV#RXc\q8qli#Rb)T:Id"7`._^CN!n4%B,XW;D6f!e94[s$d96
%bBo"g&jb@0hL0bNN&^(XrS]u?`IH6L!DM>Lp%^CIMuPn%s8)`RmJYGe5N<J<rV$,<^V>-faaYAGHN$gIj94$3jr=Z5DY3!K=3$u"
%!Mf\.]`7<`>AQfI`4>0l"oUk;:sXnjS([!N)A3"C2lGFK&EjN>LY.IB&r3;*@\KtO+(?QPU-A)(e/J?TIqI\uBT`Ul+q,V)NU@pd
%e9jf@cFc("7@!mG5NO;CB)X5!E[(U`n0%9me,a\Q48kd^UHk`IN3>nn2"aXk9&^AhRaaS#^XL)WfQIPK5s&'B.HbuT2!@=JikIUl
%`d^Hen21kd+QBRc70lt)*bYnWdP=Y.Z/CC0UVdK'=AJdde/1r1@>/BcA*Ejjb#=4`I_[.&_T'N4a+#hJ')56R'29Qh*tPm.`cPCa
%8HVRA<a,J^ZFhFRH=Og:$-%QtZuN[HeEH>Ze_>H(ir;slqYL$*_]Bub%6K56#m(/>,1.=U?Ra?OkbP%d*^%J698PeX%&"Do5`-\b
%"l'C9D&Qf^o&$H3dE^*^dK$LLX$:C^5LEm3B;^H]5A@uoel)LQTA/Wam:bS2?e@UAM\^0V[P\K#a@6;K)(cVCQ;BI[FFRs?'(=Xd
%9R5P\^l?9^-(;e__X<FOr([G[A-rLg_'*Ar2-mjV?cIjC^Ctb)'4jK1I3F+(PY9[,R7d3<Bs&aIC'B;ZVG,!V#Xj@?Xn"A]_U-\a
%g'6b(&aI^E-2Ln\2s%jULb1m!IMbE#5QW,V]HGY/Z/I!#<faucs(Qmni;\CGn4u7+[f-ZPQ+nNF-)#2"+sp15oGB/#NJh+:,Y)=8
%+q_m!r$EN\r?O<055)m())0MTm>0.j'QVA^9Hl#]Ba>#RBch/NJ*\fDdiTNXbm2JenDlh.`\M8F^K][sX0CQg7LTMYjmrmSqaWf5
%%qquh&;C$"!_iY>H;%:B6O$'85=Gt%NV,$#rBGr3@S7T\BpFMBNo!4>EasHtdb?fu/WJYbk^!)25B(CecBlfdg1BO4VamB+?R.T#
%M+FPDb.!JcYQN4NeQQ?l$($*Bq=`.Ae+:\r]mo_Cr[n*JE)6')PAf<>0T/qYErH!^.pB3^C@TjAg\W@*PKNIoV*LZ$-*[9%LZbku
%4stXQag9`?^:A`gs.S>Bgc^-Sg="R`p](5GFG"ep^3]hQp>rV.TAA>;H1gaM2^GqRh[fHg^O,P92:4mY^&ao+pi"S;^4#1JjJMW>
%Ier=m6/Oi!27\/4m?@D`r1A0Y'])%tU$12.Mq^1dZp/iJH`9.*lMeo3=772$?%,O*31kTgm.pT!RPBY<De\_aW0Ja)%GZA%?eU^I
%hRr^.rQDB^hgh2V-eA8'6n.Npc*OVB?T`g0]0kp>4X#O>q;(E?ah^cerU0?fpFi/O@8375I.lX?m2^rS7b!=I,g"Gtn)$<SpX`Jb
%hp\;_J+_sG]5QT^htsn;]D(d^T=fE0_sIcJSjAb,hX9g(&II;l:Tn(W:XFVugqLIKs1fit"$ce>qqF(%%0$1up>Ke4LB??G91i"*
%)'>Naa;`H,]6Q$pHg\4)`rr!(?U)*N+[!<ta.HW._pB)uO'hd*^Qqp8Q<4!1e`PK?k5*oC:O^>;Ui&A]#<nCX5$^>@WJp(?J*t;Q
%LNh'O5CE4de$fk'M*K[HrZi$SC%^tfr2D@1a$5%Ml4%1FrL4UVZ!TZ,I<$hk^:!dlY+E@m=5S<O\%E]ipJ:3n3UZ#!Hg1KXH'l1S
%pZJ,@X67prq<A^@^!/\la%L^:.r#"*`q4$=^aj9]cTQXSiAgnD)"6S6p[Y3US+4/cB>0S%hsk0'BAc:Pr:*rA"SI7lq8]u5?ek\H
%n2it4[3BH]m8o&r9riC_ps2_Ejr1FjD#X504>KCf9_"1>HiK6$#<#.mk?lZlISWW7NiD/bYAoq7]Nhr@k;V$%.,hpOX53f$pn-G-
%Is:ogO$;6GVjF9u`A?Y4s4=#ADJj?pDm!t1D_>qQDs#<Skr8",hNXLWPA]AS\A#Mf^:q1m]Y:m>^Rj';\mMr4H<m]FFh3UbiTfRj
%qWdA2o'56"r+]Pt8"X&ZX*.LHb#Q/J=7IbFhHXAo?<plD?<j(/cHC4\0AC'O/=6/f?,k',EH?,JEHQ8HEH,uI0e^O8^M"GVU0Qc;
%F:g1CUJK0RcEGQtc7dKscHji"q)Ij+mC]$Wo6d.Tj*@"No6O`fbBYhgkF?&Ufk-d#oZo?ceeg@+H<cHQEA>bZ*&P[_7iQT4/hfhQ
%)55s[l[IA;qaEa<Z]Esila<(NH_TOQ[$u6pY1dI!B]j6@d<]T1[aI^]BI%-8G21U5H;uWa76Ri\NnS9L[?;;(8MI6>gm%,F<A)H`
%3A7^tdRu*uP`eULM'_5PI%@J3A\Q7KH"It)m^_GJ9?oP/3h"Jk\kZ>k10p\s'$*Q-WMQ%SIn;(XP/)"qFhETunKORF8Wn9Fl)R;%
%"<pG%OiA5O3s0=j\-THTJYjGkTV2PS4@E<%rblOnpr/R9EaSr78`k^l8$L;FgV-pD/r2!OHsM2F!.MVk;?S<42Y?nQb$KPok1'i/
%<rEE#K;!!e9VqDs]OmG\:&`928c4GA$1acI^#=+!cP:p^olEDLI)2Frr_38!rH/#qrD`a:lg17^T;WhMAe+U_:>PDWalc8\Qi+D@
%caeKOItiD5J!tg98_TFo1-p=sZ@='JJp_83j`A\=/,``Dk<_DrZtJS"RJ[s!l2#,lWVWk'PmQaAUAP\c'5eYjDA]jc)8G6RWLjRt
%SEjhQBCMhbVt$\MVbiGcJ[1e(6$oG;lHe8OBC<1j?A&te!UJ(^mW5r9>TA1;mB`RTjYMo\IJ7HfO4"c4HM02(V7#EKN^!>i!`g\'
%jeMIXr`nnU=1cf?r^6""Z2:'[54dtoG+ZMJ:le*1lVH>bb3kIS5/n*Gosj)l.h3a&0MY#!d==SsUqdUr&`mN`nFmOt*Dmn%LVKAs
%p&h5Onq:h6[Ka#][T9\c[^*@4Z59r>[X/h%_m\T[$%a7V2u5T4a"U=DdkK?,\NrHUO(#e#Ki!]TP>IUnS^F3/WLdM3_%?l@qUe#U
%rlJkVocn*\f8lJuEj"+FCSrfD24qa/-JKE_-aoe;9[I*Ys2`l3P(6+.SU"Lb\\[>4OX`!U,;R<)IS:qoq8?.d(6n<W-YTfFr?II9
%90pS`(aBZ'5ij".]YbPuT@^`*OnT6qe9Fb9n%g<R3EA33\e\UBRL?;=f'AK#kD!%_na&!nc8.TG).=RF4RU._`7R,5_^)Ot+S*#d
%1:_rRS<+uCOqf187`7->W6U70/r@ZPlOBP&U^bO)X\+9!M'+/Xjoq;W=*/?9&.1q]fM(I2V/qX98132gPO=#t]IQ&=D@!p#D0_ul
%Z-pbHa.RMESBf;N3]F7_%A>qapTuB'cIGDIl_&=mSBfk^3d7bTNKFJj&t3>lPq/ENSPJE@VtC4ag/iBBh[lJL6D$s7HDU5HdlBYW
%]YC+\s,,,%)^:qGBU).AW$EJ3(eIVm,V`PcjD[O#`!qi0,_X>d=]CP<qUH^6j.,1j99MNBYAT0[+sCDBfqadidRdK-,dUa;luGNM
%%#kk[#UC_\L),ao*L[g:4nNcXJ?Eg.<]C\]7kFRHi=0"_^q@HC_86;EqI*<Fg,HTEMH=P"k^9)oKt<h\Kr19<(OBC9H(e]Bhh?4i
%Rb^lBdOEROg<h=tVGlWC+r>"L;B\u2clP"7L$fl>G%^^WL',KB):*luQ]1=IGJ\TPGd1hB'&u/a5>aaU)?:M&%Q`&?W*qGMJ0mMr
%QV89i%=E&\6@t(+M('a/.RZd/AX[=,2kV/;c=HbP"^Pr)Oglf`5E!fOMp<\<B--4^O7e+F/"aqU_4Rm&O"96@<?+bu+&p34:8m-L
%P]3KD>+Mc.Si049>5c1gW8Ep\om<N]'/Q)TQ1'b`hCH#2PgW9j[T+idlGHe*fI@)0"^iYC0B2s)W7n-`m>n:#Y$u=7m(J8spj[9<
%$)r>cVS0s(+>EU60F'ccJt=-5#!^YK2BSLdH2hE[T>J\t=$NmI:hB(8<9E?;Gk??ihp8UJSaDD>gE6DaUXgN)T>1<heR)b8Z9QrQ
%Xe2$NcV/T0K]AZd6rj3MP5SFa-`6X%-2XfL:ODSp-2XfL:NHG1QL))$4lPs-QL))$4j!La=gHr-ou%M=9D0a\ilCu'2i`:3LO/m4
%hp^K^E>-UjF)9A%d3%XnrI&T:qE$le(@DW/J+&/sSpELWFT&>6A)l8:IXX23s*UW4G3CM_j(F:tcPE8hk=XMP8be^5r6.Vo-CMkr
%F?j)QUMYt*mKZUp<ktukZ*nUMa?o05q4VYjZD/L9c&2cVgQ7(G>a<P;QF>`]CUga2$Z%oJpiicnIsUq]p;R!:_`%o`6thE)TKe4t
%r(NFVl\4YPEW>OtlE?!CrUB'@gR$gQ+9"O?gcb^l5Oo102K$BWgdtqKaAs/2M^,,'P*JRiT_'I?pW!Ue-cH]dIXbV]4Xl]pJ7(]q
%aS2^Ih^=emjEp^cHLn[NI4eTnMq.!<opPNI*l1@4:LAP(l;LcVih*m[W7dG^9[&L_Z]7CT%sn'7CA#.0c\6cgIDYp+5'-B7X&&Ic
%><[BOps0oIT9/#OK)7@Zb`]A+$Ke=_maSF)5YM;`LN>Y.r;D2<98)QuOneb7,pGJ/4MUb$LN`51HkuEDs21Md5?c@jE;5dgA>&sT
%rr.BRqU\(pr:]XCIgq0Gh!SPK?rMOuIo&@*nJCr_Ig5^!fH2dBiD1<q,O$)/"Sc>Z^\h@XIa&o46+G?->JGZ!BH(S1bUspaZhF=u
%h`m;OnI17QhEnq?>oM45(;^pF_S34BP]fMi[WrP`^1rho=UV!L'DoL]P%\h,P;gnXX!Xgoka(Jsf2[G_BQ/*^NdY7nU"'Wql,:<>
%7m^^$X0KfKDh(hUp=!Vr*CpR*ibF<q^#mtUG+c;;^3O!rfsZ(^^,6ZKDVHXSh\*8STl/UGE8T@r;tJ[1[b,2H[(CaNF?IH8CBIc+
%UD[rQ)t9f69P;gT5Y!DC17P]V4DJ_sTbioe\sjjQhE3O19ksuKl_>>8>!$]\>,JW?X.Xl6S'7b3"8Ap71?^:VpCMG/:[R,<[/mE&
%d0qt9%=$B+VR'teTVIf2R8$lf*jt^`"PMSt*m,BA9lSS6[nmtbc#;(`GAu/9kH]!*)n9\I'3R9erS'1VRZ%n/_e]0L=BM!mYp[tG
%=3V/^C.?j<B<.M6#$WsCrG3,:Cml5Xh4+>TktM'dbC\JVD;-s)^oY_*\i/\FCBs93gX%m]*Op$)1YB'Xi)/AePASnYe$_bf1ud96
%d?+-JYL]fbGgtIA@boag8$-W$er:DVD3%/'9Q;k'@kL9HhR*!Uls&3kCg&pom9A=e2Q_De7t&STD:^i;\Kc<fNZDu+3J-U=3AJQK
%CBGWc[cqU3)t9f69kVr/JB*)]4LSN'bh=,_Z,a1b169bNfO-ptI-\d9m<rK6bdt(*HJdB;Z>T#m53c;5ZKYJhXA'f1K@o1j!fmWF
%:QHdKN)RSmi.#iH#Io0SnnXJOiM7@gqbSDfPGC]sp4g>/`><XrpZMd]mU#[4ku&i'FrHM[5hUQmW=JIfc%"8J<r,5:l4_,8g7_Aj
%A,74,[_r1'[WrW!@i5ooY&0[#EQ4s9NB.TEoj'A&[^O]ob8JGRe[)bTPYMJTTuL)VD#p_bUM!6YB;HKjqG?J)f\.M#eN;/]VAJ]U
%7SGeF>%R>tg2:GgBM=n-"3!C26_gKNLLXJh>$E%Q^Q_2#<qFNC@-K64Wf:S]NR[;e4%K<"EC4)H31'V"Qj5+*SAhaJ=D2&R`6O,R
%(")/H0;O[@"'J9ZS[sb*(7t1WI>B\AC2hbQ>`Flu"6kU*XQ?Nnm(BZ;1X$;\UCjB;N0$MeWR.0YH7C33UI#on8uUHPNOfOf`Mj[m
%8W7;qlMq5H:dB^WD)LF$L,ok;mq=NFB8L4/^:'JLm^+;P2GjWDerXPSAPgZE?G2XY(7^?14K0Z5qcQ?bXF>n%FP\d8CcF_Aa^rSI
%LbJ%$Xu[h5JJLbN/p<sgW9$Emi/T<sm&1V>2K]c\eDT74hRRAhgHKkf[:e[.Uc).a[BIS>pdeXR0I>@5)sDN:s-ZYKa*FQ-YpG@M
%\;(lI?VK0fh_*8+BoSE[-Doe4D+4oVk>,>knu0Q;Q=`g'lZUbicX9,qfW@lKb0RK+I;*8WD0=C31*g`RV")Zb<.#=<f4[C[*`q]M
%h/51)"KJA:n7E*]1XF"`HH!q!%<jV[,b-eGK1e=`rIto+e4kF,lEiI5LtIQq@^=CKpjW7ZnQ%cA+G?\9f,HCrc6Fl3]1INWcJ='`
%PMJ&>*$I*+.i^k<A[`]i_^I%J,`[L$9)Ho.S.\$``+NLr]4Po&.`b7o!bI.SE\*Fa!i+PpY.ME=B*P*M@p6Ye<qnt//Wb\*@6J@0
%#nKV9DVIeYnd7TR=[CWP7BDZe[.$`3DF4dRP;M+*HL()=<d6dU>-btjUj=j$?r>b(!K`kb!SU)C^3-;h&42<V(+d>f&lL9-3b;u7
%\+@L+&DPWQ/<iOb>h2l3jiok.,1NkeUc;G;2)Rm6Nn,.MBPn&V)5UD5T^>.4;s[7$Rs$*A7R=_Rjt-h^C;fDgB*4iW'r,]SUUj2h
%J1W^U^'6+FU$>KGV_Uk'9pPdFL@jChAM#rbRQ&/NK0ucEhi4ldVZ3p6]+irVZp%j'Cu)sbK5=iMXj1n>1GPa-X0r'Dn*jS)#*Ch3
%n3D5>hTB[%L]b":K&Y2c1n2pR]@&TK<gnI,#TJ'Pl?;huQ(<iVl@JWD7N/_9-_,"ln%ee=E*Cl\"Q@p*QB4gsBT%HdN3-3WS.mF>
%GZd7HRo<#+f\ML+'IOTZ1Qj!`P9e*8h'1IX=ldCWhT]ZNU.=Belp1+GVJ\g9'K')D!2,XKAC'H$>+(0`&[6W"TW"3o_U)BkL_KGg
%o3#3hLmS6Y%>V9)_D<5)&1*5?H0Zbj"VmXFTekI$pLc3e%O/-3E]hCQgBtsAeQ2/WR!5XDm?Fkt8f'")<@j]j`-,ot:?Z,'VdG]&
%l;cT<:%=J!<-Htl4E6I]6:-"Y?6e_5Ue3s*G<-$fgaFJK6;TUf*J3piN=qr-!GUG<m=>%<Ws:-H;o>0U:[L&L^PMKK_+(#o(N0G&
%QC9a+7tlu*%SQR5g!H/BG8HYse+R$GaoqCi\QIfh+VYcoKjeS^=,9h+%_6LTKX=RgJlPki>7s3U&AGN/]1-Afk/U\RT&/@R\:8jM
%I(6_8GW<M,Z\(f>BH074pQErgF)H6I:\=ud:L[DYFh\*/YEq5a6S-cgs)P-;(Z3inNu8*p54NS<D];imq1$f*m^7*rjVc8H8(r/>
%:b1QOihEV>n^i^,S"K"VWM33;%A#CU')6e:Ueg,X-QeeVdg6sY8=)pb$!BlRC,I\paJJV5iGGAX&.bEVFZGqD(;l`B&LZO?$oj'"
%S3r%oU8,FVTj_Y'[?,Hu4[J@LWpno=IO6f10N!"XBG<lkBn@d/qMJ)qGlURsd6/EpYj[WC:QpTZ+d?K2<a$Rfr2$^bMEY2&l.kH<
%OOsZ;3U!<H"r0:UUgkV$"G<H)#fI<WTWJbh7T\QZYd9"COJYefRKX.f`.$Ra!in#4Q4f6P+lcNf//Ga,lGPdN20:7?f]cP"`.)H2
%)*W!8?<^jU4E7O@4Lb0V#jG1OP.44:4T(X:8uk&pH9jpC:6JmtNVZ=4$eU^Mb6aIL9H9fNL=]h;T\j`/'#u6JBT#-Cdg,c!3\$-;
%BElW9dPD1UBkbD0*rI%1TPZ#o<7LlArTB7E)GOt"C9XaL'Q>@O^aS:f#S4W<'YoqgFrTORBs_8ZpcWSU<>iIn=tZQNa?RPm&0q([
%EY4WGE\7+V%E3;2J:s4OZe%-V3DN,oXEZ"6C_>C=%W9VB.T>9)5Ujp.2h4!0pJd>mRZEI?W$Atd4%m2;Sqh,H/`gO&,V7Sa;MLuL
%\.,C"pj8T#FO8.m5agT;5'iI^2PGfa&O[ZH$RY0`"$[E9<WlOOpGl'hQ7.:Wb2,MK)+[/WN5W5/)4b9X^9Y8p57_<-?lPM%,:kjK
%-^YF#RK`hVh=744B3ik"j`_WX`be!>8"F32<\Z<Q`!hY+c6Q'jMBbkXTLr+7!N&>a:?Y:YPniIcZ>L9U;^<P6+<r+$O%`M`,mH9W
%q1t`.`.<6Zr"+iLP,scWRD<Vmd'IBuAfM%E66+=5-n[qD%B'Dg?J4t.6T&:_Zo[,j"6d95(kf^KYRt8oO'KPO$N6+@e-GkDC!aFS
%&3"#;Uu>^.RWJmV!8O)hD$X_MKY_'-%'VoN#GPcD*2hU^DCQ57VPR'*8iOJ$6hZ^H8cl?$/MQV<Cg<l*Pi4"*##g6!*dfXLi\WP+
%0g<^.5j_8#5/K':e8\:VLB#[m#>4;Og4:qphJmM.D;#1JB7pgjR?>47<e$G'04=KD9K^F!@kJ`jJ:L5!1*sBG!4a+AGS3RZQ73-8
%,"bU<F9J4g-Ph8IQ\r#T#^Z_tj1et:OYq%k",FiYaoH6-`)$/q,9X#S@Ul:>FiG*Kr;^T._(DQ'oU.gp+J<TBpED6r/.PEo$?R;W
%9rMi3&i?(q5q/!:6#pOk>'U+S%Ggo[<")ccl(5gZI3BWKbjOTO%Q-KJkXK6EPrZo"HAHA?i#RJa=um=._20TO9jqQXr'Q+R3C;-s
%g@g9=Lc@>RCndd.h/&Jl8inC]OYW^!JC?[f'>V?Ua9P_*Nbjg<(J;*=?'tDY%68p4o*lkO@'%Rr9e3Ac!.`f./osdt6E<H1dFm]/
%f#O4=Os"_/GO3R^L/#_o9l\\,04[pL-k;gdRLbc3(_D@>U(FS>6,]]g`(:GAH%tB2(3+#-'/q)C_?WgIj&%:^W1hTaP7=OJ@c64,
%WG#i;%;-uO[PENmks14nG^5%P[\HGQ@=9Gi#6kQ@Vh9&MGUT$qF.]J:l8CqT*&<h2g@Q-(^MkQ&$9!2=FqHDYZ"NjEaP^lcp#hLJ
%=?\kU?OFJSE%Ui@'1"*b2nI<b(=sbIC`^HF8C;9^)L,%3Q<PMi+_7=(,YO\M<5ti@deP.s#5l(?4n9/_@e/cT41hR@!\Vk*\7R&D
%".g"1Bc'Vk+T9<>8n=8oku]oie\pkf82S6Y!Z>%a!uQ$r6BqrK!-led`3s65Gj#;&SQ50E(LambLku+#r+T,?o(S;<*bTo90$%QZ
%6?WB[/:,ZVq1OF,MR.]YESok3#HO,&$jbOho&pu.>3G.f<QWZXd]SpL,"Ke7U.a$j3`p'uE+%W[Kd*FQ0/ndi`475L0ahY.2R>\C
%d.SKH4Up9m!4e(_)?C2/m=[%"GTSD(g+s2Wr,K^iY6BsV\W@r8@@uM26SokFK@q5AdhlO(m"3J.@HiSFJ\$YHpnU9TaU_ekpuGTO
%`g3SR66"BBAXlMqrYVb04Alb7!.oTU]XY<Pq64L-cF7Hfq"Q$Wk\)*]rt+:Q.>@7>%FP/GBEtm=>_PVorh;jg7HVoMDo+a@5qqh1
%_Jg0;ZRC@.:4`s@*man\hUE^pYR6bN\(a9O"%(2H8X!/gT_FU[5+#Z\$j@:,Y_S[GJS^e\/e?p4n2]Ff_8JSM@(rD'jtKmPK^o:Q
%g-l`eHYm1SJp"o8jpkN)@kcgN$6PuO,3Ym4<^9e.6i]RDbmgBX;POF`2u>B:\!`.u*[Ie>i4"BkY2-?T#R24qCMKp`('rcZ]qqeC
%'"Y=V@rGhA&3*`[@qM"1WbMfn)Ccp"CQ[fcX+V5b=kUL).Nos^i[I;n$":%@G;eiK<PjXJdsCV.YDA;LN$QUf/+fmTB[Wsp&d'VY
%Z^Vr4(&1Sf$Pu2W6m(?;[]qCF^c9R7;jIC6`-VaW#`XoM?\?HKm(3:DdL>mTP9Rk'#2:LE-<]T.(\-Dmm8tS9_^VRBj+5dN\RcSJ
%$\AC!`6]&i)%n(Y(54?*&2eIS6p?T5+iJ`6W=:kDoLsn<7CY*'KK.jko8KCTns8t1+]\lRYDrE"ZLs&8Anml^]0U-:h,d.(`8?@]
%YW`>^G6ZqTU(?g='/PGiYWc1YK#eHWa!McODU=am5p(bnOfQ6Qog/?e)9%1UKWq!<)43f8`:(f%!PB\9[6+l98ZJHh`Ym.[Sk6&l
%_MXgf\lqnRbKOe.9mNR,iq0pHVVlcoBO+mRRYX\3ET*G,ej0=l]p7Vmli;S7"[WA7?'Q/@!rgu2@^F"5nnA.)&&`<b$o9.N6jNeI
%Be$XBLVB'7TohdB4Up^aS#L[mPZ$pliq=**C#Pk?%eM%]#FTB4"q%@3"!rM[LikRS"emC.9J)Mu$9B6/.7fj/kqsTe8Z)ijJKe"a
%5[-H]0U#GRNWZ1DA/JMA^c)>Bg/!3M[7m?r.T/4(TbH]K3=Kj<6S:5"G:"Z(M9m&XBcNO/F#_Adbq`(_h+i_S-S7JHl9+EVM>8$+
%*b8t);2E[%mFoqf++C1a#_Ou9_Jl*2]OA_;&J,1QN1-uI$95iVK&E2<^l]IC#dJ7c66i'm7SFA/P\e1qnBT&+<M4:LUG1d@k_dKg
%'o&#-:R3[b,XRlB3*ubG\m`oMq!K^#i[PmFGS7A,pb..Jd#qM<NM<kKqB`%iSuhiQWSgkQ4%pu?"N@YpTtMiI%M9>X<h!Lb5U4?P
%csWQA_k#PA>+j7SD?6_E^;]$?&,P,qX+)u#$B471qUc/1+4Q%i.<,^CZliQYd0cll-ntLN-9GQQXJLb0)=l,c2r:5\P#d5'elNO%
%0h.-0DS1k>b36=PMo<6]jh$EpQr&W7X7d:PWj$2O_i'OS6]h4"&^+-@%P<Rk<C;f&+[XoHL,<q6;Np@"Lrdc$DH&Q2N3B,AWG^?2
%4ga:]+`T_QIFAXp1?sj>8<#)l'ri;J-j#($LE3m;ihPan*<u9O9g=<[Cl5gFqI)$$5]$'[C.,X<FT%<t8;hWsk:*OQ<]`\_=s-`R
%&LQ48Ep^)4QmK%&_qJOSE&a%sLV8V.`jA)9K">C=oE7!#U=ul$#d77oXrcRk\A2sV*d6'M9Kh_rB85X8+Vp4PH`J2#Y`G#R5K$1)
%E_*C51Y<A`F?@OM,hEMf$qEIkG)4MoCh#9gY_*hSin>P!BZGh&VB*O#%?Y.q*O[DSK5$)MXK`Ml%Lnseg*&T&1DeLMJV#1<f+.>A
%Nj>d18B>'3E_oUC$3(C9@P[>TJID=kWHJOi:dLAa#5c0*%'1F,W820aMt>S/q?i.(fUsehin>P"4/Tb`ZpTM`nYB/HUlJ#s-qbWg
%C..T)=?D0TZS'BDcK&<,.u-)_lO$Ej3G^ts6$5O_Vi6aC2aiumYNU?(*/C1O<'r3@aB;M1"Agr(FA4V\\AeL^;:Vn%A_21ZZR=p?
%5Ml-lgUpkM^P1.erhP/]Os4mp(oj9Z0HC>Hd5%>p3$\GmfB^$*(Cng+`RVMEh&98DO?MO`&eiT&1cc062_8m>2%GWog45!Qmj0aK
%DuB6?qD0=,QD("/5rQt!2A!a:-\H6(5tY:fiNJ^T^sMK7%'jS:8(G0mrjj-Dh"P<?9f&:AX#Blu45dB9^-O[%LemE8D\-j\;=+1,
%El<b2G4F_ngMad/?iKKmY6Y$G,t>c1*<5l%^HVMTrM+TsJ%a?O&aVW>Rt@&h3sj8HE,S+aGd.8\PC:T(nM.iC$HO1%b=D$#HPso&
%8CRTn)c^ZQogM:<`1@5gj>\FsSKFp^PK9LGdadYE.h@$qh)lm+3U./V@L1J+9Q?;ib93N4NIQgf[%7oC_/a./QODT[1dF%%VD.gM
%?J]VHp\j\7=qXn,%j]"'MoEJOikQj>#F(dN2n]fKX*'30Ce%btkluZ_F-1+g(=fXT87-rW[-Fkkn`oM.br[JjCl#pSARi>A'c9SH
%CWtG5>2O6dpK<RBZQ:A)2/,PN$Vc,18\7Q(N)8C,?''nbl<(s>,DE\--/4YYgWs`u8+5.G,+YmuM5H8R7[g\q7uU4.6sJ#$llk/M
%D/21l;f*O;ME#+2INluD6^E<[#%c&BFGr)02a@R5U?.U\=BE2#&Q@`2F>=c_1m6.e1]_?$?&@h8V/]f84:p?A\LheLh&<%%foFlB
%UbP1\'i)&ZP)872f'C;rlSU.<']U3>XIbAb"jncD+mGuq`:,6P"7B6Yf&H!cI/7hH=<p?PM:%H)5mQ;)F;DMgd\5&,l#`:>1LLcX
%[es_\SBi8TK,N<Ss*+bAfhZ-dTDddffOt4t#.E3?Kn8JP[-[Yi"<*4KigEtopQ8bVL[`4-ro*eEZU]Lk1_7A!Vo-:IcUXW*kn2)B
%,YMsMJfc?lKY=nb2[KgY.*&-:$tE-Kd*j!@NojZ=h3HG3Gu1;j:N;Roe,jH9nQcUJ"(2t$q,On:83db<@cAM-D@]qa!T@H2k5'e*
%DkBnB2$]=QO;^$FEC%ucUjNNCoiUj?%0gG'>`d'S<<<T&n_Tat!HlEGoH9F[o7c%aZLOHAT`Z,W^gI0mZUH]Fa9#/.\A_CAOO<W$
%_.>dFo_=+Lek;DS*&C%/`'JmLE]CUQ?[u3eV55H#/28[cYkTg)itNDOiUa#;YK"\JW(DAb"AGW4='H`5.7.#oWTH<F]G?iaEt<95
%W/b6**#o>c&aH,s_^MV1MpqgH3lj;=,8%(_BqF#dXck@?-lqFRDN"p3#O)8d&fFp"l#>p!4Gjl=Ta"JK3^r5)@3^,g=It$ah4u`e
%b\78f($N.5OH:-BmE=!=8N->[FqVj<lO%lXb/)GGP<MIpbJsi=F=$2[3Nhmn42XU%B%GPP<%7U46QEs-#NEZ:)^3N]+!_VTian",
%.M!BCZ#L&)e1d/c-F^=hFFgK[OH!\tTj/!F)kpi*0]%YBnrmjefVn)X)(LCamMp";2"_Z$_&oJQ(Qe;K2NF(?HYO?iS*iPm'AUA)
%Mj8:Fo>j=W=TPRZ@s?LT_[i4HeX!Xl\H;G,fGp=BXW,1U2!36FlMK__$[ahSV8q,6Noj)"I&2U,(01J,7qDd0PqYO/_1bhj:.#5[
%@c7e&.pfNt/RTDEj#h.)XlB$-%RGZ[2R!:#gGV(E[_4</bm5*SC:)j^C0F,Ci2`'p43MXO`2eU,,o'8l/sI>RScXjBR@XLP$DD=Y
%2RWcQ`-o)Y[]@;X4TpE5iijkJgU?A-et"j<3rfAd#O?f@VmTk5>8q*A`))+)Z('Urf-.G`_$-30O)gnP=SG'AKFlFXB0@g8:hMk+
%\j[YP+t,?Z0]8LA>F6WoD=NY/kcj>p"'c:D"^f:8]ri`+ZjON2Loc]/,;E$cr,`uI=D\h7L@c,%jL0p$asn\.g!0Y3M9FnWW!g?D
%NonT3h;Bl&=b.ad!$HIo?X4p[<Io18YfO&Clp=jrnhagYEg@jp`7FhGZ\KgdY:A?P)c'uPjSMC#YjM@6@GX53@n#P\UNrCWR_`.W
%(]b'u&lBBA+e5ZC&$'/f^GG,ri'j.VgKrj/D=+PJJc`=bNqh87N<n@^]3Z<3FpJJ')6S1pRb#k)(ui?R*NMeCX<5&(<[S9M"rC^$
%=B?,C#\=O"Q_i>KZ[sD[8+piN/`Orc5A\B55[PRUr,*Ik42o(j]%[Cu*Q%qc%=%,\2793%=KN-i757a#(aPIBo'CK&(ZD=7nOu1X
%F4^ISihW-V<cB;pjEB0tMqkm+nmO<Y""jj9o<)qp3/_XW$ZJ01LTea6]ri`+ZjON2YT9qP>*fjh!Zrs')u)-,Y=_L2RG/^.?pG4)
%:X7o)*^D^C\lXR/^k9!3JH<02/ePhP`XS&Rqd(;Q)o;Y`NRtdJcg5<[I!ql+AB6_u5b5)ST-F`VWPm/F>r@Bl_D-.`3&4MpAtR6J
%WM"sAWb-cI=^T!Tl]oCp75W(*(rDi5R$85\jQ["iKWK*%j]-i12B>jaTdfA[;Z_hMU**o;`^"o$#rBkQSfKHd0@7^FYYo5S,/;P*
%kh+%*Q6DI&<]f=W3:p4@2@hLc1@I`,KZPEG<g?k772upk0=%QF`4Z3eAP-/:-NCpdKVW"c-N.%W`'Of/T%;D;i'J5pNpO2@"H9\J
%<O\09g>I!.%p$@EMZTqFI+Sj<Q1`S$\gY1OeF5@imqje!Y<hee&NP2I;%FOZD0c_]=@)H=Rg0*,OZeMI+9X8Co[5Rs!UY0r:Xbc4
%&dogl%i8SLX#DeHfn+d&6i;=G>#GdHi37Wc$qRB8pQ3?mre2d--1Ja:o:if@r'rY)/Q1Ylnpfo8;i05<Q#8a\=]E<,#RC4C`l;?G
%"YN+lM([R#d:L:/>\;Grd+E.8cT&%D&afb/Q)-N0[mr17<1$!SFtoX3?D5WKD9NEXYlVO]0g7K4*25&H7k.g`G:+**d^Y->K4Ec,
%/e6\!E[j"UTYiBV"sCHO%2'*R/0:E;8@U+*!u.Ph.Cq?2qk:?=K*G:NBpcl@E4Ld7Z=u!I2ET+3hTgr;L4@"$3@"#:\.<!5g6e)0
%'IZSHiMb)IE!-f=YK^Tn"i>Lo2cp^h7I#%(^:%$.XI7LWDgF1#:p)(c#r_ob0bLsfF`E:X\;EPf#`M8#@j"eL5TRC<+g$:C"3uKN
%oUdG,89tij07p\!=F<RX&&r\K0]C:J?u1p-eRk"6m:UYLk1ZdX$AcYsD2Q+6@@<o4<"WMb1Zk&^[r^H:"Gos?QR*CPXb4r:DLC.j
%A!=5gR<d1nlHei+RR*/q@d?IKEj]XQq$N-B_h:6BN2nFd8/5^@C?>6Gp=O\GA\OOsXu+hX-J;@U:40Q;3U4kO\mndr0oQ9VcL`5V
%RgeA^,aee=M<K[BEcGfW;qiRQLC4RM%'Itl#692<3%8$QLK*(](O0sSi<2<i.gP)HCe+ceV-/lN<-Li0I0.q4`!k9D@dnG_'8W.c
%L(/PD5Qh(FJdS"fEG8ZGO$g#E&5*:lkJ\>G%N9ca],cilhP5@r>*Plt`c+F5pcM"ZG`&4=d-;a#Nk8k>g)!94.7/(*)?ZrbM[2c7
%V7nK*!Y_AdW$#L'V7ir=m[2th%,bA';=%!(=YbLO,Vj,YATE*1ZN4=$/)5\(jG:`ID5!?:D?9s7@9I0h@d9u+:KX$mm?AH"(9bro
%fjSq;_[fL4hi<8V'22a%%$:+7`^?T4R**i.b57Cg8HWCE6f3M"o@M=6-On*:MA*%#YAF,boYj88#gRBF4/*E7Y:[2ipUG%DfTj"k
%L7B`$,["YQU`"n%2c9l66;E[CU"CFjRgMjhH0I<.U&2b'?HW-@;"lS85tg5V<B2ll#4os8,&oMMMis[+F,Q&?#eJ2o29]P%!$@S6
%XZ77j)daG?RZ3j`#a:"i.`Y@Zl8"5?RVc;g/+>=U@L!"rL+_7iAT#E%d+-5n2/M2QUqSZUP^;[.K0A<I"u',$*q3mXpk;*t_(\bD
%qj1J&Oe5V.E2*Vd(q4NA3>,XP&RUFXQq@l63U;X`%=kYuJp,?-RP)^jVVm1H$&fU)#'(LG@htMi06Ue(ZheC]OT\Os-:Y-`G@V;0
%<sYg,S%uj%L?Mpa\-f<75k"t`\k6@#jDZ!I\.o,a3`+53EKUT"L7?,:13t-j,N\cD>>t-SopmbcBpH<K63uJIafNZFcpK_qDMX\'
%C-krFkM0^"B9Lm\-7^qo+tngN'AaIop[7A5&po3S@)BV(QA%g=MHEiZW2C4^:eoZ+W>)`qU8#QtGo*sH!+*qA;\h]T6S+Y+Sg2:D
%kB$:)llQJfMD5P(E/KBQc8Rp\b`R]1X$.OllgWT,jUDj5W-ZNZ)dQ5\<bJ4F7Uh!033+.%8-2_V=^J.uBIlIu]69>gL),Q,1Te,t
%h9,)1o!G@X=\_]AZ^l_S^TctQhR/D(F[M%(&lM8PLe\M?A@19Rad8pA;;#JfVLK?+MbstI(@;F&O^KO\.XNrI=)T4;]*LuXPUU\^
%j+0]QH4MQn.q<T/3si?igZ^g:"]7\WBc;$*)/q7gIehc@6P[`JPSSBAFUs1&i9+uYCb6$b@t1)=]GO(20t820U@NG?:=0WO].]HT
%d`bND$[3#PSOstc;^-8@L@f<1.1UH+@Kb)F?mAM$'%-PaVF:`Q>!1>`X`<RVcV90ppGHDGOKe"6J!C'D/pPk@fRc3fQG;>uf@"'S
%TSqS/7[8UpXuIq=#uFboOVe3K9Ko!-=>hf8j:"-&BnsmKUI'p^+&'c]Z`IV:,@j-o3$0*B<`>usM]U!O>>d)o8Jt1j6=s(74/jT*
%k'D0i'&cbh1.FGnet0F>&qJ4/Y-9>%BtdbE+8B[b2RPrO5k]cuk)G4OW3g7(H-G-[fYn0pUB5Mb5;4];:+g"d$HmE[MN[qQNlj?d
%mA"\YH5D%9.8`#mElpNDJa8ckqgu,:jRCaoNoi.%>7.9$&H.oi+c:$#N#nI[%CgHG1!Zj>#P0gS\ih+@a.#JB;WPdL/Pp42O64rT
%Ve-`B"pBi)b/lV*+eaehHrW<Djbei(TDHc%Y^g1.mO'\J8g5SM5\rW#E@^1Og5X\G!G2s%N/<Iu]J*VUWc8)oUP^WeE\!p^<P.]+
%ME15>!;UH""\g:LYkP<t[""X-"+h"U)d-\n7ul;+QZR&^SohE+[H1j8h*;SNOVkDmR7smL!''!S/JR@+$E7n^-I.e(%Z:Y*gMtpM
%LdA"lJDEVPf8cB2&o:<$Mo6Z6nR8)Na>'(*`BCV-P>afea'A8dN9ZbM1"g0p_D[de#1o)6ll1gFi10fEDAJ9%_6J6@'!T4eQ4q+1
%i1bO4Vj,;:8^<<nVO7kB>\*B'B8K;l6\3=DJZTD0?g(.Rm-Flg,$dg[k+ps+-k<i$&RnOG;_X:C2S#`_1.4DR+D;A'JEo<*G<qJo
%+i*+SqG<Vkl%s_ET[;4cZ7H?HUMoU;<Tga/L+MEqGlD^H?>.V%YE[]QO'fD#'ofNYRfTh,<Kb=Cd*ctI+iUd^0'\`<SOREc<Dkju
%G=^dn2g7g(+q^(]%&*M0Cl<YrQkX2t)Epp6kH)N&)o`WeZWl4C-M4>NY3YRm-n:!ANEAkeCAJ)inh?K+H'tt3aeb^KVl?BG+s+u6
%$&,&Jqe=TDSK]k6&'[p8&*e[VO%"'[-J+#V@SoHh>A-W;iCm1$SF3sQYo("?VDdbC0d^.L]k46PG;OuiaiuSG%4\P&$\4(6M\W7O
%fcV&=qBDSEIV-i^NNU)K'dR"_28EZr>#=7!iM)KngI.5H@"`4]+V@XEeXD&4I$l&m=8OU_S]$]]XNcZriL4/sFm`Z7UN1p,0YG+m
%JjY+Z\ghaDOIarYYC[OE`RG'LDrBDF-91aq"Cq1pnp>!S,aYSH#,eI;dTbB9fV4E5?9(l[^c#VE>f$V4,AS98-l@KY=b`l+*=F$L
%MEOT"FQ^U"U1Y^-\CG,e>4ijTW;<nd*#Z9-9I9*GA$6U]L.b4"B`KA[`fK=t3QNr/-6^_iV7!1kL/s9D>H,d(R(%=mObGqeM$?uF
%Y*rRVMY"7s,J6)N]75F6Sc8^>Eus4W6Ek)sr:lMe^&^LS5++542)JDt$_<5rH)'(^\72c_HnE6e:qrq`hEXQQ%RARdDOuC.L<9KB
%W.Nb0:W6d-8Rh-8I3Vp8C1>0K@Nlc=X?UQcn'Xna*(rVO0*f\\@nF4>hn13OWL\=E2&JS,?o!CdUgu8)FH)A&m$uL/.kVe:QnA2?
%RZN%JB:I%!$!na+8,$-%aX0XQ#ZBLQjSId45gn%,1WLeMH4SUEj)n#)Th'ns,T\!a^<Hk2[.*tJ*_To2T%3>P2a'%a=o.&J[<['J
%T!*1A9\Qo2!%H*eI![+P-q4dJnTnm?9PY`mLlZ`+e1<\sOaO$'*PdMJfe;9%l]*tKVUZbEjC:%!+\_\;G'W!Fld4F9lc5`ur`o[!
%6d,4&#fHO'R`11"kGWk<lhKh]_V10r:GfOO@7e`g$qo50MH*Z]lRDbr%Z[iBH;3b'T9$firRgq]Bi:b9l368T)TI8?O&+h1/?F[k
%gWZ4-\X*MY-LiY#0YPd0V/!McbX%/^1N7#ib7>dk+WN.ON1A@5Sfc`I,.?d!7*JQ^1(389P'$B5KVKF</Bum^YkTOQF\Q?Dpg=3[
%:#NisrBE3J7<l/_XWTqgb(1\0jF\J\\ce!M!M`TRY)!PY0uF$UbX#N7rC36-8l$l)8j.PU(9K`@\A7)B7N<=/loKZjb6[QdO>U8!
%caBC$:[%\f.4\Xg/R"OIM6mPS,D#lIM>s#1b+SlVM9e"kf4l1h9o%*JK"3pb%?kNLhQqNa:jJbE&?JW:Y5,a>,<1'%4hE=L2@Brl
%6$e93UQ(tGLs6g/^Z5dHZ8#\t'J7$p&X;VNGe;+9YIIjD\/?$Kf->f-WnPnU&gJ5e(4q6\HA=?>$K+k5kFBK,%+5s3\_TA#,<o2"
%[qM&d43aMo1:M'SD[;'6Qlf!V(L%k'=,,E/eA&M"oPOmC`-dPm5:2X+5=@n.EH>u<osVDJOCG49+??m&`1PB*JuLS:CZMJo$>5>B
%=A"1*,"e*:M-cFB4J5qn*J'e#Cig$S\X2@TH=<:YS%__]_D.&&^Y:J5BV6bSop>h#Pf:H@#s*(O:c6lpdHLdLYaf1_LWZ/Mj[)D8
%(-G4M@q4Q'fU86Emd]DRk.GOqmC^\A/Pk[V\28p?c8G7Y#+CI;>bCH\p_\D/b:4YQJR:r@k."bo"\"8+O3$>80g*4'%HXm`l=T/c
%9i3-5/7]L[RU)<eLJ3$`\](634`hI^08X#>%Tq,1^u_e3!6as>nI%X(@S02BG)E*:AIbcO1pqrciK51o*l:_UBCF57cS\93N2_a5
%MD.69/jc.ECF`&;B"LJ\o-VDT,N)4,UKQT5hO<r;$&cYM):SAL%>">`2(k?XN!)QU6\RH8G$.Vce%D_02^&HcZR.!RIoa`i<rZKf
%WtX8hU=%\"D9e=I/]^U9bf^:G0O%$hM_?8idP8Z_b>=E[FM?7*@[5Ta/mMuWDCi4W`NCPQ+@UC0dfKf0L8#^KiLM<@,B4*YMdR'K
%=L8h6@S"CU&#QESF\BBf=B?.9Rg13.WLnYIH.DM7'%'L<`2Rb"d$h0o"L6S<WAh_7g:@`nhI9d`&f$[QVRc3+[%.$&,a>9?\ZS91
%:qn^ngU><rM^-q>CluAl#Hf>d,_[>Rn:d8L\)[("K\81mPHQkU?JS6%(_Yu]hh)kEXj!c-4L\EZKqsU&-%^0j2K;]Ll7lSpr-s*&
%>$cK$\@O+"XJ]k>gp.r+Kr*fI?gb":N..2&P1hmNIT=g)C/ka3fdr'q=[V"S]GZQ$m_p!N[`9>2C55Rp<<TE:Mo@f&Y6fbV)Y"I!
%![^]H<J_V+ko*WK1^c[6PGcCilX"s'Z?EC1Vl&nCkV+Tca=LXqq,B:o0"uq[jj"#jRcRWSiLa@p6;q"E&*b(>`=W_UN)'bK7DjR_
%pL8/lXCTc?A6qqEVV$GubS<"A!BFcLSN2"Z@%TTP/ENNjIadQk*Ne!d/;li[Kul*QkV?oV%?"(gEl)CB.a_-"'=Z&qbao:NFWY(L
%a%[-1>R=_FnM*P',]uUG$$PtCBH5JKOTl_LA2cl[C6CF@kBL[tcXMbB)*ob)B(l[J@>g+5;iiV1<78m7efk5rGWQhu-6^hiBT,1e
%D3^a;jXMSHV07c(do[IZTS5@cLN[Bb0UWOtDF@rJrs*1XZN$+5q8fd[Qs364hZtG\AS\eP6_0Q$\488FgkJ>Co&UpU2c2]?YlqrH
%FqfDno,*q.`J'VMIUmb#Yp0584cD*s/5[1a8L,/nJb\Jb0t(<501su73\"M3VG=RudKEK][c009I=Nt6RO57,YFmgo8TK^7Ykfmu
%J\)t.9[`,gj=/&WXAP2)@F8+ID_G^JGjmp_bR.BBMQ[X)8P=,\&=u&WN;Zu,_s6o![!K@d$Q!VgJMrQ2c%O-SKUXdV^1+t4R..\1
%`gSosH%KOu"TBM_c^mSA"rE>+q(H5ps6WV/nHA`Q0Y%3:=2LENmFg0NNt[aO:.p5t_M&hn&8R<I!nAPNN.W-A*"(,c(6:;Ti<pV@
%$?Fa?2m<uj+Jfqi$$ngBQqJ[Wh&5b4i#5dU!GTUV<aB_Lo!#n`^.Cg'&R@L[3j`=+Qo0f`0jCD0f9`]>e'iNUC<h?^X>AL&7_jlP
%RA7m:0_gKmT3S.P/a01a5IjQ;c].C%W^f2(UXM*caKEUK'i?%^?EFNl+-f>[,.sE[F*>KDq6q$dOT8>4Nh9HJ:*dR--@O,!J_X1!
%Zp4q1BOai_*haGkC]G5uJbNFOPQB9$U:G1_^q)oc4!q7mEEXttN`LF[,AJ9XpFeC`l*b@iA]Ss'=P5Kq4!^C3;ip4#j*<)f10;8*
%8??F0$Fq-.!ZVQ1SilXC*Ea8?Qf,b0OSiP0_?/%ibek["?onHbSQaajO6jg-E9'=?aqP^Am^@9u2$'!70[JBn`\uMFF^6I%*c8d9
%mJ?&'AokrLoJ@L86>kkS9lbC"(M:O!B'M,+ms:TWHhsgSdn)[s0+!ZarMQ%oPN3u\.D>)>::p@=JNqu,EM4HUpn$pMq&"M0cRO7p
%b:W(oF$UddaOldm0^I?2f-De-`A<JUL2h9:gGH4$>KqdPEJ^mI1$JtSm%Z!L@b66`2>s#\_>7Ok97U<jXWkMc11('P1G'V_DLKrZ
%ILgmD8ZiRV#LuFk-(2jWQ_R8pneMOZ8lH.e*[!;9.UA&Y_EI<bQUnI=LZK-WUL2fO<1=2iW50aIhVc-5<1-)3U+Q"Jd=4KL3.Q(;
%MrI[2YRTKdBDH9d9JWP"@8GT./iBhO<b?3;U,cr!"h(1G)I=,Q)_cC('`f`RHX7)CS5Gj=KMTbW&H4(DUfaU`9c5HACMh%HCGc!K
%;^De-(b92Zj;J-WWi7il1<5/*FsS#amroPdM!pu/^g&MD^aoJ)=L4NL<."_Z/GP@X"q%SkCtUq7.>fOH^m#NPm6]>d8QZrhhc?]/
%%@hVd0F`L:&?Bj7Zn6!WJ?&e`?l[mf03d:SJ[?*r!k^RfBI"s3-\<Ik@G&)5FR;6Xi"&ID[Zmj%"WQa_3i;hAn,2b+"q=!*RJ,hF
%I77Ri3!pcC]LlI1eYjRJ\Q6ueggem@AbL/@?)BR3\MPlFp=Q)36d-7S!UA70K;RiNQCWZO]h3"a,g=.9XDGfA(.k*/lQLUE0.k$7
%:Dh>[r#nsT73Mc;B(IiK.CG&Fn9S@4TK<CgV63S(iCM%2C09V_UJHEJR>:s%8qLh5\Y0V90H,,:h2s7t9Iil2Ce&LBp^i2d;f*L`
%U#:N/*12Ybl]i$N??aXZP"!$\?+9[;I$ImBOC9a'RFMs!fV,"Dk-&qDWMLaLS2RK5N^h6em/g3$7dn4+F;>gi<rQLXWB`1GK7d8_
%p^o:=R>6'$#!T(UFY5$4,Q\,`O;>1+7'q2Por@Uh&J?RrC!u91W,`t8_auYg8nsef`^u<AlE+`&fqLG*H4QP;/J6C4>OaBV<aV[;
%Zt^=Wci\7*>o7TgYrBF#BjsgH'jX'@%7&7diM>8Jqm1u@3*_TOa]4&s9Y'GV&^?q%:^f-10VqbX38Y5nE3kW8amBl%lt5;8mZ;Xs
%"af0%ZJ]3+;6bH_iHuuK?nq-/DElC'J4_])`BC+7c(_q*Bl\XOT]K98$!W.XAJ%NH2,Vq1,G\0_3A5C8af)q`9[NQ46q\L33MYiX
%PRM&!aS1l5F,!n"'&RD)X]ii0j]*UgNUq88C=u82Pc:1YfA;Q(c>OIN/Q*8D.T[/Yk3O9l,GQOpBS85rGHhRfmc;8ri&u/kR0XFW
%+@(eBjkA*c\):p5]n7>Q[I"k_%fJGWa[Wpm]F[YD'EuRE.PYn$Bk+TraV%D6VHifl^pp2jj_H]k;7)Jr]IY;bEj_]ICqpPccD$mR
%Eo2n8A4?\5PD5`O3<sW3Yt2*DQ:5WL?-R!<eA<:I%$f'-XMql7>YmNmT,Fk%%r!/9Z'$.nSD7tBQ%?hB!D21HVA:&pW"$0D`?M6]
%7Eab.2NQRD:m17c[ZBk/2pGqiZGSSi]6\o8G%Ash>^:>"OO-lW<P;X;Y"jAG=\rEG]:-o5"PodU:j;K6JKG<%anp#i-uUQZjD%Hd
%nUrEl:Bpe_4c,D=85*l9=[CkY\#j_2ORQkY37^Ua0S;l$V0>Wq=HKf:P=<!\_Z=1+_s@4@_]K;i-,M.MRVF7M.=b^,?@BIEf)sE!
%=LgcjFp:\Zo0UGtK=f>"E@5tTHe?/OT>CDIL-[FfF?`2q@pBb$_IL#W-4,Q^)VCois4Yir<jCf")#mQKRW:W]^c9n2J2pbq\gI7E
%`QiU+C17Z/<a'>BA.^*qoh+Y\Rb`LaF1QHiXeMF+<OdKH;&c9q]*,Sm<GeSFokq5ri^>bp7"2B8,HceG&RD\G\R`sZjCICG>=DOg
%=D!UpeRBu'R5N@tBm$t#c)oQFkDC)EK6btp8l;`ABrY:BHpL_N)4!`4ZAem?@^'B!:M/+W<]0k0>L?nS=+YO[h06\X>:am&6reQ&
%i3F>KVR4bgQGg42bH_kfF?MMYOrR]UZoc8",UfOMQ6[1eQ`Z(4%,$oH"%@jPdO&Gf9G7oPZD_$U"OB!!76E/FD_!1cII`rK%-5>f
%hamFM2SG@'"u*FeF]W.8j$fZ"=n:"W;EN^7(DMoEWH(#g8V/cb]=7kIlI#6W&XK9'D^]m(p1T]/Ymd@d3b&rF6q(?0_8?US&3P\V
%IMOe?ikjg)Cs@hUc1L^*mm2r^WHg`Tg^0-VRG(eLb.gmZES],+o+p!b`"d#danAMTq25sk;APaUbMS`N?jhE;Ya.dg,u_bHU+&Q@
%!`I2o,YtP=f;4:[GHC%Q=bC>i=CY:MLj<!]2og9t_4C0-iAGGWjh:5"6VG@8d"6gR(eJS\6(Q"_'6u2-b&L_3D?sM7:/r4U`C7D/
%rq,moTIQ[FSD;Z3e24jB:-p:J/PR1cp5>fWU:,)7?Bi#,Zf;0%]/0RYmcZSc/bT@KE$&Yt1iT^88.P2^</F$rOt>5kIR<'e75$Vu
%(=#"9<uQUF-FAL)-aA&AQ,4SX`elAX&[C:/JQ:[2;nR[BeH#``@eHruX1_ZsBQX,BOmlb18%l"*8$hEq^9U_E1#H.-'Hr#deIT!A
%%J=DO5Ccdm31<+M,uD;G9t(O,[c<7!Ki^(rWGY$).c"guDitK@m`[&qAI(^c<Z;Llj"ds,2.DOc3*N260-J"c6[G"9K3Smhf]1'8
%qX9>E!&oRUo*=h]PG_P`6VsIS\^OYTr*H(l8U<BY0&fKE%t:?TEpJ;4g<Hg6>LVUbBadj9LrnIAas7HnY4sALECuW:RD.gjJLcT^
%$i>[E7SpVQ-9QTX>\RW?7^jaj_521/mKQ;9J:\$YoY`on`l8qP:o+C@?TV0qB/Hk%je-#J\MF@e_ZU[Fg6Xk#.K_'%;_:H2\Ft\.
%/mMu"C""fMW:^5Qr%r[2lcISm;TJi_)hnhFN,DQrJ<n*5'&5+.0A)C=T`brm/U:Vo.JL;TJYONu',B(ZM+pItC0A]bj8/(V<C52X
%!EY_%k[Z-.U7AAh3<]mDE=QY>7]k``o5[S+We$IW`NrhW[+#M>SDk-YjpU>j-W/uZVudM-USF/U9-41OQhK3e(GW?Rno^q1>?"t[
%+;_MXW>c1aMp2VKgJoGuM&i_Xh3*/[L%A]>KsSRYdkoa89?pP4:!6J(lcW2-:k/W'FK/s,D;uTfqqOk[%<p)JO@<LE5cXl'UC\Pp
%iM<`H3d_QF@A'^'[i,F2>G@UBe#KY_iN?2nHWYE#lZP"u#rCWjEj*re4fj3jDCet7O)OFZ1$f\N,k*m*-HYQ`Bf@]8(\eZ8iY&Bc
%MWXpE/@Bc1R)i4i=mMpZ,ns9`D&`a4pk*>W8P:URP,ttkPp>!l9(-*JV+(-7oOP[.KOgj&m[^UM.l&g?%Vc%0)2d[Y#^a2gc4-4&
%9p(A>;8mI-<$Q\S0'=nU(?A+*,p7AXe&.cC;!^/diGUafgT%Nc9U]#=V-(8%d(Hq>hor5nT3`d'gj+USa&N&eOOuXaKfD/q@tC&0
%ZiTT\@7AI6FHGV\>ihF.q:>a%KVsi>N+e'Ndu*!Qg+#b"B<c-Hem0ibN"YSf.D9)O-s]QCL*aPdg+@%Tn$M@\)b\B@8c#KW0H_;C
%>7<%3?'kCO[-h,ZiclL3('7E$i(D.`98q@:&LJY/Fg$FuB-#U!lPfoCo*`0O]!6,V(;+8;$HUs!Op0tgW&M>8FV;LTgk&cZkZ[1k
%3NIiM5l+8L%;Ep3JEKa%OrggBh'0t>HZ;\blsadcYc=q#Wo,_Pe203#=B?1XB.6fXrM$/G\JR_*^Y0EA&H?gY'R-s:fk.gcWT=9X
%Nk=B&'p;kIdsJDBK%Mg9LW\q7!#AMf4P*u/KAsHn!Z`"codUbi<(\s2g+4ps=r"=&A\:+9,NL4?kEM_laF?PD6FdEOZ=WO-GjR)i
%gjWI-.XZ^ihF>HpaDZ/7U26l#Pr:E4'0A]!Ih/Pgdrq.E]qg_$>TJH\(pH+cfE51VYRUiHeT;=rEgNbf*"$3H_>r52^X+@(^bVhB
%7JTbj&M>WRDuc-6g`Zr!]CZb964O:(H5U+rrB\b2"'PrBVETSMfsDZ\e/OK`BcY!N-,3L373+W:0@D\eIUWU.A2+;0H5@/&6Z`oq
%?/1s>'=;r2E^UY3=`AX`0#koJZt,`m\k\s^97NI[#_8CVKskf:`d1jCcsnW:e!b'NfcbQ4"B<1Zc@26CNFT@EG/tY$N&k_HYn-!J
%kA+c;?G(k=mLGC;Mu0LTC;C;!(H8c4h%?m-I.`+BCbdijoYR:E20hP*$0-[.Jg_AZ6M8Jn@"&a=&qJ6_o$gO[6S-H3X&\.m)*V/*
%7qbN#&5DHe^X*AB;;>CPM0^8LVeta9,'&[Lh8ZGNfa*LGT?DX:Eq'jZ@p"u/egNumi)a9QcnON%Kn(_cBMk7@9'LY*fl35lKf5f]
%SmIj=[fjNB]f5YaBg-PPE.l)4/1r0(OWm-4cZQe3JrOf`+PCXqCRRL&Ri&4)L(LK`(AgE-dfKauP0[4=M<KB+()8*ZVs1iCM?2T>
%d5maHP$T=)R$BfL&*"AKnoODQ2_h)HJ]B>0V<[Jk\Sg/?MC7@l-lakf,sP5saWkg7Wa5M$QO:\adG\HBs%67h3'<(M.l+>71NnUj
%n11!<bSW"?X*."SAL5r*07aXPE*3YV>cuWs[0T8u_(Q[j.nIf6/eFaV)<XYU*_iAcT;[ak0F9j#:D1p?:S(_e1,!;L*2a;/c^O9m
%/RIRuArL/H0/_@6`dhR*TF2oR^fHe1!$5;Y3(q<oPg'EZF)hi#d1k6e8jVMT6To=A`Cj2#J`3QSWt1:2,F+gOl>fPqMVK6fU*uLg
%6?4/oLjm0d1V!Sb\$rlQ7)T+%5Jq=cZ:%LZ^apQ3^gtZ8-;P'0ne]`ln=('#GX]uY7DAnELCD2TE>>g5U';=!Nbq?De%f[:\rjXI
%Ya>a7PWPAAN(#WJ/Sa:.+MD;>Jd:?4V@U\ge9W#i-<3)tH:"q+_n-@V]#[dugOLgZj#C@&e\^V(\g8:ffGgHF81jUEA/Da\$#b9q
%(7V^9L_!"$#h1C?N)4A$EN.ib&GeEZMN"VhFTTirYr9$TWHl]W'1rjY820ieoi#&ic,9XmCj,-IhBXc&c`V^U.hfS<HD11j;DE(g
%Q9/]'^r_/`o8f3CpGke&$H)82&HHBM<Qg^Z:fIW95Egk>ABn4RX!Z(?lKc%$G[R.q9hj.<*-s7,Vlk$%Fn*VO\gm'.S&$Z'2m'61
%:$\f8SD5@)+BJVbFb9j"P#^W9Mpi<nqQ-WVH6]Z[Ea'`/kA%W@6Nn\agof"V=t/,kUI5jA9+P[!XX#A$\D86@RTfP7Rhc@@Ahru>
%F2R>,(6`PG5:K$WR>j[WW2oA,\TP_[&2ENL=!(F=oo.&46R8ZWM_C&[eKj^gG=&$7]WX(0-9mkNem(;Yo<F<W_h=o>c,SKq5f87%
%Oq.['@-^u9Z4J;pb=oEQ;?M1'1c^BZ1;i1G7(c(`4u4F[?q"V9YhHJM&.mnbPAX(F@N=%XAp$(-I88=q0*\ZUV);I:j92Z#el,XS
%RsQW(O*_RHG:[s&Ta$bB=LP[!%jnnHY\D3_D%&g6'+SA;+u!1E>mV"bptW;(83eDQ.TQ<WK%aA_iEJC5?"B0_i<@1eoS-ioYlklZ
%;hR6'5<"UdP?m-]?8!ul29>u@0kt46H.mdq't8i-];AkL<@X#*D`S*b6aBM8b6t$;RKiBbMtG_\,YFjjY#b7]m6S$G7u1aI&r)P9
%EY"0FIGr)%b#9n;,^GYq>QgksBI-F3el'\-e%)e>8%IIf;/8OpMMUcmU>9j0DOH;_`"95gpe)jhHEM'Rh5.@qDH<n,X$C4t>28i"
%3m];!)Z@r@m_R>J8!#-_9hVqMp^inDMWCKf@ag*s>gtpRHE/TK*=I2\kFE9R?gD0`q'h_">IB-e!:@([,[Sn\gBT#M_"FEL!9NK.
%.mp/KDY:ED)Zm7+apk,d@PBJbA$>V$%M=Z%a(Y8ZE6i$_C5eRH,D$27'g,uG_QP.WI^#Z=_t*7eS$AOERqe?aE8;USS:eFJe573d
%h9A.EB`DK(DV<9rGt#9'`A/WF8rcqr/DA'Tll$Kdb#XTG-M;76eKQV9WZ%->PP>cO(Lf$JXo=Qb_2n=+XK@b&CVe_.[l,#'J!`+]
%`(_G*F*1uoWEpbkf?W^3l2l7B5Xsd<:nR.sr<RXnrhUS#Ls]^WaG0VN=c_r^R4_D#M]I2EU's,NPW_/6g!`_]dd'i2jQcohp3rBL
%Za/HHiTtsVj&G_h28%nb*^L;[FW`WX]N/G^Mf'=4GZ-&2Xg18%bq?B*h/:%JSni]VIVMKIF\t8eC3^VS41!9#\.#nBk.QMO[`)e=
%$tM0*<W_#/bbYll:Vk][e*P,$Z1ATW51W`BM.$`m4UKR"Sf[R3/%E0q.74eFIXNCa%USM[#b(!1#fQ)sea&pa+;u5;-"rYBp@([A
%g3L9qheIN+iD"A@4@<7i<oQ48]RQ/uP:4T),Z*^hn[b9YV%QE8;E^;lMT;%)L<\^/n?H+9?Nd%:02@9o=!q!+MrX2?h^jf^?c-Jq
%(AQN5:@uLSlc$\@8?a3(nUdRODa2BAf/D0W+2<1$-]uJGU6(sK&M&X5>5\fHpPmJ/7Y)3q-_3t=ql7S>Zj;@-J03T_IW_HGLhUD8
%4]#)\A[l\sopP),Ls(X/ATT@4,;8c7HEl^_YQ7lElXj4C![r=dW"0G"MA%\cfc=(od[0P&crsWVeuF$:MOij_f?TQVM)eg5.XrmP
%^`d[uLU*MX>!(]F9R/MYm%Iq2$cCqoC0"r-iK,c)X81B'prF*tg@8j".lf7NaQcu(ES.(hY&Y:>^9"LRLdLHlkG<@1aTV8hF!6U.
%oCtW[2A@V0e@<Xl?Vc&._&"1Z!h]88@\;A=O6p;\@Zc:;"nI$u4baLDn@e.2C5l$W`pq8*:K6s/Z/?a+g7X[!p2tpqSuk=C#BS"u
%5ZOBo?eG:bLsBTe[_m;@3ok7"*q3j6?,?W9me.uRL;H#bfC2*0<'>9+hC.2Wh2'OI3^Q0/;?hZnY(c&Y'%2`mn<0@GTVd+rmUYke
%SXAH6Q_PNugMBD4EaP.#V)T%MfaM'r^aHZB,MVn#SV3jm"\,fY0RY*]K/lmB%''5WFapH$05723fjt@R/fM7+%b/-FJu'2u)m=UR
%dGbpR>h+.7Z]L)_qd`d)Jg?ck0F?S<:p]uo>iiBZ8@&Km*3[Ki+hGldI1l,kfNN\<YlmLL4a'B/0R/kaCVV/6#Q[m\/&Guu;I(iW
%#3B72eV_OXX2TY+m>D\j40dPsrWHu+7%tobPN@<,9H,pk!/of-e7.#r74793-V:Nj`]UE5(>A[pK)F8C5I*DlbN\M6W7&RCNBWt=
%f,?-"lP65:"YU?I5lg7LE#XG\W`t:Cf6U3omu"oLe&NR[ml[B]l*f9.XWu2lW2a"^r2+$"b>*eQ'0*.B_^WYS5Np,uK5P,r?)&e>
%0UQ%LTf6tH'+A<.)VC\CrqZ#TYGQhiA+mbpZX^'%?jDV+jOt$hO_$L,MMau_i@,[hD6hS@9sDTMiPsRCVW,!!^Q2%B&R-:1Nu,^4
%RVO3]5"_gER]:T0b,P4OD`_Q_7h!jZY?!;\Q%a2S8@o%I4MXST!WCD_3Jk)?Ykt2coHS2H#8jgfoDNY[;DRcm768h2/<H$H);mSs
%qas[*N@Pi.rCHhSJUd(U,JmOg?uoSfpjTlTk&A751XXUO=Ck"X,EqM,AC@3R,$ZdA4o,\JqI?i?<i_13pmR"#_2>sOZl`]<fMEmQ
%ntT+)C,M0V#3'T4>a&Gl09#1JM=AD_2nVg?04"P7EdCW)b3e8'Vkk;oU&e$`q<>BU$a<dIhS;WKoFcFoNRf5gV9=[!Ob%PMSUr__
%^8%-TY`.G@RSqI\(G.[](/tUMhAFGF3HN[l"19n0ZcdKe,nkRUb.jtuL;?k\kLU"B8&=[U%4E-Y!O[\6!S\e3b5FjdZar2RFVTKK
%Y,Mr(`3bDG?#*CiYhJUuZ#^=P$u3)@9*`^&d-t`55XuqliY1'cpQ=ig&5.30Ue;R/Z.S!W#P'LrX9r#EKEOG0Tn-3:.^&hcUaC)0
%^1\EhduiF%RiGX5I6^Hb5g-CDYH.0J44@-Pqc)qq:BjF)14XZ\1,.u!3&u'E_;SD"?_gn!AlBAVN1mWo:jZ<q9ge(t$i&\4jYBD2
%6\c1H*,?;jX31JRIb(+`8mpS;h3)'7l"BbDF:D']o:8^lYB=DmgHmt+<X3s#28^^_[at]9d<Os90]AP?L8BYWh!la2JTjCc7A"8X
%bhXMBGVqidp**S"G0YgOWX'#/o^D/Emje'I%5\8))2?bBAY;X6;lU!Q4\1i?_"H(;*eqgNH3#;o,oRkWk?R^e$`njr)W->dcTNPl
%9p\,*<=%k20$8-Q1BChD4Q,n<[OS0W-D>kgcIMN0>?I4J6JG*V14WgG5Mh')!#r.\)S:q"DDt=?F`+<L5I@p@J42hc?q1K*JI-]t
%J]s&FQ-$$B!%nk\$qsje;Cb@X@:67]o+DZ<\>",O1DkiTaXibZ=9i)Z:HKs?\V48YLA'!Tg1?\=MF^j&R.OpZ/&jI%DOI>_N<3<c
%ohr]Z);+=mjbe"M&&$]f`p0`@5le^K]nbuEXN%JqYI71uis^o*?I%5%oa3p+%:^tHWFgBE!AJajW</R2SPea8]&1DhNu=mm4L;s]
%.'S"jn?JepM.%A:`ac^IbD'7*^bA&_"8^TR?6X>MjLb[N<ang.90EH?5?jI7%(kY0pb`9bPk,'ok.@=p)$!nJ$Z!7F(?cp@Pb2a\
%*]=tBFKbeL%bbfE/97cKZ>l&9`4,Np=e^+g!*plU[r[,8XsfFL8iG'Fe+NQ^!\rE+AjGrD_VD]TppnD7LBScWJQoRRCGo;>+d6ch
%Q5o6k2&Mpe"%f!qHn%aZ>#[k8D.tj2k62bi!'EVb`Il(IPAP7B%VqPVA6qdTJDRR*]$**+N0d:!(>T:p.SYuANp-_C(bQ#5B03(>
%eE%IjY&u/s2QCn-]VMXg89aPc>uXp\A\rIDTn8VY6&',Tr3?STBG#A/9!<sWA(W)oTpEDro',XQH3GRcA2onB$?p).'">pFd-Cbb
%qF*biL[]1RbL7fpb-I]K[kmX-E[VD,=]HYB/Xg0AlS<In4qj,rcLpiS*\9g]-=lA!3;dP(Z&0P?eVFK>0nuaRE7JH0!3A2aH<B)p
%);T-S7BToU`<V\=2W,=f<t@3L?ec%Z_PXCPol0@jR3#[+AaX\$^k7;UaAFrK3unAtQV:XJX/FNUA[p$^>$2(7('gkL#[js%R9Ak(
%ZW.;aASLGU7l`iFdps[/aVVkDmP&:pOcChn=+jV2'+AFq1pM2uPrn=WkmjbpZX"kRL9&Z_/9r9\K1(4t0I]IGc7M1I_naZ`ooLFI
%'L3VhYY,*.\.GWMn)8k$@o_3f>)2"fKOrNKCb3K@BfLpWQIWu<Fa1=Rg!%=)g2b2Be\@L[/T`?A-6,^"6Q"jK]+)/3@UEjt@*CT)
%I5SOE]YN:MGgp6U1`em5X4a<<-q4tP^0mVNC@LDq<3Qd=$[91]Q;rf_i6r-,#_c7ZRY36&7$q%BY@'^G>I/rVduVmD=W_IsAJlJC
%[?ZCs!*.][i6Vsshnd-Jod('j7:Di-ZM\GJ!6mqmfM_$OHCAkSZ]"'_+<G/?<nkgJMcN_N[;\2KR$'`mit43cZHli5%eIiG=u/:o
%g/MXde`rP'W9W(+5-2c.Jc!_Me$%GJkshj]XP2nEnuOBr(02;M:'<k-Z&ITRfsI9r_;]M9G8`8t&?QQgRuG:P'K6Ai)uTaqL!C-/
%>g6mU!*!]5i1f(%CE0-.2U<nPWE'(5GmU9k"7G<3b;%Ji;8hthNKp2fe!o!oR$B\pAEdKQX'VC2(_INGqWYQFL"-_mnC>7@<0F&c
%[I7=f.MA)5@\KMg('-huQROXlWg,,9(b9>8b`$%#+bqFWDdbZ0fVNGS-@B$i<P@=3VW7gjQE@rfAg?&u1q/T[A_mO0p#_];Opa!F
%U>\WI=7**B"jfgN0G=JB\dn"_c*:qqn/7"*cucWh\bFJm/0/Qc^2(ioi7<5o?5TuWC;QP(d9qO4bR9F[.0794-eSX!ijVf@4?1uQ
%2-M&<Fj=iT*c!=rm)OOY=:DmYBG=)jO<N9$$4QR/f89a5#cWo=&gKc_:b@OLb7I?e>>hdESk[8o246m"NDnWb/K,D-!Rk\>Wud!Q
%*hbN2g_A:A]K!G:9+P7:DdG8Y2*<p6+h?N2SV#DJ_d[:r/G:OsOipkc2%O=k^3RVtYJ]h;@:6O4@s6"kZ0IW,m7Rrt>cj$#R.YT8
%8@=GN%g-!\.2f@9_;&qHo24/I6djUV&=qXV<_c$b.nk);YWf^$^n+WRgT1+l6L1u1H<5TD]*Z[P>I\MhDB#NQ:JX;11BsY[3YP5A
%9LFjG%KfBoEdY'Y!56l5_kglY_qht>ot\r?-k:%tb^Dp$P.V"'<)Jca%r=_*UY+V,%N*PO>tY8U]GlT=kun(n@q2Us1=*OJ\t2a3
%]?ps:4?-/SEWF*aNlNhB_2p[Uq$l.TP>-;9-hh$e_\TsMj5d@$7b+fM^M+iL*9&^J\XF57bQaXjJIV&(\e:nti>CJgXJt(!#,#42
%a1u,H62(b3)(mg`(63/&*g66D1noQY<RV<=7mrI*&kkS'%J,`>5UHO;:7#'ll0D8?%=eT-h%i<".PYm%:l5F\(pXu44?X#?RJfgC
%PcU-'qfj?O0l5f!79W@,O1'`*Zd:2plUP1)k3NF\fB_)*Gq?h2M,2Zu6M9(M>_0:#0GNuL>"^b$/NkY(Z[W,$>lcWSlX?a!WkcS@
%3R&Z$D4?l;'d_W$[mT/$V;>9gP_Ko-I$bt@;Y>C,Jk(-5[sU'(pTT5c=2L/\2OJK*^C@4UXMGDc1b#nCno\:Nh;$s?)9qM4kCR-c
%DFuN0r:mC`.ENPYaFihk#M5GL&?J)3Pr+kG<SV6.=%CotW_/abi6('rXO_jpU:oC"9NfZG\&Z&]Y'`FNiXhnXQqYY;!&`YhfOhCt
%c^!rBL"'/mbsq3t_m6rkAA?X!(:]&\R+Z:Xj_nJnk.o4Wgn!:>h9!mMCF>-T7,;_;amR\JM\N@6[6]LYL:\s-0=f'uF?O!4$5tDo
%Gek8J[:j4!Fs/.6<I<%].Lbp'AN<J_QSQg'(uel"Q#DhKf/s*tV"<l[9c<B'S^[(`i]"IcX1Kj>ckRW^m*loIc'G%1ZH//9r5u'm
%!EeO-Ydo@ThU'fOc0LgapMVtKmN\3r].''m,5=+dm2[^g>c<7,*^$#ZDpeVh1fIda#8SMf_khUkgTo3gMj?_Lpg[=@\qVW:gg6^n
%ntNVDo*R:K(8QGT6+mnsJR[".0Wg?n]nI>B+2pA9>0EC\L%.8WpLZ_Q/"`L%KF`R8Hd0\OVO0K2Kk4VAWL*;K#b7;DZW]e,mrmXW
%,<N50!OI#iJA&I[e=HA\b7.MuMoH.LXe+ne>7Q=Y<mtm(9EE`FE7FJ!VK,e+6FJ(W$uADO>ZtP"6)pLMCdhIfFi?*hPbk7nWk#oG
%cIcMS.jeo6(=AsEbW)(mQ]&,"jU*/cG>%m:gRZ:'_#[s3WRd4;!9UZZMAoW(Op]QgZ_tOIb'.'pN+!+o+g*lNqMb2B@&28F(,\AH
%eJK@N'J*?bX!*$,L4pH6FV%;<_aB8c==GS`oTcYd#1g'K[,OqpOIF^!l#joF<-&-P_*Xq7kgYtV[]%:O'f**MP(l'&q`pK6'r!%X
%>:6;D$5=K(dfQPVp^fAb4-*\I`)0QHH!\Z\!^*MP?`f'JH9[qTLqA^acoNGq/^td2m]oP#i=0q#D2DYKRVJL4YrR-Bh7'hHMkNn/
%)2U4:O[YDs_!F,T$5iV3VmUK7+[sut-l4(M04HMCLiW`)*7j-=#/#.Y<15b;,FJ@%;_5tP&Lsif"rgI0elpe3A'Q:%a#Yhi"&A8"
%[.G/Z1lCt;gP=;b2Xn++9mNL7HXFuO&k7F-Ls8k`oU'As%Zds#Jg'4g",T.1DK1MZbngItF:95>JX4!2]lr6JXqa@#>E;h7BF,`3
%7jTcBODL[HClS</9%7qi-J3'e:ZMOn4j1[9gDkL&-%Tl@b-0dr)J_-4ZaNMsK>[>EYS2Af4MQS7=JcNek`Bmug.]1a<o"!#hdT`o
%;Y6#eW'q(L%93\d2A[\)"aQokN-hWc>tP@D"(_&@>tL5ZJ(,l>%7I">Ru*:1ete'94:3&$>YDb)&TH!Y`[HMo8+bO^2Y4N0EX%n!
%0^Ao&kDT<)!Wk;C?/4BYMXL;NYUpY#c^WJV+]V8Ko9s!,F8X2,jZm$e7eYp:brCmDpW='WAk#l8:B8uR2ZJ8RfD=7AOlYu;!W<N2
%*3tYBOZ5MmM6S-Rq%@4*gKKNIZ&r6-,B>>Vc.<Cr.EZ#4?*A_$$mjVj&g+?>/Xs`Emcp8+SpjZ;$Ed_aS.UQt&>9O+XAK5Heu'^p
%<Eg=R<0OLn3ppoL%2bG&Vo7R)4+.c0b:t5PaN#nC64h#r'RYVQWB%au43XP;`.5$NF>apFc&I\Ec2+^O@nEhUXp.WPP99U.@s-jK
%'cge>4/D:f;)s\u`=m<\\&EO8$esaq\?mN,CG;QAi'U&lG_g?k;nq:O-ANqN/jg.mN'E":M%b0`MD28s#<O,4,Qn+_/T^H>fb'gc
%1\N=489Wph'SB/f#`^/D?51T)TApl^AHF.]O!lJO\4KXj=:*kWmYX<pN?_%hNYBJI_S/fO>u1tlUO[O+.J1Or*;,"3(j]9i$:W#`
%.R;4sW>X#[Nr$UM:3Sg)2HSPFk(.OTLoe/)l-I"ZOh<klS!c(\3s4$Qf)((\ZdFJ5S*tMfW9b#08Bc'\9W&6h*kE?S,_Buj2lbjb
%`nh2!Zb?e54r0V^10i&M-3EU&f`Mb4kS<!'U1a;$/3S5R<,df'EE;%c#iOn#..DH%,gOQC+4h0egrdK]IqlPaCO;jiZ4gXp[N]0K
%r>sdbb!h6uc=c+uNmK<s7`u<\mn>&_hh;LB7q17"[TXAJ^tU6!Hoq\sDKb!/3=T;,V:d1.Y\Tq+eSkeqjJh'GaJh0>:.0S/-uS7=
%)n9:WIUS2FfBA`B.q&,9kZA=r!3'!U'N=E>,SL"e1-/&eH.5IWggR\e/s-hCYR^H"gWa5[(G]Sb1&*T\6.q&`\Q-ct=V.[^;A6bM
%cQ\JVA3h\Q=W<56j9ZR@2*l4O`1CTtmYoQjTN-XU#7-ng2@b$;@\&7j);^+V<0q%p_Z.9&Q4^$hKSscmHOB4a3:haTf.<42a`>Lj
%E,[=@;AKu-=-n[PE!,$snj3`b6aDBL8jc/l$CN:ZZO26R(g82,*2nD5\RU$"(FWIaS/DI=0sh5//NsIAq>ksu\_;pS>VS49AXVr-
%Yd]+lF&9[\.K_^!`6/P%1`0Q.'PMK.nAkd&>_[`[M=%q_@#8Va@4aL9H4:^N,[I_>TQofM/q,*4U1(!fpr;!5+\ItSrE**?9C_9]
%4:,hNlrXNbBpS[So#obtJSu5!.tAEDV`foK^P^.,>mt.jAtCRUfPX.r.pXo<jJA"o!,H"h.!b<T8U>@j)#K\2SnrXD<9.n-4(M.?
%E@I"<Naa]%X06;0?-W?gY-&pf'SRK/<^>`@RiA7tbT@O1*JHRs=6kBL/$>`(0gI]R;9,C3.%Ua"&6=.h_e.;ls8;VD-T(,1ZiLJn
%;ept0\!#N5%NSeRWF#ctLPSdbHU&F]!-q*plU%Cr!?u/-l&(0T;W8AmBk%m(<re@W'8VLe87CbEV'_=q!n>G\2NUNZ,R?SI/hDC=
%.O@k#e#6SQ&/M_#S&o0]6HPDu+Qp*__/qZ96$Y9sVLTl8M&%+k!QY7PJaq6Jd%7-seF$$jkYNOmS^>VohP)A0h7WPO=Mo.\:[mS*
%Lh=P(/K%;BPsK8E,pbPk=^'V/=Q(tH,`_!9:>ggpB-BOa9F>G5m7eo(XHH'dR>dT2aT2s,P/B+/SGR$I5E5Nl_ATDAh2LAl>]C=8
%ORpc8]Pd9eKGak<!q%[H!!AT*HO=/pA:d1W6i`t*9^3RP?4aCj&/.BA-`gE=.4ISCbnF&Hl`"-B3F3<V`5UJr+tP.(TAX(e;SYK4
%`@<"[Ql@HGSn)Hq$VgCJ^ho;=9,[j35J!HIO]h@DV53.'4aUWXdK(S`f>d/t<2M!F?t)5ob/B-KE-qm1\h#fp6\pi.AX_94hurPu
%,FJT@';c2Mq)FZ#K8)B@Ve-es(k's)ZdCA&JnGj_r>0'E"p<B_j;UVu=Yu"idABfu5\8tPRA?m7q\Fq=#OA0g1P9e1EG6dV^7#`s
%&Lm:kV:dlPYJAL.2c4"lOd7X!UdRnpV(p;p__B=N'"I1d)bWsUBpb;61D:BF$Ani)cb,Xd6K'oV/iJs1eh6("h6K@@;&Qd+mY#)U
%!-Y@s@@AV6d*,pt"<^;)ll>/d_%JQtP<.MS48-AAE`gAGo5)EA;Y(YE2@pkfmL[44JNW/S8?I^(0$mY:TlZPLg&a/RG)8N]al00P
%9d3Z$3QB'/D4LdE;\o1i#D#2sZbG?Y!Ruf'%n$C1bb;AY1HF6Hf_m4\fbK?t\3`"$]0d:/SXLIQNpAJ7G_5+>AaIdC78.l+3b1:)
%i\4k)GsW-KZr"1t7C2fhlt6mIgsTge3[E"J'R=lnP=2p@o_(YKl[/oKMM/:GQ@o9*B4dA/3&We"Eh$(u&kn+_"unqD15A%,MdW.Y
%Vimd=XbP;.$2Y@#F@<HWaPtG#k!11SJ#BoEkj,=/qfRXM4)gc`9$3"u7)a+*cLWIlfq8ZAZo)7hBA=M86Q(Xi[;F4C]4Ua3^qCS-
%$UVl,:*K@>4nDq^P74AY#Rc8,r#-]=0E!ZgloPs+JP9H\j!&'qBNYfg^4bir0P6he:WPV&8;ad1;`4ZR!aWiThD@Pe7k`>UESqEK
%BIqmrN16]OL7G'KLaAfOls0qbU;3.$3ic6p^+!8PRDC=p/8lE*S%8'S\"qLh1q5!)*<U4-jSG5'00pNBenoi*@<]h/)a)Bg-,"<8
%.i)$\4>`9"b<>nqg-Hk4+5db0<?&un!7Ej:5&e[lUkH;BS.cnc^0W;SjkJ3-U3q[.JnktDh4!m5hVPR"P/dhk.UoBFQ4Mo"ULMdR
%.&>kjA*0d7)%7R*_.2Vm2r'Wo$=d0m16f9\NS66&G:_+.Dp/d<k3<[u3o_Nhgq$Y%;k2F0&sotgAh3"#V7lTZ&^Ah]dF8#U9_L)s
%D*Rgm%fa/JGFr;\lL+:Rrh\ZCr-gWW=V!:bkMf_SJ1kD4(BalXLIMI`A/DrC6$d,SG.ccZaATR%E=,$-$1NP<\*8cjF#gZ%OgoL;
%*/@9<S'3gQ#S]$u\(fAdSj\\O<np(%dd?`JqE6"FZhXRhUJ/ccXeXU'4KltS,sK<(F<a%_mk$Yb9V'g>S+Tgnfe@TGm[=LD8.Y*8
%)[\^@d"a3a?2#bQL,OnZ?#UkKNZ>[p[^H"$<q66fQ/RInAR86]DdIj6Y$ot^F)Nj5jMb\n)7*P>d"a3af3i4=3*VTPR@Rd;Lj.&i
%I<=4QH^95^6^dk'RP,qY0W#@bF=Rd\QY;f"+lOu9m[/G!kdInrRSF)7rX3l\R&QMeh38W2CfVMQ^(gFJ75(2.,sf-,P+9t0jSqa[
%g,hQ^_Z@2UbX1luHtV;T9(/M/.aX0PRfNY#=qk>pTjtcYd\8$S(=D4p0e3SqbVIj\ilr0G%RD"0RsR2[ljI5"#q(0[X-B+bC2#_<
%0I4a.R\XQchk?N2N]g&NSWhG,A%u#7;6K[D%<1n?4OQr'@K\2L"u(=[0SLfT8;g0O.cBY=?/;#C*Yn003mQPOBpg^D8jsah+p[ue
%)FYF8pkChe"@+u:B@>0QKLR5eV9+OTSD"m>)()q]hUZ40(^lo^@D>0IJ"fJU1b,hl+q_><ZG]j6(@5>SX..R%#hr*tRaC!bH7I2,
%rlqGW1SY8JJuCNL..!_2;G>o7VS5YG-#=4k)MLjABqBH(MY&IcBG;cnj52+3Kd0<8,W7-+'IJYV&j&^>oWCdPlSOf-@Rm8#h:uJ/
%QJ!A@<ftZM[u,83\Q,Faa;mFt6#Q@/a1/$;B8h1`FN1hc7m"eo*h>T7($Q6MUI]$^)auf?]W7O1D;O_mQ2`4-eUR-hH#7ukH)e1@
%?7U*CZJ:.6c^LlIFqRI8P&=Q#oiMM%9_MTq!b/R>Ukn&kPnYPGUh;!tl<+G6ZFT)tm<=NmWBE/VDNMSl+P^)R7P]VGkh1d]H8]6F
%N7r$W^Prs%gUtK0E?LsuEq\,0$pkl]LFkP\eqJB@fQq_gSU)(M8^?8\NUQi*@lpq1Ob(QsGZdtD6B7#`6M_eP<(O/&!8uu"(kWeU
%)2IW&G)Dt@"L!H/W_Og1alJiAiPDE9)Q_%)8]-FOPArW9%V:C]f.A1T_]o:[/;[K^gGU]Zet7aNlmZ"H"Rc*i]DceH9G@fA&I]_*
%k>FJn"G+fWG$;c;_4<V],X+E#BeToe`rQFT"H3]\ZFgKhT5q?$g4Jk)d@#QS$6r"P_;WS=#+H/6GRI-';1alA,FjFM0c[@4,i1.$
%`!pdKQ70l+!Y9h'R<W:/\0WE+R7T7B)dHh2r/7('jD4ld->b)m',8m4E1Bi5.I%:,B!\KBXA4fG98imnC_MG<^3MqfhJ?Lla.)=6
%;)L;KGC%WM56U0I[*7(L?uWhoVMiXUnDr[+GeBT^=`,_II2[J@SBp,[QdZH4:js$1p$2\t6"5ntN!dX-T5b@QW2(^+O@YJk%Wb)T
%UE5-3+N9!H.9Ak&>0OX8ib)4:#kR=@N&`g.Nd<T&4Lr1XZfq_\^6d(T4IjN^6h2D0W=E'cd%$]f<GX'HL>/PKEe9I2,'ZLt(&@7u
%q`mML!r"YSLo/T5p-<Z&amaBh,%Q8eUZ<"$b,096c6c[>0rL.f:+cS;0]^Ii`ZW[5AZUrE;(j"h["hi.(\^$%2r:;Y^[X(d[]jl;
%_\O9UNl9^/,lK!doV2(3-Z?0?Y)6WQ/AT;bTMo74+PtN;$NRKSLOp:WiL':McsXT:9-kAb9]<V"kH,p7%mmu=&mkE^3!WtJo.,BH
%Vm\BH02ebsU8tT@#o9hZH-'3^S16g9[$c*k(Hmd_E['?U`CniY$1gllo9S(WPVCQ[BU!8.E3sQ%ocMUfCU=eSmp@X_B6jPooGBPK
%@QI\tqous@="Dn>cXpD[qt7qClL@>Jq")VuU(4DYi+9<p0'aj/h+[+rl!7X#o^-?MRnYQ*C@uR-B%G@M3?&*(YhB6;c`0\n\:sTi
%THuh@!\/j9YHOtZD$>_Q&luJ^WiNm&["%3627V@:?,<#lFtpP8"'?fXV6e$b5/tWs>Z@'Z^0"\GUS\rZ>5.OofCukU?s$JP>"gK6
%b;u^O2](5lgM/g&s.2q$4qH3*F6Y3^]"Y,4k2s,K7b?,.Vj[O%;`1?kW_9\a.Jrd)gZh;4^rrbR<&[]d5L693eP/15cDds@Zi!e[
%?K-7Z/?`u)Tt8N!4W#f%I"qtd/(5c)2i"I4*4H_f"iKT!?LKLV+4@TsB9nVU\:a\'E`E?sVnk*K>Wpg>EVg#_5kd:V.(@b7T2[N6
%P$4o;Gm3K:!`#6/^Zjp[Uqc]1]Y-h-0:`t,4i5/E$:cgHHD(Ik!K77AM^U(qJ)UN)E]q=d&Nq!1TF*8o_=.2T(7rQ`O6A(C;[NY=
%QN]f>LQ6BuC*kQurbrjNN-Gm8^I7_7'jKg`5*]c^Ef>4]OSM"U$(lkX@^enA!!SL\4K$#n7p!9mhtlE[g\,HKN?*((*)YKRS3`;8
%8%Pa?fV2+,;'bnug`GFL!DBOs/GM.rgVV+C]L0DgSm?NP3jBdhebiB9SlT9WJ)V%>7f/#>V9Rc&"LXj,.M)0A!RjO-\8=a<Y3XF+
%7tkB5KL%m*ghZ&bXa+%5n/@()O3L#WnFs3"DjO2J\o'R(<g*[clt*/'fX>(WEn`k\^"7a+r3KJ>+*s1DX\*OU%LX9uo7?W?:'Z@J
%FP[ke#8NVClBggVQX$o!lP$A(Ej7=@/.N^m(q[lT'?F#b9oq!/M\[snCgEIj/M:jdFV]<ZRb,pHWt*^o]h/Z\X[,W@-:'6r_%#GI
%+c;.X=b)#.ddm;51\CLij(R%*S6!"?h;6cH/8BTn>FuSVL[,pLI:bir+A9;J(UTguPs9+[&afSYK6E)l@+L@p`S0e2);OZPogP"C
%]ertdG+A<n*#"e6fHZhk8`/d[FM>;Rea%i8K:`q&lNM`hA'2\r?IU'sm;2C?Vg=J+c"f;$*1TgfX'';,S<H!U/Tf;!nRQtGj$bZ@
%[hIR!:4^6fK."K#$NU2mBlsq,=mteN=Z*7fH:aR3$YfZj%Y&c!^L-:a1n:o;cKY&Sd+oK5D!^i]nFSABn5B:7VuQbgQdB;?4UcZ(
%@9APT5lEC#!\RTG\.p$^XgZYqA%__VnTZo?A,XUUheL0<O0PKDNlP:#Ptns3MV$k)QXV&JSN)pPWaSV"WR9`.[KOXK0W*3=!fV,S
%ZZ*O/N('X'&=J(D=q5<XNUPkKV9Jh5/>tnY=+jhP_fhbk.gcb^B%?\*\&$B4Vf4%1G+m,A3=JY8i=VZOkaHm2Vj>emc#S8WH!tbd
%^<sj\68,S2.VeaSXP!<i8$(lZ4e"%,K0KOCRqcqG#B-Wa'TOL.W-25sB]\`ZR>sKpodZW,?_#jL)6>A>(->eS53O^`h63X9`koX)
%\uOAu&Y28V=%0_0<Wj3q/,bpmWs6HM7F+`q6tN6jc^U5UH:IJ&ipLVR/78/f:a(74IP\`@cCh3;'"Y6I:&V@D%_]#oBU7E'O,FNA
%pMHp;U9f/#dJB#IHMeUV&PX9@YCq.*9ik-ZY-S'2*V^'@Q"e7>.JIPPG6&W70CMp:Y2*Egqg6f=NjAO=gN-U5oR:?il^#&o*DjP,
%l!gBFS8WE$P9)==/)7h1J(2(<9a8o3*R9)ofAgAobT36!om[`YoaKD_L2JE)DXchh=m`%**!Xmbh!2hOR/cVRQ/8T$N]?f2rjCj3
%NAI.G?7a.OH+hkCW&>CG%hF=Y\''EtFn=PYbMfM`Uuok`s.1pVF8Pn$I(%BA8+::k_5daCTDKM/WnCE4b$a_6DV4i8"$876HD#K\
%<PKCBH;dO[%j"%Eou0g6<R%o!H`?U_Zi4\bq)SZS^%Lp>EfE:YB9T2.08PWW403`DC8Mg%%>[Y0'3qEbWUJCQls*rBquP.?1]#Z8
%*/a,,mGXZQlhBH,HF',+gVN97*rQ,#7CpqAGjqd&Y4h4[[a=^!h+QtS[sM<DQeR8GK=9lCW1?!bGG/BCRR)A(H?20sB-O\Dpes?/
%USEb/@[B:Xn4lS'*oAk>BAWF[a4$esm.[U+?$.:si58LEVdA$[<O95<<m;m,05&HtmjT2c-[2k&2RS\5:?Dr]4OXQKDsl\G*#\0T
%F_/(Hq4da!mIIZD%N%)u[90X)>'Vj:d4J*@_0YsIe.`+>'>4huc5#,6k\oY=RHmWdLRRO'>qsssm:Nc^"E1<JhTANA6dFUa]jB!m
%:*GmKKjN>V_fJ>1NciDfd63\RjjLKWC3n\'6`"u@D;)X+J!,7k,13EZ3:k8`++rb2c-hD\ZjcnF26&A*0S@X)6>NMc`hTS\][9O;
%U7,)?EK<H"1<]&s2I4hKVZ(_E-gM[(N7R]jpMu=-e!5CUYYP'qgYSc-?q1O*,-.SIf?I;9/?e>N"kt=bk-Tl_b@XXJHCd\^GdZ?%
%h^d<-(/%kA0O:>Nb;J]lV=mXfc;A_"MtRT"VUV(e*Js9*afr@U)ga1h-V8S$-p;mN'Fl0_TFNXEZ:&cO^!q#;F)At"(u>7Bs7(g2
%*-&aFgs8N$mkq`VWpT:l*.]F8I%Sl7">&i.h^8tC!oY@qWQ6lEY,dNh$Fqk/TgMLHaJE+8+0[3N96?)q&+BSnqB,hbe5VL'1e];Z
%&@@hC/`P,'k*[CHik7aXpmNEKUBD,Y%D-L0.Un`"4*VBn$7KW9VEhWs;n/(!0JbSuPc/Db,)T<?9:d"m3a1MTGF6;D55oWaIoL+j
%e`^X+_Il'D3d<D@_uDUNN=K91.'73s)+%8LqmV2*")UZZCA)Z^'`-u@U:ad,%p4:_q:Y4GoG^[d1jH,e`nN))Jb6/7J!f&n5+Z[G
%esl+0qu9`Dq%c6-UZ],rdm]!neN<^-&$=4fLjDn14X!\O@!$-fNhH';[<a\*#O0EFMPVgYl:Crn_<<,lrXUibs1K]7d1!"!h_NVI
%j)DZ]ZeXbG*"+"$#P_XhK9+l()+UlS%E1\j@7oRcf[n$uM^*/"68J:;l":I).bOIYF(t#8TmZq1M,7TQ"V?f*-qWK(CT>%nk6E%3
%>00+G6lri'"JA6!h'2S>_p>%*apt8!+.tO>1>>lG?HmQj/@iX!Caup"Oo/Wr.F:FpjIldJcb$$-G]1[T]XP7cc#\=PDTh[b>hS>/
%](3a;GC/OW`N@QtmZ"a/gEJdsK-Z,^^!]ifV'SUD"=C`)dIU!6IZmHX<:`@*!CVo]3<lcVaEs%i=eu[/*.h."6d(O#-jr!W;DnSu
%C7mlJ.FTF>(WbU'C(b/)T4d(Iod=b#;;md5$4Ph]l;(@&8aFJ!B`_1>gan/qlLcVW0qYAqH[rF&5$(B;R]<D]VEDl6C"5@*'Zc)C
%g1MiXl+6+8pBJLC6uq]P!jRNPC/em>+;tZ0gLnoUQs/;krp\t2odBpj=GSa]N?u+jLrHoFMIjBt&IWdZ/XGh)7n/0472\+g[Uk-&
%:Sg2e+)B5uj6_!Y9+p/402_t,Ne>_EDVgc35CgEYa*Q/cEl-QtBiL&-OYep`0``GtS7aF0L!g]H`&i&n8TE:<G9,S2<L<BWWMVIR
%,%%LR/%DlfJB[[YIg+TO[GJ1PS]/Y22,Ks-.A.L4YJ3;Hno'9HV!7~>
%AI9_PrivateDataEnd
